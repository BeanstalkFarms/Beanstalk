{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Slither",
          "informationUri": "https://github.com/crytic/slither",
          "version": "0.9.3",
          "rules": [
            {
              "id": "0-0-arbitrary-send-erc20",
              "name": "arbitrary-send-erc20",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Arbitrary `from` in transferFrom"
              },
              "help": {
                "text": "\nUse `msg.sender` as `from` in transferFrom.\n"
              }
            },
            {
              "id": "0-1-arbitrary-send-eth",
              "name": "arbitrary-send-eth",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Functions that send Ether to arbitrary destinations"
              },
              "help": {
                "text": "Ensure that an arbitrary user cannot withdraw unauthorized funds."
              }
            },
            {
              "id": "0-1-weak-prng",
              "name": "weak-prng",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Weak PRNG"
              },
              "help": {
                "text": "Do not use `block.timestamp`, `now` or `blockhash` as a source of randomness"
              }
            },
            {
              "id": "0-1-controlled-delegatecall",
              "name": "controlled-delegatecall",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Controlled Delegatecall"
              },
              "help": {
                "text": "Avoid using `delegatecall`. Use only trusted destinations."
              }
            },
            {
              "id": "0-1-delegatecall-loop",
              "name": "delegatecall-loop",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Payable functions using `delegatecall` inside a loop"
              },
              "help": {
                "text": "\nCarefully check that the function called by `delegatecall` is not payable/doesn't use `msg.value`.\n"
              }
            },
            {
              "id": "0-0-name-reused",
              "name": "name-reused",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Name reused"
              },
              "help": {
                "text": "Rename the contract."
              }
            },
            {
              "id": "0-1-reentrancy-eth",
              "name": "reentrancy-eth",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions pattern`](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "0-0-shadowing-state",
              "name": "shadowing-state",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "State variable shadowing"
              },
              "help": {
                "text": "Remove the state variable shadowing."
              }
            },
            {
              "id": "0-1-unchecked-transfer",
              "name": "unchecked-transfer",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Unchecked transfer"
              },
              "help": {
                "text": "Use `SafeERC20`, or ensure that the transfer/transferFrom return value is checked."
              }
            },
            {
              "id": "0-0-uninitialized-state",
              "name": "uninitialized-state",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Uninitialized state variables"
              },
              "help": {
                "text": "\nInitialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability.\n"
              }
            },
            {
              "id": "0-0-uninitialized-storage",
              "name": "uninitialized-storage",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Uninitialized storage variables"
              },
              "help": {
                "text": "Initialize all storage variables."
              }
            },
            {
              "id": "1-1-divide-before-multiply",
              "name": "divide-before-multiply",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Divide before multiply"
              },
              "help": {
                "text": "Consider ordering multiplication before division."
              }
            },
            {
              "id": "1-0-incorrect-equality",
              "name": "incorrect-equality",
              "properties": {
                "precision": "very-high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Dangerous strict equalities"
              },
              "help": {
                "text": "Don't use strict equality to determine if an account has enough Ether or tokens."
              }
            },
            {
              "id": "1-0-locked-ether",
              "name": "locked-ether",
              "properties": {
                "precision": "very-high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Contracts that lock Ether"
              },
              "help": {
                "text": "Remove the payable attribute or add a withdraw function."
              }
            },
            {
              "id": "1-0-mapping-deletion",
              "name": "mapping-deletion",
              "properties": {
                "precision": "very-high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Deletion on mapping containing a structure"
              },
              "help": {
                "text": "Use a lock mechanism instead of a deletion to disable structure containing a mapping."
              }
            },
            {
              "id": "1-1-reentrancy-no-eth",
              "name": "reentrancy-no-eth",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "1-0-tautology",
              "name": "tautology",
              "properties": {
                "precision": "very-high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Tautology or contradiction"
              },
              "help": {
                "text": "Fix the incorrect comparison by changing the value type or the comparison."
              }
            },
            {
              "id": "1-1-uninitialized-local",
              "name": "uninitialized-local",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Uninitialized local variables"
              },
              "help": {
                "text": "Initialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability."
              }
            },
            {
              "id": "1-1-unused-return",
              "name": "unused-return",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Unused return"
              },
              "help": {
                "text": "Ensure that all the return values of the function calls are used."
              }
            },
            {
              "id": "1-0-write-after-write",
              "name": "write-after-write",
              "properties": {
                "precision": "very-high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Write after write"
              },
              "help": {
                "text": "Fix or remove the writes."
              }
            },
            {
              "id": "2-0-shadowing-local",
              "name": "shadowing-local",
              "properties": {
                "precision": "very-high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Local variable shadowing"
              },
              "help": {
                "text": "Rename the local variables that shadow another component."
              }
            },
            {
              "id": "2-1-missing-zero-check",
              "name": "missing-zero-check",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Missing zero address validation"
              },
              "help": {
                "text": "Check that the address is not zero."
              }
            },
            {
              "id": "2-1-calls-loop",
              "name": "calls-loop",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Calls inside a loop"
              },
              "help": {
                "text": "Favor [pull over push](https://github.com/ethereum/wiki/wiki/Safety#favor-pull-over-push-for-external-calls) strategy for external calls."
              }
            },
            {
              "id": "2-1-reentrancy-benign",
              "name": "reentrancy-benign",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "2-1-reentrancy-events",
              "name": "reentrancy-events",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "2-1-timestamp",
              "name": "timestamp",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Block timestamp"
              },
              "help": {
                "text": "Avoid relying on `block.timestamp`."
              }
            },
            {
              "id": "3-0-assembly",
              "name": "assembly",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Assembly usage"
              },
              "help": {
                "text": "Do not use `evm` assembly."
              }
            },
            {
              "id": "3-0-pragma",
              "name": "pragma",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Different pragma directives are used"
              },
              "help": {
                "text": "Use one Solidity version."
              }
            },
            {
              "id": "3-0-cyclomatic-complexity",
              "name": "cyclomatic-complexity",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Cyclomatic complexity"
              },
              "help": {
                "text": "Reduce cyclomatic complexity by splitting the function into several smaller subroutines."
              }
            },
            {
              "id": "3-1-dead-code",
              "name": "dead-code",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Dead-code"
              },
              "help": {
                "text": "Remove unused functions."
              }
            },
            {
              "id": "3-0-solc-version",
              "name": "solc-version",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Incorrect versions of Solidity"
              },
              "help": {
                "text": "\nDeploy with any of the following Solidity versions:\n- 0.8.18\n\nThe recommendations take into account:\n- Risks related to recent releases\n- Risks of complex code generation changes\n- Risks of new language features\n- Risks of known bugs\n\nUse a simple pragma version that allows any of these versions.\nConsider using the latest version of Solidity for testing."
              }
            },
            {
              "id": "3-0-low-level-calls",
              "name": "low-level-calls",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Low-level calls"
              },
              "help": {
                "text": "Avoid low-level calls. Check the call success. If the call is meant for a contract, check for code existence."
              }
            },
            {
              "id": "3-0-missing-inheritance",
              "name": "missing-inheritance",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Missing inheritance"
              },
              "help": {
                "text": "Inherit from the missing interface or contract."
              }
            },
            {
              "id": "3-0-naming-convention",
              "name": "naming-convention",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Conformance to Solidity naming conventions"
              },
              "help": {
                "text": "Follow the Solidity [naming convention](https://solidity.readthedocs.io/en/v0.4.25/style-guide.html#naming-conventions)."
              }
            },
            {
              "id": "3-0-redundant-statements",
              "name": "redundant-statements",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Redundant Statements"
              },
              "help": {
                "text": "Remove redundant statements if they congest code but offer no value."
              }
            },
            {
              "id": "3-1-similar-names",
              "name": "similar-names",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Variable names too similar"
              },
              "help": {
                "text": "Prevent variables from having similar names."
              }
            },
            {
              "id": "3-1-too-many-digits",
              "name": "too-many-digits",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Too many digits"
              },
              "help": {
                "text": "\nUse:\n- [Ether suffix](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#ether-units),\n- [Time suffix](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#time-units), or\n- [The scientific notation](https://solidity.readthedocs.io/en/latest/types.html#rational-and-integer-literals)\n"
              }
            },
            {
              "id": "3-0-unused-state",
              "name": "unused-state",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Unused state variable"
              },
              "help": {
                "text": "Remove unused state variables."
              }
            },
            {
              "id": "4-0-constable-states",
              "name": "constable-states",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "State variables that could be declared constant"
              },
              "help": {
                "text": "Add the `constant` attribute to state variables that never change."
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "0-0-arbitrary-send-erc20",
          "message": {
            "text": "LibTransfer.transferToken(IERC20,address,address,uint256,LibTransfer.From,LibTransfer.To) (contracts/libraries/Token/LibTransfer.sol#30-46) uses arbitrary from in transferFrom: token.safeTransferFrom(sender,recipient,amount) (contracts/libraries/Token/LibTransfer.sol#40)\n",
            "markdown": "[LibTransfer.transferToken(IERC20,address,address,uint256,LibTransfer.From,LibTransfer.To)](contracts/libraries/Token/LibTransfer.sol#L30-L46) uses arbitrary from in transferFrom: [token.safeTransferFrom(sender,recipient,amount)](contracts/libraries/Token/LibTransfer.sol#L40)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibTransfer.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4205f4f7dc636959ca715cb5e35bea2583a43b99c4e5a5ce188403a3bb21b09f"
          }
        },
        {
          "ruleId": "0-0-arbitrary-send-erc20",
          "message": {
            "text": "LibTransfer.receiveToken(IERC20,uint256,address,LibTransfer.From) (contracts/libraries/Token/LibTransfer.sol#48-71) uses arbitrary from in transferFrom: token.safeTransferFrom(sender,address(this),amount - receivedAmount) (contracts/libraries/Token/LibTransfer.sol#66)\n",
            "markdown": "[LibTransfer.receiveToken(IERC20,uint256,address,LibTransfer.From)](contracts/libraries/Token/LibTransfer.sol#L48-L71) uses arbitrary from in transferFrom: [token.safeTransferFrom(sender,address(this),amount - receivedAmount)](contracts/libraries/Token/LibTransfer.sol#L66)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibTransfer.sol"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b891217740bd2b1bf13885bbf6860ca17e3a4fbbaa212808b40ab2cdef661b02"
          }
        },
        {
          "ruleId": "0-1-arbitrary-send-eth",
          "message": {
            "text": "LibWeth.unwrap(uint256,LibTransfer.From) (contracts/libraries/Token/LibWeth.sol#24-29) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success) = msg.sender.call{value: amount}(new bytes(0)) (contracts/libraries/Token/LibWeth.sol#27)\n",
            "markdown": "[LibWeth.unwrap(uint256,LibTransfer.From)](contracts/libraries/Token/LibWeth.sol#L24-L29) sends eth to arbitrary user\n\tDangerous calls:\n\t- [(success) = msg.sender.call{value: amount}(new bytes(0))](contracts/libraries/Token/LibWeth.sol#L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibWeth.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4df1936763ce67b8c5d49ad26c64b1a68d74fc13053d4b90f0928756946c40a4"
          }
        },
        {
          "ruleId": "0-1-arbitrary-send-eth",
          "message": {
            "text": "LibEth.refundEth() (contracts/libraries/Token/LibEth.sol#16-26) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success) = msg.sender.call{value: address(this).balance}(new bytes(0)) (contracts/libraries/Token/LibEth.sol#21-23)\n",
            "markdown": "[LibEth.refundEth()](contracts/libraries/Token/LibEth.sol#L16-L26) sends eth to arbitrary user\n\tDangerous calls:\n\t- [(success) = msg.sender.call{value: address(this).balance}(new bytes(0))](contracts/libraries/Token/LibEth.sol#L21-L23)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibEth.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 26
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a793fd6521605e105a9d7eb91526d4c5f5012930025f1828bef93cee3f3a5332"
          }
        },
        {
          "ruleId": "0-1-weak-prng",
          "message": {
            "text": "MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190) uses a weak PRNG: \"s.season.timestamp = uint32(block.timestamp % 2 ** 32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#184)\" \n",
            "markdown": "[MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190) uses a weak PRNG: \"[s.season.timestamp = uint32(block.timestamp % 2 ** 32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L184)\" \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 190
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3f760f7d4f2cbaefdf6dcbc2f708b3f79374b08b2ebc784d750146af18a9d5c2"
          }
        },
        {
          "ruleId": "0-1-controlled-delegatecall",
          "message": {
            "text": "FarmFacet._farm(bytes) (contracts/beanstalk/farm/FarmFacet.sol#81-87) uses delegatecall to a input-controlled function id\n\t- (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#85)\n",
            "markdown": "[FarmFacet._farm(bytes)](contracts/beanstalk/farm/FarmFacet.sol#L81-L87) uses delegatecall to a input-controlled function id\n\t- [(success,result) = facet.delegatecall(data)](contracts/beanstalk/farm/FarmFacet.sol#L85)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/FarmFacet.sol"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "333d6f9b8b8627123713bba76e76ade1d57da7c1f1f8e7e4caeb4d640814dc25"
          }
        },
        {
          "ruleId": "0-1-controlled-delegatecall",
          "message": {
            "text": "FarmFacet._farmMem(bytes) (contracts/beanstalk/farm/FarmFacet.sol#90-96) uses delegatecall to a input-controlled function id\n\t- (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#94)\n",
            "markdown": "[FarmFacet._farmMem(bytes)](contracts/beanstalk/farm/FarmFacet.sol#L90-L96) uses delegatecall to a input-controlled function id\n\t- [(success,result) = facet.delegatecall(data)](contracts/beanstalk/farm/FarmFacet.sol#L94)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/FarmFacet.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f3f037718eb548eb63fcb73aea0721474d16401755bc36f3c4ad17b4f7e798f0"
          }
        },
        {
          "ruleId": "0-1-delegatecall-loop",
          "message": {
            "text": "Depot.farm(bytes[]) (contracts/depot/Depot.sol#43-54) has delegatecall inside a loop in a payable function: (success,result) = address(this).delegatecall(data[i]) (contracts/depot/Depot.sol#50)\n",
            "markdown": "[Depot.farm(bytes[])](contracts/depot/Depot.sol#L43-L54) has delegatecall inside a loop in a payable function: [(success,result) = address(this).delegatecall(data[i])](contracts/depot/Depot.sol#L50)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/depot/Depot.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4d90fa303a527f03f024f2bf4929140b6c2a0a1f7e5f7880c499df240eb76d68"
          }
        },
        {
          "ruleId": "0-1-delegatecall-loop",
          "message": {
            "text": "FarmFacet._farm(bytes) (contracts/beanstalk/farm/FarmFacet.sol#81-87) has delegatecall inside a loop in a payable function: (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#85)\n",
            "markdown": "[FarmFacet._farm(bytes)](contracts/beanstalk/farm/FarmFacet.sol#L81-L87) has delegatecall inside a loop in a payable function: [(success,result) = facet.delegatecall(data)](contracts/beanstalk/farm/FarmFacet.sol#L85)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/FarmFacet.sol"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c76da080ae2d8cb2b53b4b7e904930a27416d95ca5b00bd7f46212e38da6918b"
          }
        },
        {
          "ruleId": "0-1-delegatecall-loop",
          "message": {
            "text": "FarmFacet._farmMem(bytes) (contracts/beanstalk/farm/FarmFacet.sol#90-96) has delegatecall inside a loop in a payable function: (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#94)\n",
            "markdown": "[FarmFacet._farmMem(bytes)](contracts/beanstalk/farm/FarmFacet.sol#L90-L96) has delegatecall inside a loop in a payable function: [(success,result) = facet.delegatecall(data)](contracts/beanstalk/farm/FarmFacet.sol#L94)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/FarmFacet.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fb91004fec0492f7fced59560eb11ffca01fd4ce827bf3713e71abd8d1d4caf8"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "IERC165 is re-used:\n\t- IERC165 (node_modules/@openzeppelin/contracts/introspection/IERC165.sol#14-24)\n\t- IERC165 (contracts/interfaces/IERC165.sol#4-12)\n",
            "markdown": "IERC165 is re-used:\n\t- [IERC165](node_modules/@openzeppelin/contracts/introspection/IERC165.sol#L14-L24)\n\t- [IERC165](contracts/interfaces/IERC165.sol#L4-L12)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/introspection/IERC165.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8c65b90d48221df049dbb32250e798ae00e3501c5acb02c78eea9220e90193dd"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "I3Curve is re-used:\n\t- I3Curve (contracts/interfaces/ICurve.sol#51-53)\n\t- I3Curve (contracts/mocks/curve/MockCurveFactory.sol#17-19)\n\t- I3Curve (contracts/mocks/curve/MockPlainCurve.sol#17-19)\n",
            "markdown": "I3Curve is re-used:\n\t- [I3Curve](contracts/interfaces/ICurve.sol#L51-L53)\n\t- [I3Curve](contracts/mocks/curve/MockCurveFactory.sol#L17-L19)\n\t- [I3Curve](contracts/mocks/curve/MockPlainCurve.sol#L17-L19)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "94b27349bd3569f393b10468a826501acf0fcb61f1044306374a6f61800a4c16"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "IERC1155Receiver is re-used:\n\t- IERC1155Receiver (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#10-57)\n\t- IERC1155Receiver (contracts/interfaces/IERC1155Receiver.sol#11-58)\n",
            "markdown": "IERC1155Receiver is re-used:\n\t- [IERC1155Receiver](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#L10-L57)\n\t- [IERC1155Receiver](contracts/interfaces/IERC1155Receiver.sol#L11-L58)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 57
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a027d9e61342bd5be45f7d90614a5f7b8a977ceb6dedb6ad90fd3b6f728c5359"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "SafeCast is re-used:\n\t- SafeCast (node_modules/@openzeppelin/contracts/utils/SafeCast.sol#21-211)\n\t- SafeCast (node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol#6-28)\n",
            "markdown": "SafeCast is re-used:\n\t- [SafeCast](node_modules/@openzeppelin/contracts/utils/SafeCast.sol#L21-L211)\n\t- [SafeCast](node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol#L6-L28)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SafeCast.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 211
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a5dbf2f2ddbd53314aa0bc6a9b0e58c2e931ee8394837c615b51249cfe818565"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "IBS is re-used:\n\t- IBS (contracts/beanstalk/init/InitBip12.sol#15-17)\n\t- IBS (contracts/beanstalk/init/InitBip16.sol#15-18)\n\t- IBS (contracts/beanstalk/init/InitBip5.sol#15-17)\n\t- IBS (contracts/beanstalk/init/InitFundraiser.sol#15-17)\n\t- IBS (contracts/beanstalk/init/InitWhitelist.sol#16-26)\n\t- IBS (contracts/mocks/mockFacets/MockFundraiserFacet.sol#15-17)\n\t- IBS (contracts/tokens/Fertilizer/Fertilizer.sol#13-18)\n",
            "markdown": "IBS is re-used:\n\t- [IBS](contracts/beanstalk/init/InitBip12.sol#L15-L17)\n\t- [IBS](contracts/beanstalk/init/InitBip16.sol#L15-L18)\n\t- [IBS](contracts/beanstalk/init/InitBip5.sol#L15-L17)\n\t- [IBS](contracts/beanstalk/init/InitFundraiser.sol#L15-L17)\n\t- [IBS](contracts/beanstalk/init/InitWhitelist.sol#L16-L26)\n\t- [IBS](contracts/mocks/mockFacets/MockFundraiserFacet.sol#L15-L17)\n\t- [IBS](contracts/tokens/Fertilizer/Fertilizer.sol#L13-L18)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip12.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "acf9966cb27c9f2e8943b65e8720d673dbcc7df704b1582aa0114d9d3c4c80ed"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "Oracle is re-used:\n\t- Oracle (node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#11-325)\n\t- Oracle (contracts/beanstalk/sun/SeasonFacet/Oracle.sol#14-38)\n",
            "markdown": "Oracle is re-used:\n\t- [Oracle](node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#L11-L325)\n\t- [Oracle](contracts/beanstalk/sun/SeasonFacet/Oracle.sol#L14-L38)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 325
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c91d5f3c9ea4c76dddc20e9fc94caf2ee8481a6722c7cfaa3f8b94668a9ba62f"
          }
        },
        {
          "ruleId": "0-1-reentrancy-eth",
          "message": {
            "text": "Reentrancy in Order._createPodOrderV2(uint256,uint256,uint256,bytes) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#74-86):\n\tExternal calls:\n\t- _cancelPodOrderV2(maxPlaceInLine,minFillAmount,pricingFunction,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#82)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#171)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)\n\tExternal calls sending eth:\n\t- _cancelPodOrderV2(maxPlaceInLine,minFillAmount,pricingFunction,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#82)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tState variables written after the call(s):\n\t- s.podOrders[id] = beanAmount (contracts/beanstalk/market/MarketplaceFacet/Order.sol#83)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)\n",
            "markdown": "Reentrancy in [Order._createPodOrderV2(uint256,uint256,uint256,bytes)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L74-L86):\n\tExternal calls:\n\t- [_cancelPodOrderV2(maxPlaceInLine,minFillAmount,pricingFunction,LibTransfer.To.INTERNAL)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L82)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#L69)\n\t\t- [LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L171)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\t\t- [token.safeTransfer(recipient,amount)](contracts/libraries/Token/LibTransfer.sol#L82)\n\tExternal calls sending eth:\n\t- [_cancelPodOrderV2(maxPlaceInLine,minFillAmount,pricingFunction,LibTransfer.To.INTERNAL)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L82)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\tState variables written after the call(s):\n\t- [s.podOrders[id] = beanAmount](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L83)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [PodTransfer.allowancePods(address,address)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L41-L47)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 86
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "65d28e8e7c22f92cd3be28ee9d0797425c5296b473bab6a702adf189e80a4467"
          }
        },
        {
          "ruleId": "0-1-reentrancy-eth",
          "message": {
            "text": "Reentrancy in Order._createPodOrder(uint256,uint24,uint256,uint256) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#56-72):\n\tExternal calls:\n\t- _cancelPodOrder(pricePerPod,maxPlaceInLine,minFillAmount,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#67)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#158)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)\n\tExternal calls sending eth:\n\t- _cancelPodOrder(pricePerPod,maxPlaceInLine,minFillAmount,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#67)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tState variables written after the call(s):\n\t- s.podOrders[id] = beanAmount (contracts/beanstalk/market/MarketplaceFacet/Order.sol#68)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)\n",
            "markdown": "Reentrancy in [Order._createPodOrder(uint256,uint24,uint256,uint256)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L56-L72):\n\tExternal calls:\n\t- [_cancelPodOrder(pricePerPod,maxPlaceInLine,minFillAmount,LibTransfer.To.INTERNAL)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L67)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#L69)\n\t\t- [LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L158)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\t\t- [token.safeTransfer(recipient,amount)](contracts/libraries/Token/LibTransfer.sol#L82)\n\tExternal calls sending eth:\n\t- [_cancelPodOrder(pricePerPod,maxPlaceInLine,minFillAmount,LibTransfer.To.INTERNAL)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L67)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\tState variables written after the call(s):\n\t- [s.podOrders[id] = beanAmount](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L68)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [PodTransfer.allowancePods(address,address)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L41-L47)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 72
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f16eef136f5927a8ebff07ffd088d70465484548fa84d6b5cc3ea2d202272646"
          }
        },
        {
          "ruleId": "0-0-shadowing-state",
          "message": {
            "text": "MockToken._decimals (contracts/mocks/MockToken.sol#18) shadows:\n\t- ERC20._decimals (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#44)\n",
            "markdown": "[MockToken._decimals](contracts/mocks/MockToken.sol#L18) shadows:\n\t- [ERC20._decimals](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L44)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockToken.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0dce42f86d2d935b45165b85050ad88b8e6c951dc7ddc6313f89cc79e081bb99"
          }
        },
        {
          "ruleId": "0-0-shadowing-state",
          "message": {
            "text": "Internalizer._uri (contracts/tokens/Fertilizer/Internalizer.sol#39) shadows:\n\t- ERC1155Upgradeable._uri (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#33)\n",
            "markdown": "[Internalizer._uri](contracts/tokens/Fertilizer/Internalizer.sol#L39) shadows:\n\t- [ERC1155Upgradeable._uri](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L33)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Internalizer.sol"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f061973e46cd124da58079caf75c9da2767bf1340e45a5b71ad31f9835c6ed5c"
          }
        },
        {
          "ruleId": "0-0-shadowing-state",
          "message": {
            "text": "Internalizer._balances (contracts/tokens/Fertilizer/Internalizer.sol#37) shadows:\n\t- ERC1155Upgradeable._balances (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#27)\n",
            "markdown": "[Internalizer._balances](contracts/tokens/Fertilizer/Internalizer.sol#L37) shadows:\n\t- [ERC1155Upgradeable._balances](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Internalizer.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ffc8b471838d4e41ba49e65f3e62b8553f31d883d5ab92881ff5fb48ca7626db"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "MockCurveZap.add_liquidity(address,uint256[4],uint256) (contracts/mocks/curve/MockCurveZap.sol#26-32) ignores return value by IERC20(USDC).transferFrom(msg.sender,THREE_POOL,depAmounts[2]) (contracts/mocks/curve/MockCurveZap.sol#28)\n",
            "markdown": "[MockCurveZap.add_liquidity(address,uint256[4],uint256)](contracts/mocks/curve/MockCurveZap.sol#L26-L32) ignores return value by [IERC20(USDC).transferFrom(msg.sender,THREE_POOL,depAmounts[2])](contracts/mocks/curve/MockCurveZap.sol#L28)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveZap.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "147b67c3babc97023589cb2ecbdad4bd673ae0aac754c8cf2a96e08b3f961db2"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "FertilizerPreMint.mint(uint256) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#42-47) ignores return value by IUSDC.transferFrom(msg.sender,CUSTODIAN,amount) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#46)\n",
            "markdown": "[FertilizerPreMint.mint(uint256)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L42-L47) ignores return value by [IUSDC.transferFrom(msg.sender,CUSTODIAN,amount)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L46)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/FertilizerPreMint.sol"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "187610551f95c903c6484d35aa65d781b11bba01dba3130aa36aa00a8190bb72"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "MockCurveZap.add_liquidity(address,uint256[4],uint256) (contracts/mocks/curve/MockCurveZap.sol#26-32) ignores return value by IERC20(BEAN).transferFrom(msg.sender,address(this),depAmounts[0]) (contracts/mocks/curve/MockCurveZap.sol#27)\n",
            "markdown": "[MockCurveZap.add_liquidity(address,uint256[4],uint256)](contracts/mocks/curve/MockCurveZap.sol#L26-L32) ignores return value by [IERC20(BEAN).transferFrom(msg.sender,address(this),depAmounts[0])](contracts/mocks/curve/MockCurveZap.sol#L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveZap.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1d3f78c6a5ca8e5ecca53432ee58655e3affccab27b992742e6e8532d9abce16"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351) ignores return value by ERC20(coins[i_scope_1]).transfer(_receiver,amount) (contracts/mocks/curve/MockMeta3Curve.sol#347)\n",
            "markdown": "[MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L302-L351) ignores return value by [ERC20(coins[i_scope_1]).transfer(_receiver,amount)](contracts/mocks/curve/MockMeta3Curve.sol#L347)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 351
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "37e66fb7ad72569df27fbb78988335d51ba483437465a50e76c4ad6b7e2bcf0c"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "MockMeta3Curve.exchange(int128,int128,uint256,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#171-203) ignores return value by ERC20(coins[j]).transfer(_receiver,dy) (contracts/mocks/curve/MockMeta3Curve.sol#200)\n",
            "markdown": "[MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L171-L203) ignores return value by [ERC20(coins[j]).transfer(_receiver,dy)](contracts/mocks/curve/MockMeta3Curve.sol#L200)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 203
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "44d807b543163fb73786a46a8275aa4d6f10c9483ca500a0daa03c34092d62b9"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193) ignores return value by IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockPlainCurve.sol#185)\n",
            "markdown": "[MockPlainCurve.add_liquidity(uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L137-L193) ignores return value by [IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2)](contracts/mocks/curve/MockPlainCurve.sol#L185)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "68847394272f36afd38fd434aceadea48a25bc5e87b63b3de0a0a3d099877064"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#367-384) ignores return value by IBean(coins[i]).transfer(_receiver,dy) (contracts/mocks/curve/MockMeta3Curve.sol#381)\n",
            "markdown": "[MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L367-L384) ignores return value by [IBean(coins[i]).transfer(_receiver,dy)](contracts/mocks/curve/MockMeta3Curve.sol#L381)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 367,
                  "endLine": 384
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9aae682f4554fa9510d0ebd1175ece1089182194cbe62f93d0b2221e20e8fc2f"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293) ignores return value by ERC20(coins[i]).transfer(_receiver,value) (contracts/mocks/curve/MockMeta3Curve.sol#286)\n",
            "markdown": "[MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)](contracts/mocks/curve/MockMeta3Curve.sol#L273-L293) ignores return value by [ERC20(coins[i]).transfer(_receiver,value)](contracts/mocks/curve/MockMeta3Curve.sol#L286)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 273,
                  "endLine": 293
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a4d2d2b98b63b0bc3baa6368d2de920b33fd98f18fbdb099e5b583e3c22c75fb"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/mocks/curve/MockPlainCurve.sol#201-217) ignores return value by IBean(coins[i]).transfer(msg.sender,dy) (contracts/mocks/curve/MockPlainCurve.sol#214)\n",
            "markdown": "[MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256)](contracts/mocks/curve/MockPlainCurve.sol#L201-L217) ignores return value by [IBean(coins[i]).transfer(msg.sender,dy)](contracts/mocks/curve/MockPlainCurve.sol#L214)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 217
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad7945af5a324ae7249bfc9e557d32e303acba95b5caee485eebf67295fbb469"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264) ignores return value by IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockMeta3Curve.sol#256)\n",
            "markdown": "[MockMeta3Curve.add_liquidity(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L209-L264) ignores return value by [IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2)](contracts/mocks/curve/MockMeta3Curve.sol#L256)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 264
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b043013f5c3fc20df6065f91c801c91063c93dbb6397765a5163a3f892a8ff40"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "FertilizerFacet.addFertilizerOwner(uint128,uint128,uint256) (contracts/beanstalk/barn/FertilizerFacet.sol#61-73) ignores return value by C.usdc().transferFrom(msg.sender,address(this),uint256(amount).mul(1e6)) (contracts/beanstalk/barn/FertilizerFacet.sol#67-71)\n",
            "markdown": "[FertilizerFacet.addFertilizerOwner(uint128,uint128,uint256)](contracts/beanstalk/barn/FertilizerFacet.sol#L61-L73) ignores return value by [C.usdc().transferFrom(msg.sender,address(this),uint256(amount).mul(1e6))](contracts/beanstalk/barn/FertilizerFacet.sol#L67-L71)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/barn/FertilizerFacet.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b3e30f38d7f01d2a8d44a873adf7e776287b376c9a3438f098f1907ad3e81281"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "MockMeta3Curve.exchange(int128,int128,uint256,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#171-203) ignores return value by ERC20(coins[i]).transferFrom(msg.sender,address(this),dx) (contracts/mocks/curve/MockMeta3Curve.sol#199)\n",
            "markdown": "[MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L171-L203) ignores return value by [ERC20(coins[i]).transferFrom(msg.sender,address(this),dx)](contracts/mocks/curve/MockMeta3Curve.sol#L199)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 203
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d051c39f5c608699431d9656c578e25f718b99e3ca2728b0549cdc55eb23dae2"
          }
        },
        {
          "ruleId": "0-0-uninitialized-state",
          "message": {
            "text": "InitBip14.s (contracts/beanstalk/init/InitBip14.sol#17) is never initialized. It is used in:\n\t- InitBip14.init() (contracts/beanstalk/init/InitBip14.sol#22-24)\n",
            "markdown": "[InitBip14.s](contracts/beanstalk/init/InitBip14.sol#L17) is never initialized. It is used in:\n\t- [InitBip14.init()](contracts/beanstalk/init/InitBip14.sol#L22-L24)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip14.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "055745aa6c20af7ac6ac80b703ddb9713feeabfa34fb7d89784f35e44fd3dda3"
          }
        },
        {
          "ruleId": "0-0-uninitialized-state",
          "message": {
            "text": "InitBip1.s (contracts/beanstalk/init/InitBip1.sol#17) is never initialized. It is used in:\n\t- InitBip1.init() (contracts/beanstalk/init/InitBip1.sol#22-25)\n",
            "markdown": "[InitBip1.s](contracts/beanstalk/init/InitBip1.sol#L17) is never initialized. It is used in:\n\t- [InitBip1.init()](contracts/beanstalk/init/InitBip1.sol#L22-L25)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip1.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "97b14be2b3951f010a66443d894f4e80af49308e9e0dce3846b2e3fb0497976c"
          }
        },
        {
          "ruleId": "0-0-uninitialized-storage",
          "message": {
            "text": "LibFunction.useClipboard(bytes,bytes,bytes[]).pasteParams_scope_0 (contracts/libraries/LibFunction.sol#85) is a storage variable never initialized\n",
            "markdown": "[LibFunction.useClipboard(bytes,bytes,bytes[]).pasteParams_scope_0](contracts/libraries/LibFunction.sol#L85) is a storage variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibFunction.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bb31d7b024c49ce578f1e3cf847838b4921f2f4feaf7c3d3e6776958aec9969d"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:\n\t- prod0 = prod0 / twos (contracts/libraries/LibPRBMath.sol#234)\n\t- result = prod0 * inverse (contracts/libraries/LibPRBMath.sol#261)\n",
            "markdown": "[LibPRBMath.mulDiv(uint256,uint256,uint256)](contracts/libraries/LibPRBMath.sol#L185-L263) performs a multiplication on the result of a division:\n\t- [prod0 = prod0 / twos](contracts/libraries/LibPRBMath.sol#L234)\n\t- [result = prod0 * inverse](contracts/libraries/LibPRBMath.sol#L261)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 263
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "063d895eb868f9dc8a66d4d99fed333ace06edfba2bbf168d949e98a34d77b12"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockMeta3Curve.get_D(uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#428-451) performs a multiplication on the result of a division:\n\t- D_P = D_P * D / (xp[_j] * N_COINS) (contracts/mocks/curve/MockMeta3Curve.sol#442)\n\t- D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P) (contracts/mocks/curve/MockMeta3Curve.sol#445)\n",
            "markdown": "[MockMeta3Curve.get_D(uint256[2],uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L428-L451) performs a multiplication on the result of a division:\n\t- [D_P = D_P * D / (xp[_j] * N_COINS)](contracts/mocks/curve/MockMeta3Curve.sol#L442)\n\t- [D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P)](contracts/mocks/curve/MockMeta3Curve.sol#L445)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 428,
                  "endLine": 451
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0eed889b620fe5b8423d01b4304829f30aee036a02741f546425971e9453f14e"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Tick.tickSpacingToMaxLiquidityPerTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#44-49) performs a multiplication on the result of a division:\n\t- minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#45)\n",
            "markdown": "[Tick.tickSpacingToMaxLiquidityPerTick(int24)](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L44-L49) performs a multiplication on the result of a division:\n\t- [minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L45)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0f44bff68a3aa734704947b0b25a7623f37e1c7f2cd52da5b7d2f416bf1b7863"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibCurve.getD(uint256[2],uint256) (contracts/libraries/Curve/LibCurve.sol#83-112) performs a multiplication on the result of a division:\n\t- D_P = (D_P * D) / (xp[_j] * N_COINS) (contracts/libraries/Curve/LibCurve.sol#101)\n\t- D = (((Ann * S) / A_PRECISION + D_P * N_COINS) * D) / (((Ann - A_PRECISION) * D) / A_PRECISION + (N_COINS + 1) * D_P) (contracts/libraries/Curve/LibCurve.sol#104-106)\n",
            "markdown": "[LibCurve.getD(uint256[2],uint256)](contracts/libraries/Curve/LibCurve.sol#L83-L112) performs a multiplication on the result of a division:\n\t- [D_P = (D_P * D) / (xp[_j] * N_COINS)](contracts/libraries/Curve/LibCurve.sol#L101)\n\t- [D = (((Ann * S) / A_PRECISION + D_P * N_COINS) * D) / (((Ann - A_PRECISION) * D) / A_PRECISION + (N_COINS + 1) * D_P)](contracts/libraries/Curve/LibCurve.sol#L104-L106)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 112
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1571d9d5b4bac9af075b2d5cf770fa24e4769d301aeeb360c71e2b8c8b055433"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibBytes64.encode(bytes) (contracts/libraries/LibBytes64.sol#20-90) performs a multiplication on the result of a division:\n\t- result = new string(4 * ((data.length + 2) / 3)) (contracts/libraries/LibBytes64.sol#36)\n",
            "markdown": "[LibBytes64.encode(bytes)](contracts/libraries/LibBytes64.sol#L20-L90) performs a multiplication on the result of a division:\n\t- [result = new string(4 * ((data.length + 2) / 3))](contracts/libraries/LibBytes64.sol#L36)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes64.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1bb080f9e43c158d24b102ca036eaeab33b54d9e8f479f86d4a93b69957b1056"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)\n\t- inverse *= 2 - denominator * inverse (contracts/libraries/LibPRBMath.sol#252)\n",
            "markdown": "[LibPRBMath.mulDiv(uint256,uint256,uint256)](contracts/libraries/LibPRBMath.sol#L185-L263) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](contracts/libraries/LibPRBMath.sol#L231)\n\t- [inverse *= 2 - denominator * inverse](contracts/libraries/LibPRBMath.sol#L252)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 263
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "247fcad41e8e59d6c940a95d821a39be85160de6aa9c6d4a73e26789cfaa3a32"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#91)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t- [inv *= 2 - denominator * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L91)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c5f8fcc832e073304c41112d2cfb16c6cc69229b02f7a21b7a432578c8cef65"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#497-533) performs a multiplication on the result of a division:\n\t- c = c * D / (_x * N_COINS) (contracts/mocks/curve/MockMeta3Curve.sol#519)\n\t- c = c * D * A_PRECISION / (Ann * N_COINS) (contracts/mocks/curve/MockMeta3Curve.sol#522)\n",
            "markdown": "[MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L497-L533) performs a multiplication on the result of a division:\n\t- [c = c * D / (_x * N_COINS)](contracts/mocks/curve/MockMeta3Curve.sol#L519)\n\t- [c = c * D * A_PRECISION / (Ann * N_COINS)](contracts/mocks/curve/MockMeta3Curve.sol#L522)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 497,
                  "endLine": 533
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2e7bcd24b77b86d3249bcc55e08bde23267fc9c8fb36a961ef98e8b47d934761"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#386-416) performs a multiplication on the result of a division:\n\t- base_fee = fee * N_COINS / (4 * (N_COINS - 1)) (contracts/mocks/curve/MockMeta3Curve.sol#400)\n\t- xp_reduced[j] = xp_j - base_fee * dx_expected / FEE_DENOMINATOR (contracts/mocks/curve/MockMeta3Curve.sol#408)\n",
            "markdown": "[MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L386-L416) performs a multiplication on the result of a division:\n\t- [base_fee = fee * N_COINS / (4 * (N_COINS - 1))](contracts/mocks/curve/MockMeta3Curve.sol#L400)\n\t- [xp_reduced[j] = xp_j - base_fee * dx_expected / FEE_DENOMINATOR](contracts/mocks/curve/MockMeta3Curve.sol#L408)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 386,
                  "endLine": 416
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3c89d2dd62f03f4d48a19a62b3d505f0145be6ace3b858c52783e3487906a603"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)\n\t- inverse *= 2 - denominator * inverse (contracts/libraries/LibPRBMath.sol#253)\n",
            "markdown": "[LibPRBMath.mulDiv(uint256,uint256,uint256)](contracts/libraries/LibPRBMath.sol#L185-L263) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](contracts/libraries/LibPRBMath.sol#L231)\n\t- [inverse *= 2 - denominator * inverse](contracts/libraries/LibPRBMath.sol#L253)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 263
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3d27e4e34ce72518cc03810be2c3c63c1770a6c302e9084b1e73fd7d4de0ea0e"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "CurvePrice.getD(uint256[2],uint256) (contracts/ecosystem/price/CurvePrice.sol#64-98) performs a multiplication on the result of a division:\n\t- D_P = D_P * D / (xp[_j] * N_COINS) (contracts/ecosystem/price/CurvePrice.sol#87)\n\t- D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P) (contracts/ecosystem/price/CurvePrice.sol#90)\n",
            "markdown": "[CurvePrice.getD(uint256[2],uint256)](contracts/ecosystem/price/CurvePrice.sol#L64-L98) performs a multiplication on the result of a division:\n\t- [D_P = D_P * D / (xp[_j] * N_COINS)](contracts/ecosystem/price/CurvePrice.sol#L87)\n\t- [D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P)](contracts/ecosystem/price/CurvePrice.sol#L90)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ecosystem/price/CurvePrice.sol"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 98
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4000efe08c593db639dc8f3bdec8a6294214792986ae5b9e2c77a50779f38310"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockSiloFacet.mockUnripeLPDeposit(uint256,uint32,uint256,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#40-56) performs a multiplication on the result of a division:\n\t- bdv = bdv.mul(C.initialRecap()).div(1e18) (contracts/mocks/mockFacets/MockSiloFacet.sol#49)\n\t- stalk = bdv.mul(s.ss[C.UNRIPE_LP].stalkIssuedPerBdv).add(stalkRewardLegacy(seeds,_season() - _s)) (contracts/mocks/mockFacets/MockSiloFacet.sol#52)\n",
            "markdown": "[MockSiloFacet.mockUnripeLPDeposit(uint256,uint32,uint256,uint256)](contracts/mocks/mockFacets/MockSiloFacet.sol#L40-L56) performs a multiplication on the result of a division:\n\t- [bdv = bdv.mul(C.initialRecap()).div(1e18)](contracts/mocks/mockFacets/MockSiloFacet.sol#L49)\n\t- [stalk = bdv.mul(s.ss[C.UNRIPE_LP].stalkIssuedPerBdv).add(stalkRewardLegacy(seeds,_season() - _s))](contracts/mocks/mockFacets/MockSiloFacet.sol#L52)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 56
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4211e0b9c531007ab8db077c97a2aa30b249e2f644ba504d8ae433e1ced8d811"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockSiloFacet.mockUnripeBeanDeposit(uint32,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#58-70) performs a multiplication on the result of a division:\n\t- partialAmount = amount.mul(C.initialRecap()).div(1e18) (contracts/mocks/mockFacets/MockSiloFacet.sol#61)\n\t- seeds = partialAmount.mul(LibLegacyTokenSilo.getSeedsPerToken(C.UNRIPE_BEAN)) (contracts/mocks/mockFacets/MockSiloFacet.sol#64)\n",
            "markdown": "[MockSiloFacet.mockUnripeBeanDeposit(uint32,uint256)](contracts/mocks/mockFacets/MockSiloFacet.sol#L58-L70) performs a multiplication on the result of a division:\n\t- [partialAmount = amount.mul(C.initialRecap()).div(1e18)](contracts/mocks/mockFacets/MockSiloFacet.sol#L61)\n\t- [seeds = partialAmount.mul(LibLegacyTokenSilo.getSeedsPerToken(C.UNRIPE_BEAN))](contracts/mocks/mockFacets/MockSiloFacet.sol#L64)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "43a6936bae9e169b05a5a5ecaad5c61dc897204bb22d70c7db9b478370663c67"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#96)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t- [inv *= 2 - denominator * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L96)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "48f60a4a6208b812e85c950c9911b28f8f98a215046329b6bb01daa40788e2a1"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351) performs a multiplication on the result of a division:\n\t- base_fee = fee * N_COINS / (4 * (N_COINS - 1)) (contracts/mocks/curve/MockMeta3Curve.sol#321)\n\t- fees[i_scope_0] = base_fee * difference / FEE_DENOMINATOR (contracts/mocks/curve/MockMeta3Curve.sol#330)\n",
            "markdown": "[MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L302-L351) performs a multiplication on the result of a division:\n\t- [base_fee = fee * N_COINS / (4 * (N_COINS - 1))](contracts/mocks/curve/MockMeta3Curve.sol#L321)\n\t- [fees[i_scope_0] = base_fee * difference / FEE_DENOMINATOR](contracts/mocks/curve/MockMeta3Curve.sol#L330)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 351
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4d9d96d3105b32f3aa3b30d8a3623d38867a8a9eac25b41a4964f9b0e74fadf0"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234) performs a multiplication on the result of a division:\n\t- newSoil = newSoil.mul(SOIL_COEFFICIENT_HIGH).div(C.PRECISION) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#229)\n\t- newSoil = newSoil.mul(SOIL_COEFFICIENT_LOW).div(C.PRECISION) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#231)\n",
            "markdown": "[Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234) performs a multiplication on the result of a division:\n\t- [newSoil = newSoil.mul(SOIL_COEFFICIENT_HIGH).div(C.PRECISION)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L229)\n\t- [newSoil = newSoil.mul(SOIL_COEFFICIENT_LOW).div(C.PRECISION)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L231)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Sun.sol"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 234
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "506e9dd7614155257212d2d230ab1568940e7440ecdac69282e83d014aa8dfcb"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockSiloFacet.mockUnripeBeanDeposit(uint32,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#58-70) performs a multiplication on the result of a division:\n\t- partialAmount = amount.mul(C.initialRecap()).div(1e18) (contracts/mocks/mockFacets/MockSiloFacet.sol#61)\n\t- stalk = partialAmount.mul(s.ss[C.UNRIPE_BEAN].stalkIssuedPerBdv).add(stalkRewardLegacy(seeds,_season() - _s)) (contracts/mocks/mockFacets/MockSiloFacet.sol#65)\n",
            "markdown": "[MockSiloFacet.mockUnripeBeanDeposit(uint32,uint256)](contracts/mocks/mockFacets/MockSiloFacet.sol#L58-L70) performs a multiplication on the result of a division:\n\t- [partialAmount = amount.mul(C.initialRecap()).div(1e18)](contracts/mocks/mockFacets/MockSiloFacet.sol#L61)\n\t- [stalk = partialAmount.mul(s.ss[C.UNRIPE_BEAN].stalkIssuedPerBdv).add(stalkRewardLegacy(seeds,_season() - _s))](contracts/mocks/mockFacets/MockSiloFacet.sol#L65)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "54367ac5a70addc50573e3d47af2372b09c79f95d35ad36a1d38db6c980e0f57"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)\n\t- inverse *= 2 - denominator * inverse (contracts/libraries/LibPRBMath.sol#255)\n",
            "markdown": "[LibPRBMath.mulDiv(uint256,uint256,uint256)](contracts/libraries/LibPRBMath.sol#L185-L263) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](contracts/libraries/LibPRBMath.sol#L231)\n\t- [inverse *= 2 - denominator * inverse](contracts/libraries/LibPRBMath.sol#L255)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 263
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "55adcd1ac34b6728dccfb285ffbc24e428563e47049e7238066a65c9b155a779"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibCurve.getYD(uint256,uint256,uint256[2],uint256) (contracts/libraries/Curve/LibCurve.sol#114-145) performs a multiplication on the result of a division:\n\t- c = (c * D) / (_x * N_COINS) (contracts/libraries/Curve/LibCurve.sol#131)\n\t- c = (c * D * A_PRECISION) / (Ann * N_COINS) (contracts/libraries/Curve/LibCurve.sol#134)\n",
            "markdown": "[LibCurve.getYD(uint256,uint256,uint256[2],uint256)](contracts/libraries/Curve/LibCurve.sol#L114-L145) performs a multiplication on the result of a division:\n\t- [c = (c * D) / (_x * N_COINS)](contracts/libraries/Curve/LibCurve.sol#L131)\n\t- [c = (c * D * A_PRECISION) / (Ann * N_COINS)](contracts/libraries/Curve/LibCurve.sol#L134)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 145
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "59908312b76bdc4d999b8d509baf7c484a2cc0f54f19832cd1401d1a39af65b1"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "InitDiamond.init() (contracts/beanstalk/init/InitDiamond.sol#31-69) performs a multiplication on the result of a division:\n\t- s.season.start = (block.timestamp / s.season.period) * s.season.period (contracts/beanstalk/init/InitDiamond.sol#59-61)\n",
            "markdown": "[InitDiamond.init()](contracts/beanstalk/init/InitDiamond.sol#L31-L69) performs a multiplication on the result of a division:\n\t- [s.season.start = (block.timestamp / s.season.period) * s.season.period](contracts/beanstalk/init/InitDiamond.sol#L59-L61)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitDiamond.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "62273fd286e4dc87dd18c551b2ea74b27be6f5f4aba38d3efcb0d7e06b82e92e"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#94)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t- [inv *= 2 - denominator * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L94)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "63b404633ce1c458d3ae2c08c448a7886b64aa32a8ad208c606d30db9cf83bd5"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibFertilizer.remainingRecapitalization() (contracts/libraries/LibFertilizer.sol#136-149) performs a multiplication on the result of a division:\n\t- totalDollars = totalDollars / 1e6 * 1e6 (contracts/libraries/LibFertilizer.sol#146)\n",
            "markdown": "[LibFertilizer.remainingRecapitalization()](contracts/libraries/LibFertilizer.sol#L136-L149) performs a multiplication on the result of a division:\n\t- [totalDollars = totalDollars / 1e6 * 1e6](contracts/libraries/LibFertilizer.sol#L146)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibFertilizer.sol"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 149
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "643040d7085cadd78dde7c5ba4d829e6b53ffd4e9a3528f61f60639b6f610a87"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#297-339) performs a multiplication on the result of a division:\n\t- c = c * D / (_x * N_COINS) (contracts/mocks/curve/MockPlainCurve.sol#320)\n\t- c = c * D * A_PRECISION / (Ann * N_COINS) (contracts/mocks/curve/MockPlainCurve.sol#323)\n",
            "markdown": "[MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L297-L339) performs a multiplication on the result of a division:\n\t- [c = c * D / (_x * N_COINS)](contracts/mocks/curve/MockPlainCurve.sol#L320)\n\t- [c = c * D * A_PRECISION / (Ann * N_COINS)](contracts/mocks/curve/MockPlainCurve.sol#L323)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 339
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6a1cc9a69662d2cae25033da436d6a7c45c9a37a81cd86bfcf32a59e379b5969"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)\n\t- inverse = (3 * denominator) ^ 2 (contracts/libraries/LibPRBMath.sol#246)\n",
            "markdown": "[LibPRBMath.mulDiv(uint256,uint256,uint256)](contracts/libraries/LibPRBMath.sol#L185-L263) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](contracts/libraries/LibPRBMath.sol#L231)\n\t- [inverse = (3 * denominator) ^ 2](contracts/libraries/LibPRBMath.sol#L246)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 263
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "70251b591564bf7806270dcb25f27169c0f1ebd1e904aa9d4b62a71eed7c2c34"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193) performs a multiplication on the result of a division:\n\t- base_fee = fee * N_COINS / (4 * (N_COINS - 1)) (contracts/mocks/curve/MockPlainCurve.sol#162)\n\t- fees[i_scope_0] = base_fee * difference / FEE_DENOMINATOR (contracts/mocks/curve/MockPlainCurve.sol#169)\n",
            "markdown": "[MockPlainCurve.add_liquidity(uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L137-L193) performs a multiplication on the result of a division:\n\t- [base_fee = fee * N_COINS / (4 * (N_COINS - 1))](contracts/mocks/curve/MockPlainCurve.sol#L162)\n\t- [fees[i_scope_0] = base_fee * difference / FEE_DENOMINATOR](contracts/mocks/curve/MockPlainCurve.sol#L169)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7871c6dd4b2610a93f1cf131885b8979285b7f996a4aac90b1617cf5038db9d5"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234) performs a multiplication on the result of a division:\n\t- newSoil = newHarvestable.mul(100).div(100 + s.w.t) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#227)\n\t- newSoil = newSoil.mul(SOIL_COEFFICIENT_HIGH).div(C.PRECISION) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#229)\n",
            "markdown": "[Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234) performs a multiplication on the result of a division:\n\t- [newSoil = newHarvestable.mul(100).div(100 + s.w.t)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L227)\n\t- [newSoil = newSoil.mul(SOIL_COEFFICIENT_HIGH).div(C.PRECISION)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L229)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Sun.sol"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 234
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8cde3a6b3e91c542618a0656a8a7c09cf3fb7d35b28f60efced86306614ecefd"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#93)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t- [inv *= 2 - denominator * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L93)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8d6bade5364a717e3d224a099275474fc6585c64ca7606c27f19304ee8334fff"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t- inv = (3 * denominator) ^ 2 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#87)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t- [inv = (3 * denominator) ^ 2](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L87)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8e62030edcacc9f32c786f4abf826cb412b37fc72ccdc131544c89bee98b45d2"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#453-495) performs a multiplication on the result of a division:\n\t- c = c * D / (_x * N_COINS) (contracts/mocks/curve/MockMeta3Curve.sol#476)\n\t- c = c * D * A_PRECISION / (Ann * N_COINS) (contracts/mocks/curve/MockMeta3Curve.sol#479)\n",
            "markdown": "[MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L453-L495) performs a multiplication on the result of a division:\n\t- [c = c * D / (_x * N_COINS)](contracts/mocks/curve/MockMeta3Curve.sol#L476)\n\t- [c = c * D * A_PRECISION / (Ann * N_COINS)](contracts/mocks/curve/MockMeta3Curve.sol#L479)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 453,
                  "endLine": 495
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "904862acf7496a9224ecebc7ae439ca229fc41b5b6f74a98eb00ef504efca518"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockMeta3Curve.exchange(int128,int128,uint256,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#171-203) performs a multiplication on the result of a division:\n\t- dy_admin_fee = dy_fee * ADMIN_FEE / FEE_DENOMINATOR (contracts/mocks/curve/MockMeta3Curve.sol#193)\n\t- dy_admin_fee = dy_admin_fee * PRECISION / rates[j] (contracts/mocks/curve/MockMeta3Curve.sol#194)\n",
            "markdown": "[MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L171-L203) performs a multiplication on the result of a division:\n\t- [dy_admin_fee = dy_fee * ADMIN_FEE / FEE_DENOMINATOR](contracts/mocks/curve/MockMeta3Curve.sol#L193)\n\t- [dy_admin_fee = dy_admin_fee * PRECISION / rates[j]](contracts/mocks/curve/MockMeta3Curve.sol#L194)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 203
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "98c692a295b82c28fcafc271a274cd0573ae089dddf74482a2d82556d11772fb"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibFertilizer.addUnderlying(uint256,uint256) (contracts/libraries/LibFertilizer.sol#69-105) performs a multiplication on the result of a division:\n\t- percentToFill = amount.mul(C.precision()).div(remainingRecapitalization()) (contracts/libraries/LibFertilizer.sol#72-74)\n\t- newDepositedBeans = newDepositedBeans.mul(percentToFill).div(C.precision()) (contracts/libraries/LibFertilizer.sol#80-82)\n",
            "markdown": "[LibFertilizer.addUnderlying(uint256,uint256)](contracts/libraries/LibFertilizer.sol#L69-L105) performs a multiplication on the result of a division:\n\t- [percentToFill = amount.mul(C.precision()).div(remainingRecapitalization())](contracts/libraries/LibFertilizer.sol#L72-L74)\n\t- [newDepositedBeans = newDepositedBeans.mul(percentToFill).div(C.precision())](contracts/libraries/LibFertilizer.sol#L80-L82)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibFertilizer.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "98e405bd7004b5f59e0964dc137b28f9c7c4c6498ec3a47a04a162d6dca3cbcd"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockMeta3Curve.exchange(int128,int128,uint256,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#171-203) performs a multiplication on the result of a division:\n\t- dy_fee = dy * fee / FEE_DENOMINATOR (contracts/mocks/curve/MockMeta3Curve.sol#188)\n\t- dy_admin_fee = dy_fee * ADMIN_FEE / FEE_DENOMINATOR (contracts/mocks/curve/MockMeta3Curve.sol#193)\n",
            "markdown": "[MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L171-L203) performs a multiplication on the result of a division:\n\t- [dy_fee = dy * fee / FEE_DENOMINATOR](contracts/mocks/curve/MockMeta3Curve.sol#L188)\n\t- [dy_admin_fee = dy_fee * ADMIN_FEE / FEE_DENOMINATOR](contracts/mocks/curve/MockMeta3Curve.sol#L193)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 203
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "990e9dae8079fa2efab6f15e933f3b366b7c3766742290e42c2dc86d9d291142"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockPlainCurve.get_D(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#272-295) performs a multiplication on the result of a division:\n\t- D_P = D_P * D / (xp[_j] * N_COINS) (contracts/mocks/curve/MockPlainCurve.sol#286)\n\t- D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P) (contracts/mocks/curve/MockPlainCurve.sol#289)\n",
            "markdown": "[MockPlainCurve.get_D(uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L272-L295) performs a multiplication on the result of a division:\n\t- [D_P = D_P * D / (xp[_j] * N_COINS)](contracts/mocks/curve/MockPlainCurve.sol#L286)\n\t- [D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P)](contracts/mocks/curve/MockPlainCurve.sol#L289)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 272,
                  "endLine": 295
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c944f715d6f4d2baec98b1d9be01a0a575d3ee15f908157b0b5022cb00e989e"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t- prod0 = prod0 / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#72)\n\t- result = prod0 * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#104)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t- [prod0 = prod0 / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L72)\n\t- [result = prod0 * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L104)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9ed2d0146899a147a1d1d178d45affe23e8bfb1dd7ff71b73ff40d6cdf6e83e4"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)\n\t- inverse *= 2 - denominator * inverse (contracts/libraries/LibPRBMath.sol#251)\n",
            "markdown": "[LibPRBMath.mulDiv(uint256,uint256,uint256)](contracts/libraries/LibPRBMath.sol#L185-L263) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](contracts/libraries/LibPRBMath.sol#L231)\n\t- [inverse *= 2 - denominator * inverse](contracts/libraries/LibPRBMath.sol#L251)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 263
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "abd67b8e3784f6d5b2284ff175fa078cfcb77c0c1b4e18fc29119d59debd8782"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#95)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t- [inv *= 2 - denominator * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L95)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "acd9cb37d56b8ec3080e4195f3145c16d813295e9271577e633c783a7e818c7b"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156) performs a multiplication on the result of a division:\n\t- newBpf = maxNewFertilized.div(s.activeFertilizer) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#124)\n\t- newFertilized = newFertilized.add(newBpf.mul(s.activeFertilizer)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#135)\n",
            "markdown": "[Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156) performs a multiplication on the result of a division:\n\t- [newBpf = maxNewFertilized.div(s.activeFertilizer)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L124)\n\t- [newFertilized = newFertilized.add(newBpf.mul(s.activeFertilizer))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L135)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Sun.sol"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aef35fe6d0cc6e1742facdff9f1b33dd544f0e51805fca5bd67d1197a858431f"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "ConvertFacet.enrootDeposits(address,int96[],uint256[]) (contracts/beanstalk/silo/ConvertFacet.sol#184-245) performs a multiplication on the result of a division:\n\t- depositBdv = amounts[i].mul(newTotalBdv).div(ar.tokensRemoved) (contracts/beanstalk/silo/ConvertFacet.sol#214)\n\t- stalkAdded = stalkAdded.add(depositBdv.mul(_stalkPerBdv).add(LibSilo.stalkReward(stems[i],_lastStem,uint128(depositBdv)))) (contracts/beanstalk/silo/ConvertFacet.sol#225-233)\n",
            "markdown": "[ConvertFacet.enrootDeposits(address,int96[],uint256[])](contracts/beanstalk/silo/ConvertFacet.sol#L184-L245) performs a multiplication on the result of a division:\n\t- [depositBdv = amounts[i].mul(newTotalBdv).div(ar.tokensRemoved)](contracts/beanstalk/silo/ConvertFacet.sol#L214)\n\t- [stalkAdded = stalkAdded.add(depositBdv.mul(_stalkPerBdv).add(LibSilo.stalkReward(stems[i],_lastStem,uint128(depositBdv))))](contracts/beanstalk/silo/ConvertFacet.sol#L225-L233)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/ConvertFacet.sol"
                },
                "region": {
                  "startLine": 184,
                  "endLine": 245
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b0f4072c7948d17e5b382b35ef0302d1b832beec048a6df25c51a8873d51f2b5"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockInitDiamond.init() (contracts/mocks/MockInitDiamond.sol#25-61) performs a multiplication on the result of a division:\n\t- s.season.start = (block.timestamp / s.season.period) * s.season.period (contracts/mocks/MockInitDiamond.sol#55-57)\n",
            "markdown": "[MockInitDiamond.init()](contracts/mocks/MockInitDiamond.sol#L25-L61) performs a multiplication on the result of a division:\n\t- [s.season.start = (block.timestamp / s.season.period) * s.season.period](contracts/mocks/MockInitDiamond.sol#L55-L57)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockInitDiamond.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b5044fb8dcb6ca14aa3239b7f8311abfcda91197ad79162d673013429c89dbaa"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#92)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t- [inv *= 2 - denominator * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L92)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bd7ac2f58fd7224b9165773ca52648778cf99ca590f725d7c4f24b7505c150a6"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibIncentive.determineReward(uint256,uint256[2],uint256) (contracts/libraries/LibIncentive.sol#65-116) performs a multiplication on the result of a division:\n\t- ethBeanPrice = (ethUsdcPrice.mul(1e6)).div(beanUsdPrice) (contracts/libraries/LibIncentive.sol#91)\n\t- sunriseReward = Math.min(BASE_REWARD + gasCostWei.mul(ethBeanPrice).div(1e18),MAX_REWARD) (contracts/libraries/LibIncentive.sol#107-110)\n",
            "markdown": "[LibIncentive.determineReward(uint256,uint256[2],uint256)](contracts/libraries/LibIncentive.sol#L65-L116) performs a multiplication on the result of a division:\n\t- [ethBeanPrice = (ethUsdcPrice.mul(1e6)).div(beanUsdPrice)](contracts/libraries/LibIncentive.sol#L91)\n\t- [sunriseReward = Math.min(BASE_REWARD + gasCostWei.mul(ethBeanPrice).div(1e18),MAX_REWARD)](contracts/libraries/LibIncentive.sol#L107-L110)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibIncentive.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 116
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bfe56266a6e4a5dc9f96f177f928d90a4a9c34dc47d65721a64f798fe6a0d058"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockPlainCurve.sol#219-249) performs a multiplication on the result of a division:\n\t- base_fee = fee * N_COINS / (4 * (N_COINS - 1)) (contracts/mocks/curve/MockPlainCurve.sol#233)\n\t- xp_reduced[j] = xp_j - base_fee * dx_expected / FEE_DENOMINATOR (contracts/mocks/curve/MockPlainCurve.sol#241)\n",
            "markdown": "[MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2])](contracts/mocks/curve/MockPlainCurve.sol#L219-L249) performs a multiplication on the result of a division:\n\t- [base_fee = fee * N_COINS / (4 * (N_COINS - 1))](contracts/mocks/curve/MockPlainCurve.sol#L233)\n\t- [xp_reduced[j] = xp_j - base_fee * dx_expected / FEE_DENOMINATOR](contracts/mocks/curve/MockPlainCurve.sol#L241)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 249
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c38df805186de29bb3135625a14f2b00912ea84730c8b670a6b2ce9cca1e0a89"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibCurve.getY(uint256,uint256[2],uint256,uint256) (contracts/libraries/Curve/LibCurve.sol#49-81) performs a multiplication on the result of a division:\n\t- c = (c * D) / (_x * N_COINS) (contracts/libraries/Curve/LibCurve.sol#67)\n\t- c = (c * D * A_PRECISION) / (Ann * N_COINS) (contracts/libraries/Curve/LibCurve.sol#70)\n",
            "markdown": "[LibCurve.getY(uint256,uint256[2],uint256,uint256)](contracts/libraries/Curve/LibCurve.sol#L49-L81) performs a multiplication on the result of a division:\n\t- [c = (c * D) / (_x * N_COINS)](contracts/libraries/Curve/LibCurve.sol#L67)\n\t- [c = (c * D * A_PRECISION) / (Ann * N_COINS)](contracts/libraries/Curve/LibCurve.sol#L70)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 81
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c5f2d2a7aafd56f644f8c1b9426cddf6db7fe18d9cf5efa84b2d001bbd694046"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Oracle.observeSingle(Oracle.Observation[65535],uint32,uint32,int24,uint16,uint128,uint16) (node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#245-287) performs a multiplication on the result of a division:\n\t- (beforeOrAt.tickCumulative + ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / observationTimeDelta) * targetDelta,beforeOrAt.secondsPerLiquidityCumulativeX128 + uint160((uint256(atOrAfter.secondsPerLiquidityCumulativeX128 - beforeOrAt.secondsPerLiquidityCumulativeX128) * targetDelta) / observationTimeDelta)) (node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#275-285)\n",
            "markdown": "[Oracle.observeSingle(Oracle.Observation[65535],uint32,uint32,int24,uint16,uint128,uint16)](node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#L245-L287) performs a multiplication on the result of a division:\n\t- [(beforeOrAt.tickCumulative + ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / observationTimeDelta) * targetDelta,beforeOrAt.secondsPerLiquidityCumulativeX128 + uint160((uint256(atOrAfter.secondsPerLiquidityCumulativeX128 - beforeOrAt.secondsPerLiquidityCumulativeX128) * targetDelta) / observationTimeDelta))](node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#L275-L285)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol"
                },
                "region": {
                  "startLine": 245,
                  "endLine": 287
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c757290ccd72dcd30a9a48a8bf27281b8bfacc8b35ce39f0bd2226da3f09ded9"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Tick.tickSpacingToMaxLiquidityPerTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#44-49) performs a multiplication on the result of a division:\n\t- maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#46)\n",
            "markdown": "[Tick.tickSpacingToMaxLiquidityPerTick(int24)](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L44-L49) performs a multiplication on the result of a division:\n\t- [maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L46)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c87bca8ac3dc1d6b5f990a53d21e5b7088e78e57a99a70889fa9d012cf7389fa"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)\n\t- inverse *= 2 - denominator * inverse (contracts/libraries/LibPRBMath.sol#254)\n",
            "markdown": "[LibPRBMath.mulDiv(uint256,uint256,uint256)](contracts/libraries/LibPRBMath.sol#L185-L263) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](contracts/libraries/LibPRBMath.sol#L231)\n\t- [inverse *= 2 - denominator * inverse](contracts/libraries/LibPRBMath.sol#L254)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 263
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d5011b0e428c29be4051c06a2656dc9e450c68b1f32aca75097b91d09b53112d"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockSiloFacet.mockUnripeLPDeposit(uint256,uint32,uint256,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#40-56) performs a multiplication on the result of a division:\n\t- bdv = bdv.mul(C.initialRecap()).div(1e18) (contracts/mocks/mockFacets/MockSiloFacet.sol#49)\n\t- seeds = bdv.mul(LibLegacyTokenSilo.getSeedsPerToken(C.UNRIPE_LP)) (contracts/mocks/mockFacets/MockSiloFacet.sol#51)\n",
            "markdown": "[MockSiloFacet.mockUnripeLPDeposit(uint256,uint32,uint256,uint256)](contracts/mocks/mockFacets/MockSiloFacet.sol#L40-L56) performs a multiplication on the result of a division:\n\t- [bdv = bdv.mul(C.initialRecap()).div(1e18)](contracts/mocks/mockFacets/MockSiloFacet.sol#L49)\n\t- [seeds = bdv.mul(LibLegacyTokenSilo.getSeedsPerToken(C.UNRIPE_LP))](contracts/mocks/mockFacets/MockSiloFacet.sol#L51)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 56
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "da05a77b7b354b0d908d2170d96f20a32c710fe7e56395d7d82e00973faec54b"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264) performs a multiplication on the result of a division:\n\t- base_fee = fee * N_COINS / (4 * (N_COINS - 1)) (contracts/mocks/curve/MockMeta3Curve.sol#233)\n\t- fees[i_scope_0] = base_fee * difference / FEE_DENOMINATOR (contracts/mocks/curve/MockMeta3Curve.sol#240)\n",
            "markdown": "[MockMeta3Curve.add_liquidity(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L209-L264) performs a multiplication on the result of a division:\n\t- [base_fee = fee * N_COINS / (4 * (N_COINS - 1))](contracts/mocks/curve/MockMeta3Curve.sol#L233)\n\t- [fees[i_scope_0] = base_fee * difference / FEE_DENOMINATOR](contracts/mocks/curve/MockMeta3Curve.sol#L240)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 264
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e25d20b5e29826ae52fe9054828e323483125b00508e62dcae378bd9d2df36f4"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156) performs a multiplication on the result of a division:\n\t- newBpf = maxNewFertilized.div(s.activeFertilizer) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#124)\n\t- newFertilized = newFertilized.add(newBpf.mul(s.activeFertilizer)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#154)\n",
            "markdown": "[Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156) performs a multiplication on the result of a division:\n\t- [newBpf = maxNewFertilized.div(s.activeFertilizer)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L124)\n\t- [newFertilized = newFertilized.add(newBpf.mul(s.activeFertilizer))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L154)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Sun.sol"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e7c08846a1dbfee163f9b9b51d1f69522d97138147f0d022545f7e2b8139ac63"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)\n\t- inverse *= 2 - denominator * inverse (contracts/libraries/LibPRBMath.sol#250)\n",
            "markdown": "[LibPRBMath.mulDiv(uint256,uint256,uint256)](contracts/libraries/LibPRBMath.sol#L185-L263) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](contracts/libraries/LibPRBMath.sol#L231)\n\t- [inverse *= 2 - denominator * inverse](contracts/libraries/LibPRBMath.sol#L250)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 263
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f8ed101965672fd7040f4fe685757a764be1f34609b26b4f06cc3094fc39224e"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797) uses a dangerous strict equality:\n\t- state.sqrtPriceX96 == step.sqrtPriceNextX96 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#702)\n",
            "markdown": "[MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L605-L797) uses a dangerous strict equality:\n\t- [state.sqrtPriceX96 == step.sqrtPriceNextX96](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L702)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 605,
                  "endLine": 797
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "23b869e432f79b06e7e0be32f0ebd0af7b3a588f5448f8547cf2b77de6e8c5c4"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:\n\t- delta == 19 (contracts/libraries/LibDibbler.sol#250)\n",
            "markdown": "[LibDibbler.morningTemperature()](contracts/libraries/LibDibbler.sol#L155-L272) uses a dangerous strict equality:\n\t- [delta == 19](contracts/libraries/LibDibbler.sol#L250)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 272
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4ad3e2df833d4a58726879280e3ad9e06088903df56c835a690c3a723118c54d"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:\n\t- delta == 2 (contracts/libraries/LibDibbler.sol#178)\n",
            "markdown": "[LibDibbler.morningTemperature()](contracts/libraries/LibDibbler.sol#L155-L272) uses a dangerous strict equality:\n\t- [delta == 2](contracts/libraries/LibDibbler.sol#L178)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 272
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "547c4e99f22797c0899bf7f0f97b56876915b0e53b3e00d64d7d3dfccd5b6dc2"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:\n\t- delta == 4 (contracts/libraries/LibDibbler.sol#186)\n",
            "markdown": "[LibDibbler.morningTemperature()](contracts/libraries/LibDibbler.sol#L155-L272) uses a dangerous strict equality:\n\t- [delta == 4](contracts/libraries/LibDibbler.sol#L186)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 272
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c6b48d7198a13f8bbcef156029a24352fad8e171cf39d1ccd1cdd80a6bd90f0"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "MockUniswapV3Pool.initialize(uint160) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#280-298) uses a dangerous strict equality:\n\t- require(bool,string)(slot0.sqrtPriceX96 == 0,AI) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#281)\n",
            "markdown": "[MockUniswapV3Pool.initialize(uint160)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L280-L298) uses a dangerous strict equality:\n\t- [require(bool,string)(slot0.sqrtPriceX96 == 0,AI)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L281)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 298
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a22aff1d91e841ca78043ee6c7dc371245bd96a606ccefe6af7f183e82105e64"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:\n\t- delta == 10 (contracts/libraries/LibDibbler.sol#211)\n",
            "markdown": "[LibDibbler.morningTemperature()](contracts/libraries/LibDibbler.sol#L155-L272) uses a dangerous strict equality:\n\t- [delta == 10](contracts/libraries/LibDibbler.sol#L211)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 272
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a49105844c7351910567f2a672052acc80bedeb48fabde0f059d3c0d0d16a540"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:\n\t- delta == 16 (contracts/libraries/LibDibbler.sol#237)\n",
            "markdown": "[LibDibbler.morningTemperature()](contracts/libraries/LibDibbler.sol#L155-L272) uses a dangerous strict equality:\n\t- [delta == 16](contracts/libraries/LibDibbler.sol#L237)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 272
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a8a073c5d43ae45ad8154bdfeffeb9230fe1c4003e2df18a487047cee1a05729"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:\n\t- delta == 7 (contracts/libraries/LibDibbler.sol#199)\n",
            "markdown": "[LibDibbler.morningTemperature()](contracts/libraries/LibDibbler.sol#L155-L272) uses a dangerous strict equality:\n\t- [delta == 7](contracts/libraries/LibDibbler.sol#L199)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 272
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad000d7be3b86c21fc57d98ff772991f2ea34ffa9eeebcadb63a15677c2c03da"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:\n\t- delta == 13 (contracts/libraries/LibDibbler.sol#225)\n",
            "markdown": "[LibDibbler.morningTemperature()](contracts/libraries/LibDibbler.sol#L155-L272) uses a dangerous strict equality:\n\t- [delta == 13](contracts/libraries/LibDibbler.sol#L225)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 272
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bd9867b03079339b09d122666a5366dc645babac3b4f4810919cb8a25db8c711"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:\n\t- delta == 22 (contracts/libraries/LibDibbler.sol#262)\n",
            "markdown": "[LibDibbler.morningTemperature()](contracts/libraries/LibDibbler.sol#L155-L272) uses a dangerous strict equality:\n\t- [delta == 22](contracts/libraries/LibDibbler.sol#L262)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 272
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cceca8cbd2f6918ca654357be14c710b1b033f7359f28bf642deb128f7fdb8a4"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "LibTransfer.sendToken(IERC20,uint256,address,LibTransfer.To) (contracts/libraries/Token/LibTransfer.sol#73-83) uses a dangerous strict equality:\n\t- amount == 0 (contracts/libraries/Token/LibTransfer.sol#79)\n",
            "markdown": "[LibTransfer.sendToken(IERC20,uint256,address,LibTransfer.To)](contracts/libraries/Token/LibTransfer.sol#L73-L83) uses a dangerous strict equality:\n\t- [amount == 0](contracts/libraries/Token/LibTransfer.sol#L79)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibTransfer.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f0f48e869934a1ece6534a958f7db5ed60b8b7c20b386ec1e80170c198436197"
          }
        },
        {
          "ruleId": "1-0-locked-ether",
          "message": {
            "text": "Contract locking ether found:\n\tContract WhitelistFacet (contracts/beanstalk/silo/WhitelistFacet.sol#16-62) has payable functions:\n\t - WhitelistFacet.dewhitelistToken(address) (contracts/beanstalk/silo/WhitelistFacet.sol#32-35)\n\t - WhitelistFacet.whitelistToken(address,bytes4,uint32,uint32) (contracts/beanstalk/silo/WhitelistFacet.sol#37-50)\n\t - WhitelistFacet.updateStalkPerBdvPerSeasonForToken(address,uint32) (contracts/beanstalk/silo/WhitelistFacet.sol#52-61)\n\tBut does not have a function to withdraw the ether\n",
            "markdown": "Contract locking ether found:\n\tContract [WhitelistFacet](contracts/beanstalk/silo/WhitelistFacet.sol#L16-L62) has payable functions:\n\t - [WhitelistFacet.dewhitelistToken(address)](contracts/beanstalk/silo/WhitelistFacet.sol#L32-L35)\n\t - [WhitelistFacet.whitelistToken(address,bytes4,uint32,uint32)](contracts/beanstalk/silo/WhitelistFacet.sol#L37-L50)\n\t - [WhitelistFacet.updateStalkPerBdvPerSeasonForToken(address,uint32)](contracts/beanstalk/silo/WhitelistFacet.sol#L52-L61)\n\tBut does not have a function to withdraw the ether\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/WhitelistFacet.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "009d1bd08d8e7aea1e160e81f56dee89168cdcdfc3b619ac5f989f1865da8836"
          }
        },
        {
          "ruleId": "1-0-locked-ether",
          "message": {
            "text": "Contract locking ether found:\n\tContract ApprovalFacet (contracts/beanstalk/silo/ApprovalFacet.sol#23-202) has payable functions:\n\t - ApprovalFacet.approveDeposit(address,address,uint256) (contracts/beanstalk/silo/ApprovalFacet.sol#46-54)\n\t - ApprovalFacet.permitDeposits(address,address,address[],uint256[],uint256,uint8,bytes32,bytes32) (contracts/beanstalk/silo/ApprovalFacet.sol#115-129)\n\t - ApprovalFacet.permitDeposit(address,address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/beanstalk/silo/ApprovalFacet.sol#143-155)\n\tBut does not have a function to withdraw the ether\n",
            "markdown": "Contract locking ether found:\n\tContract [ApprovalFacet](contracts/beanstalk/silo/ApprovalFacet.sol#L23-L202) has payable functions:\n\t - [ApprovalFacet.approveDeposit(address,address,uint256)](contracts/beanstalk/silo/ApprovalFacet.sol#L46-L54)\n\t - [ApprovalFacet.permitDeposits(address,address,address[],uint256[],uint256,uint8,bytes32,bytes32)](contracts/beanstalk/silo/ApprovalFacet.sol#L115-L129)\n\t - [ApprovalFacet.permitDeposit(address,address,address,uint256,uint256,uint8,bytes32,bytes32)](contracts/beanstalk/silo/ApprovalFacet.sol#L143-L155)\n\tBut does not have a function to withdraw the ether\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/ApprovalFacet.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 202
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1d48a4e1584cb9fad91cf04a72fb80150827ba64443891645751b69d786d7e5b"
          }
        },
        {
          "ruleId": "1-0-locked-ether",
          "message": {
            "text": "Contract locking ether found:\n\tContract MockConvertFacet (contracts/mocks/mockFacets/MockConvertFacet.sol#14-40) has payable functions:\n\t - ConvertFacet.convert(bytes,int96[],uint256[]) (contracts/beanstalk/silo/ConvertFacet.sol#74-105)\n\t - ConvertFacet.enrootDeposit(address,int96,uint256) (contracts/beanstalk/silo/ConvertFacet.sol#125-164)\n\t - ConvertFacet.enrootDeposits(address,int96[],uint256[]) (contracts/beanstalk/silo/ConvertFacet.sol#184-245)\n\tBut does not have a function to withdraw the ether\n",
            "markdown": "Contract locking ether found:\n\tContract [MockConvertFacet](contracts/mocks/mockFacets/MockConvertFacet.sol#L14-L40) has payable functions:\n\t - [ConvertFacet.convert(bytes,int96[],uint256[])](contracts/beanstalk/silo/ConvertFacet.sol#L74-L105)\n\t - [ConvertFacet.enrootDeposit(address,int96,uint256)](contracts/beanstalk/silo/ConvertFacet.sol#L125-L164)\n\t - [ConvertFacet.enrootDeposits(address,int96[],uint256[])](contracts/beanstalk/silo/ConvertFacet.sol#L184-L245)\n\tBut does not have a function to withdraw the ether\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockConvertFacet.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3e08eea03327e1f379bde28355c5d4a1d268b89290233733d8c84e4f371eaf87"
          }
        },
        {
          "ruleId": "1-0-locked-ether",
          "message": {
            "text": "Contract locking ether found:\n\tContract MigrationFacet (contracts/beanstalk/silo/MigrationFacet.sol#22-113) has payable functions:\n\t - MigrationFacet.mowAndMigrate(address,address[],uint32[][],uint256[][],uint256,uint256,bytes32[]) (contracts/beanstalk/silo/MigrationFacet.sol#41-53)\n\t - MigrationFacet.mowAndMigrateNoDeposits(address) (contracts/beanstalk/silo/MigrationFacet.sol#63-65)\n\tBut does not have a function to withdraw the ether\n",
            "markdown": "Contract locking ether found:\n\tContract [MigrationFacet](contracts/beanstalk/silo/MigrationFacet.sol#L22-L113) has payable functions:\n\t - [MigrationFacet.mowAndMigrate(address,address[],uint32[][],uint256[][],uint256,uint256,bytes32[])](contracts/beanstalk/silo/MigrationFacet.sol#L41-L53)\n\t - [MigrationFacet.mowAndMigrateNoDeposits(address)](contracts/beanstalk/silo/MigrationFacet.sol#L63-L65)\n\tBut does not have a function to withdraw the ether\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/MigrationFacet.sol"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 113
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6b4e4e1c27ae303e228bc297525f2eb94dbc9fcd117b73af110bb201feb17aca"
          }
        },
        {
          "ruleId": "1-0-locked-ether",
          "message": {
            "text": "Contract locking ether found:\n\tContract PauseFacet (contracts/beanstalk/diamond/PauseFacet.sol#16-46) has payable functions:\n\t - PauseFacet.pause() (contracts/beanstalk/diamond/PauseFacet.sol#28-35)\n\t - PauseFacet.unpause() (contracts/beanstalk/diamond/PauseFacet.sol#37-45)\n\tBut does not have a function to withdraw the ether\n",
            "markdown": "Contract locking ether found:\n\tContract [PauseFacet](contracts/beanstalk/diamond/PauseFacet.sol#L16-L46) has payable functions:\n\t - [PauseFacet.pause()](contracts/beanstalk/diamond/PauseFacet.sol#L28-L35)\n\t - [PauseFacet.unpause()](contracts/beanstalk/diamond/PauseFacet.sol#L37-L45)\n\tBut does not have a function to withdraw the ether\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/PauseFacet.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e8b2059cc8f4dbb6dd1112c6d3d86653d00f50226f44498f199830f50af148b7"
          }
        },
        {
          "ruleId": "1-0-mapping-deletion",
          "message": {
            "text": "MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190) deletes Storage.Governance (contracts/beanstalk/AppStorage.sol#227-233) which contains a mapping:\n\t-delete s.g (contracts/mocks/mockFacets/MockSeasonFacet.sol#178)\n",
            "markdown": "[MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190) deletes [Storage.Governance](contracts/beanstalk/AppStorage.sol#L227-L233) which contains a mapping:\n\t-[delete s.g](contracts/mocks/mockFacets/MockSeasonFacet.sol#L178)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 190
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a92ecfee4fe9766e11cfd18f9aa033bdaba97829bca55f738b1c3c7aaac9a645"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in Order._cancelPodOrderV2(uint256,uint256,bytes,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#163-175):\n\tExternal calls:\n\t- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#171)\n\tState variables written after the call(s):\n\t- delete s.podOrders[id] (contracts/beanstalk/market/MarketplaceFacet/Order.sol#172)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)\n",
            "markdown": "Reentrancy in [Order._cancelPodOrderV2(uint256,uint256,bytes,LibTransfer.To)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L163-L175):\n\tExternal calls:\n\t- [LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L171)\n\tState variables written after the call(s):\n\t- [delete s.podOrders[id]](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L172)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [PodTransfer.allowancePods(address,address)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L41-L47)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 175
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "10d2a813e0d726324d7e7ae2eae6124a62b49d3109a026853ab51b8b5b37035d"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in Fertilizer.beanstalkMint(address,uint256,uint128,uint128) (contracts/tokens/Fertilizer/Fertilizer.sol#36-49):\n\tExternal calls:\n\t- _update(account,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#40)\n\t\t- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)\n\tState variables written after the call(s):\n\t- _balances[id][account].lastBpf = bpf (contracts/tokens/Fertilizer/Fertilizer.sol#42)\n\tInternalizer._balances (contracts/tokens/Fertilizer/Internalizer.sol#37) can be used in cross function reentrancies:\n\t- Fertilizer.__update(address,uint256[],uint256) (contracts/tokens/Fertilizer/Fertilizer.sol#73-87)\n\t- Internalizer._transfer(address,address,uint256,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#74-88)\n\t- Internalizer.balanceOf(address,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#57-60)\n\t- Fertilizer.balanceOfFertilized(address,uint256[]) (contracts/tokens/Fertilizer/Fertilizer.sol#89-96)\n\t- Fertilizer.balanceOfUnfertilized(address,uint256[]) (contracts/tokens/Fertilizer/Fertilizer.sol#98-103)\n\t- Fertilizer.beanstalkMint(address,uint256,uint128,uint128) (contracts/tokens/Fertilizer/Fertilizer.sol#36-49)\n\t- Internalizer.lastBalanceOf(address,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#62-65)\n",
            "markdown": "Reentrancy in [Fertilizer.beanstalkMint(address,uint256,uint128,uint128)](contracts/tokens/Fertilizer/Fertilizer.sol#L36-L49):\n\tExternal calls:\n\t- [_update(account,ids,bpf)](contracts/tokens/Fertilizer/Fertilizer.sol#L40)\n\t\t- [IBS(owner()).payFertilizer(account,amount)](contracts/tokens/Fertilizer/Fertilizer.sol#L70)\n\tState variables written after the call(s):\n\t- [_balances[id][account].lastBpf = bpf](contracts/tokens/Fertilizer/Fertilizer.sol#L42)\n\t[Internalizer._balances](contracts/tokens/Fertilizer/Internalizer.sol#L37) can be used in cross function reentrancies:\n\t- [Fertilizer.__update(address,uint256[],uint256)](contracts/tokens/Fertilizer/Fertilizer.sol#L73-L87)\n\t- [Internalizer._transfer(address,address,uint256,uint256)](contracts/tokens/Fertilizer/Internalizer.sol#L74-L88)\n\t- [Internalizer.balanceOf(address,uint256)](contracts/tokens/Fertilizer/Internalizer.sol#L57-L60)\n\t- [Fertilizer.balanceOfFertilized(address,uint256[])](contracts/tokens/Fertilizer/Fertilizer.sol#L89-L96)\n\t- [Fertilizer.balanceOfUnfertilized(address,uint256[])](contracts/tokens/Fertilizer/Fertilizer.sol#L98-L103)\n\t- [Fertilizer.beanstalkMint(address,uint256,uint128,uint128)](contracts/tokens/Fertilizer/Fertilizer.sol#L36-L49)\n\t- [Internalizer.lastBalanceOf(address,uint256)](contracts/tokens/Fertilizer/Internalizer.sol#L62-L65)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "114565d61b5a56593b63a8d984075dcb1ff1063a565ed95d0c24b4323e64b856"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in MockAdminFacet.fertilizerSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#50-55):\n\tExternal calls:\n\t- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#53)\n\tState variables written after the call(s):\n\t- rewardToFertilizer(amount * 3) (contracts/mocks/mockFacets/MockAdminFacet.sol#54)\n\t\t- s.bpf = uint128(firstEndBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#139)\n\t\t- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#140)\n\t\t- s.bpf = uint128(newTotalBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#153)\n\t\t- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#155)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- MockAdminFacet.fertilizerSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#50-55)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- MockAdminFacet.rewardSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#43-48)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- MockAdminFacet.updateStart() (contracts/mocks/mockFacets/MockAdminFacet.sol#57-61)\n",
            "markdown": "Reentrancy in [MockAdminFacet.fertilizerSunrise(uint256)](contracts/mocks/mockFacets/MockAdminFacet.sol#L50-L55):\n\tExternal calls:\n\t- [C.bean().mint(address(this),amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L53)\n\tState variables written after the call(s):\n\t- [rewardToFertilizer(amount * 3)](contracts/mocks/mockFacets/MockAdminFacet.sol#L54)\n\t\t- [s.bpf = uint128(firstEndBpf)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L139)\n\t\t- [s.fertilizedIndex = s.fertilizedIndex.add(newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L140)\n\t\t- [s.bpf = uint128(newTotalBpf)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L153)\n\t\t- [s.fertilizedIndex = s.fertilizedIndex.add(newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L155)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [MockAdminFacet.fertilizerSunrise(uint256)](contracts/mocks/mockFacets/MockAdminFacet.sol#L50-L55)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [MockAdminFacet.rewardSunrise(uint256)](contracts/mocks/mockFacets/MockAdminFacet.sol#L43-L48)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [MockAdminFacet.updateStart()](contracts/mocks/mockFacets/MockAdminFacet.sol#L57-L61)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockAdminFacet.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "123380759fe9378f46e373450c18f2df7860fafe133b8e5a038ac04ee35b87c8"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in MockAdminFacet.rewardSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#43-48):\n\tExternal calls:\n\t- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#46)\n\t- rewardBeans(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#47)\n\t\t- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)\n\tState variables written after the call(s):\n\t- rewardBeans(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#47)\n\t\t- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)\n\t\t- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)\n\t\t- s.f.harvestable = s.f.harvestable.add(newHarvestable) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#171)\n\t\t- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)\n\t\t- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)\n\t\t- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)\n\t\t- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)\n\t\t- s.bpf = uint128(firstEndBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#139)\n\t\t- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#140)\n\t\t- s.bpf = uint128(newTotalBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#153)\n\t\t- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#155)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- MockAdminFacet.fertilizerSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#50-55)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- MockAdminFacet.rewardSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#43-48)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- MockAdminFacet.updateStart() (contracts/mocks/mockFacets/MockAdminFacet.sol#57-61)\n",
            "markdown": "Reentrancy in [MockAdminFacet.rewardSunrise(uint256)](contracts/mocks/mockFacets/MockAdminFacet.sol#L43-L48):\n\tExternal calls:\n\t- [C.bean().mint(address(this),amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L46)\n\t- [rewardBeans(amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L47)\n\t\t- [C.bean().mint(address(this),newSupply)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L93)\n\tState variables written after the call(s):\n\t- [rewardBeans(amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L47)\n\t\t- [s.earnedBeans = s.earnedBeans.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L185)\n\t\t- [s.s.stalk = s.s.stalk.add(seasonStalk)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L194)\n\t\t- [s.f.harvestable = s.f.harvestable.add(newHarvestable)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L171)\n\t\t- [s.newEarnedStalk = seasonStalk.toUint128()](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L199)\n\t\t- [s.vestingPeriodRoots = 0](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L200)\n\t\t- [s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L203-L206)\n\t\t- [s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L208-L211)\n\t\t- [s.bpf = uint128(firstEndBpf)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L139)\n\t\t- [s.fertilizedIndex = s.fertilizedIndex.add(newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L140)\n\t\t- [s.bpf = uint128(newTotalBpf)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L153)\n\t\t- [s.fertilizedIndex = s.fertilizedIndex.add(newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L155)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [MockAdminFacet.fertilizerSunrise(uint256)](contracts/mocks/mockFacets/MockAdminFacet.sol#L50-L55)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [MockAdminFacet.rewardSunrise(uint256)](contracts/mocks/mockFacets/MockAdminFacet.sol#L43-L48)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [MockAdminFacet.updateStart()](contracts/mocks/mockFacets/MockAdminFacet.sol#L57-L61)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockAdminFacet.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1eb3143116e91c7c0eae7fb478f87e0da09bab51a5db894404c9f3f83c96096b"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in Order._fillPodOrder(Order.PodOrder,uint256,uint256,uint256,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#92-117):\n\tExternal calls:\n\t- LibTransfer.sendToken(C.bean(),costInBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#108)\n\tState variables written after the call(s):\n\t- _cancelPodListing(msg.sender,index) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#110)\n\t\t- delete s.podListings[index] (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#242)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)\n\t- _transferPlot(msg.sender,o.account,index,start,amount) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#112)\n\t\t- s.a[account].field.plots[id] = amount (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#71)\n\t\t- delete s.a[account].field.plots[id] (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#81)\n\t\t- s.a[account].field.plots[id] = start (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#82)\n\t\t- s.a[account].field.plots[id.add(end)] = amount.sub(end) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#84)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)\n\t- delete s.podOrders[id] (contracts/beanstalk/market/MarketplaceFacet/Order.sol#114)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)\n",
            "markdown": "Reentrancy in [Order._fillPodOrder(Order.PodOrder,uint256,uint256,uint256,LibTransfer.To)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L92-L117):\n\tExternal calls:\n\t- [LibTransfer.sendToken(C.bean(),costInBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L108)\n\tState variables written after the call(s):\n\t- [_cancelPodListing(msg.sender,index)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L110)\n\t\t- [delete s.podListings[index]](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L242)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [PodTransfer.allowancePods(address,address)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L41-L47)\n\t- [_transferPlot(msg.sender,o.account,index,start,amount)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L112)\n\t\t- [s.a[account].field.plots[id] = amount](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L71)\n\t\t- [delete s.a[account].field.plots[id]](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L81)\n\t\t- [s.a[account].field.plots[id] = start](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L82)\n\t\t- [s.a[account].field.plots[id.add(end)] = amount.sub(end)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L84)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [PodTransfer.allowancePods(address,address)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L41-L47)\n\t- [delete s.podOrders[id]](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L114)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [PodTransfer.allowancePods(address,address)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L41-L47)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "39ad89fc30f8d1cd242d4ab1556bd4232e9b3a2c5f0aff9afc0a42d764020b96"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in FundraiserFacet.fund(uint32,uint256,LibTransfer.From) (contracts/beanstalk/field/FundraiserFacet.sol#104-145):\n\tExternal calls:\n\t- amount = LibTransfer.receiveToken(IERC20(s.fundraisers[id].token),amount,msg.sender,mode) (contracts/beanstalk/field/FundraiserFacet.sol#118-123)\n\tState variables written after the call(s):\n\t- s.fundraisers[id].remaining = remaining - amount (contracts/beanstalk/field/FundraiserFacet.sol#124)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- FundraiserFacet.createFundraiser(address,address,uint256) (contracts/beanstalk/field/FundraiserFacet.sol#66-94)\n\t- FundraiserFacet.fundingToken(uint32) (contracts/beanstalk/field/FundraiserFacet.sol#176-178)\n\t- FundraiserFacet.fundraiser(uint32) (contracts/beanstalk/field/FundraiserFacet.sol#180-186)\n\t- FundraiserFacet.numberOfFundraisers() (contracts/beanstalk/field/FundraiserFacet.sol#188-190)\n\t- FundraiserFacet.remainingFunding(uint32) (contracts/beanstalk/field/FundraiserFacet.sol#168-170)\n\t- FundraiserFacet.totalFunding(uint32) (contracts/beanstalk/field/FundraiserFacet.sol#172-174)\n",
            "markdown": "Reentrancy in [FundraiserFacet.fund(uint32,uint256,LibTransfer.From)](contracts/beanstalk/field/FundraiserFacet.sol#L104-L145):\n\tExternal calls:\n\t- [amount = LibTransfer.receiveToken(IERC20(s.fundraisers[id].token),amount,msg.sender,mode)](contracts/beanstalk/field/FundraiserFacet.sol#L118-L123)\n\tState variables written after the call(s):\n\t- [s.fundraisers[id].remaining = remaining - amount](contracts/beanstalk/field/FundraiserFacet.sol#L124)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [FundraiserFacet.createFundraiser(address,address,uint256)](contracts/beanstalk/field/FundraiserFacet.sol#L66-L94)\n\t- [FundraiserFacet.fundingToken(uint32)](contracts/beanstalk/field/FundraiserFacet.sol#L176-L178)\n\t- [FundraiserFacet.fundraiser(uint32)](contracts/beanstalk/field/FundraiserFacet.sol#L180-L186)\n\t- [FundraiserFacet.numberOfFundraisers()](contracts/beanstalk/field/FundraiserFacet.sol#L188-L190)\n\t- [FundraiserFacet.remainingFunding(uint32)](contracts/beanstalk/field/FundraiserFacet.sol#L168-L170)\n\t- [FundraiserFacet.totalFunding(uint32)](contracts/beanstalk/field/FundraiserFacet.sol#L172-L174)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/field/FundraiserFacet.sol"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 145
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5660628948d0dac4d20144a9e9732beea6bcce16da9aada2979b135d975d1706"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in Silo._claimPlenty(address) (contracts/beanstalk/silo/SiloFacet/Silo.sol#149-156):\n\tExternal calls:\n\t- C.threeCrv().safeTransfer(account,plenty) (contracts/beanstalk/silo/SiloFacet/Silo.sol#152)\n\tState variables written after the call(s):\n\t- delete s.a[account].sop.plenty (contracts/beanstalk/silo/SiloFacet/Silo.sol#153)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SiloExit._balanceOfEarnedBeans(address,uint256) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#179-208)\n\t- SiloExit.balanceOfEarnedBeans(address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#161-167)\n\t- SiloExit.balanceOfGrownStalk(address,address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#125-136)\n\t- SiloExit.balanceOfRainRoots(address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#250-252)\n\t- SiloExit.balanceOfRoots(address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#114-116)\n\t- SiloExit.balanceOfSop(address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#258-268)\n\t- SiloExit.balanceOfStalk(address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#96-98)\n\t- SiloExit.lastSeasonOfPlenty() (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#230-232)\n\t- SiloExit.lastUpdate(address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#57-59)\n\t- SiloExit.stemStartSeason() (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#320-322)\n\t- SiloExit.totalEarnedBeans() (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#83-85)\n\t- SiloExit.totalRoots() (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#73-75)\n\t- SiloExit.totalStalk() (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#66-68)\n",
            "markdown": "Reentrancy in [Silo._claimPlenty(address)](contracts/beanstalk/silo/SiloFacet/Silo.sol#L149-L156):\n\tExternal calls:\n\t- [C.threeCrv().safeTransfer(account,plenty)](contracts/beanstalk/silo/SiloFacet/Silo.sol#L152)\n\tState variables written after the call(s):\n\t- [delete s.a[account].sop.plenty](contracts/beanstalk/silo/SiloFacet/Silo.sol#L153)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SiloExit._balanceOfEarnedBeans(address,uint256)](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L179-L208)\n\t- [SiloExit.balanceOfEarnedBeans(address)](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L161-L167)\n\t- [SiloExit.balanceOfGrownStalk(address,address)](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L125-L136)\n\t- [SiloExit.balanceOfRainRoots(address)](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L250-L252)\n\t- [SiloExit.balanceOfRoots(address)](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L114-L116)\n\t- [SiloExit.balanceOfSop(address)](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L258-L268)\n\t- [SiloExit.balanceOfStalk(address)](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L96-L98)\n\t- [SiloExit.lastSeasonOfPlenty()](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L230-L232)\n\t- [SiloExit.lastUpdate(address)](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L57-L59)\n\t- [SiloExit.stemStartSeason()](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L320-L322)\n\t- [SiloExit.totalEarnedBeans()](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L83-L85)\n\t- [SiloExit.totalRoots()](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L73-L75)\n\t- [SiloExit.totalStalk()](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L66-L68)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/SiloFacet/Silo.sol"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "57a997777a7fc1db397cd557c77ce791ce571cbbadd7d5bb532fdf5aa5adc491"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90):\n\tExternal calls:\n\t- handleRain(3) (contracts/mocks/mockFacets/MockSeasonFacet.sol#88)\n\t\t- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)\n\t\t- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)\n\t\t- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)\n\t- mockStepSilo(amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#89)\n\t\t- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#49)\n\tState variables written after the call(s):\n\t- mockStepSilo(amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#89)\n\t\t- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)\n\t\t- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)\n\t\t- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)\n\t\t- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)\n\t\t- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)\n\t\t- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n",
            "markdown": "Reentrancy in [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90):\n\tExternal calls:\n\t- [handleRain(3)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L88)\n\t\t- [C.bean().mint(address(this),newHarvestable.add(sopBeans))](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L270)\n\t\t- [C.bean().mint(address(this),sopBeans)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L272)\n\t\t- [amountOut = C.curveMetapool().exchange(0,1,sopBeans,0)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L276)\n\t- [mockStepSilo(amount)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L89)\n\t\t- [C.bean().mint(address(this),amount)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L49)\n\tState variables written after the call(s):\n\t- [mockStepSilo(amount)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L89)\n\t\t- [s.earnedBeans = s.earnedBeans.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L185)\n\t\t- [s.s.stalk = s.s.stalk.add(seasonStalk)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L194)\n\t\t- [s.newEarnedStalk = seasonStalk.toUint128()](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L199)\n\t\t- [s.vestingPeriodRoots = 0](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L200)\n\t\t- [s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L203-L206)\n\t\t- [s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L208-L211)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "64a9f8e44777d09c373d391857bb081326e52bbaf74f14431910656473c837f8"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190):\n\tExternal calls:\n\t- MockToken(s.fundraisers[i_scope_0].token).burn(MockToken(s.fundraisers[i_scope_0].token).balanceOf(address(this))) (contracts/mocks/mockFacets/MockSeasonFacet.sol#170)\n\tState variables written after the call(s):\n\t- delete s.fundraisers[i_scope_0] (contracts/mocks/mockFacets/MockSeasonFacet.sol#171)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- delete s.f (contracts/mocks/mockFacets/MockSeasonFacet.sol#173)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- delete s.s (contracts/mocks/mockFacets/MockSeasonFacet.sol#174)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- delete s.w (contracts/mocks/mockFacets/MockSeasonFacet.sol#175)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- s.w.lastSowTime = type()(uint32).max (contracts/mocks/mockFacets/MockSeasonFacet.sol#176)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- s.w.thisSowTime = type()(uint32).max (contracts/mocks/mockFacets/MockSeasonFacet.sol#177)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- delete s.g (contracts/mocks/mockFacets/MockSeasonFacet.sol#178)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- delete s.r (contracts/mocks/mockFacets/MockSeasonFacet.sol#179)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- delete s.co (contracts/mocks/mockFacets/MockSeasonFacet.sol#180)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- delete s.season (contracts/mocks/mockFacets/MockSeasonFacet.sol#181)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- delete s.fundraiserIndex (contracts/mocks/mockFacets/MockSeasonFacet.sol#182)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- s.season.start = block.timestamp (contracts/mocks/mockFacets/MockSeasonFacet.sol#183)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- s.season.timestamp = uint32(block.timestamp % 2 ** 32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#184)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- s.s.stalk = 0 (contracts/mocks/mockFacets/MockSeasonFacet.sol#185)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- s.season.withdrawSeasons = 25 (contracts/mocks/mockFacets/MockSeasonFacet.sol#186)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- s.season.current = 1 (contracts/mocks/mockFacets/MockSeasonFacet.sol#187)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- s.paused = false (contracts/mocks/mockFacets/MockSeasonFacet.sol#188)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n",
            "markdown": "Reentrancy in [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190):\n\tExternal calls:\n\t- [MockToken(s.fundraisers[i_scope_0].token).burn(MockToken(s.fundraisers[i_scope_0].token).balanceOf(address(this)))](contracts/mocks/mockFacets/MockSeasonFacet.sol#L170)\n\tState variables written after the call(s):\n\t- [delete s.fundraisers[i_scope_0]](contracts/mocks/mockFacets/MockSeasonFacet.sol#L171)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [delete s.f](contracts/mocks/mockFacets/MockSeasonFacet.sol#L173)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [delete s.s](contracts/mocks/mockFacets/MockSeasonFacet.sol#L174)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [delete s.w](contracts/mocks/mockFacets/MockSeasonFacet.sol#L175)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [s.w.lastSowTime = type()(uint32).max](contracts/mocks/mockFacets/MockSeasonFacet.sol#L176)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [s.w.thisSowTime = type()(uint32).max](contracts/mocks/mockFacets/MockSeasonFacet.sol#L177)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [delete s.g](contracts/mocks/mockFacets/MockSeasonFacet.sol#L178)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [delete s.r](contracts/mocks/mockFacets/MockSeasonFacet.sol#L179)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [delete s.co](contracts/mocks/mockFacets/MockSeasonFacet.sol#L180)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [delete s.season](contracts/mocks/mockFacets/MockSeasonFacet.sol#L181)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [delete s.fundraiserIndex](contracts/mocks/mockFacets/MockSeasonFacet.sol#L182)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [s.season.start = block.timestamp](contracts/mocks/mockFacets/MockSeasonFacet.sol#L183)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [s.season.timestamp = uint32(block.timestamp % 2 ** 32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L184)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [s.s.stalk = 0](contracts/mocks/mockFacets/MockSeasonFacet.sol#L185)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [s.season.withdrawSeasons = 25](contracts/mocks/mockFacets/MockSeasonFacet.sol#L186)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [s.season.current = 1](contracts/mocks/mockFacets/MockSeasonFacet.sol#L187)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [s.paused = false](contracts/mocks/mockFacets/MockSeasonFacet.sol#L188)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 190
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6956df5115a1ead4c9a240cb089fe60d56844b3b832a4f9acab07d66ca60d7fe"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in Order._fillPodOrderV2(Order.PodOrder,uint256,uint256,uint256,bytes,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#119-145):\n\tExternal calls:\n\t- LibTransfer.sendToken(C.bean(),costInBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#136)\n\tState variables written after the call(s):\n\t- _cancelPodListing(msg.sender,index) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#138)\n\t\t- delete s.podListings[index] (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#242)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)\n\t- _transferPlot(msg.sender,o.account,index,start,amount) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#140)\n\t\t- s.a[account].field.plots[id] = amount (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#71)\n\t\t- delete s.a[account].field.plots[id] (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#81)\n\t\t- s.a[account].field.plots[id] = start (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#82)\n\t\t- s.a[account].field.plots[id.add(end)] = amount.sub(end) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#84)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)\n\t- delete s.podOrders[id] (contracts/beanstalk/market/MarketplaceFacet/Order.sol#142)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)\n",
            "markdown": "Reentrancy in [Order._fillPodOrderV2(Order.PodOrder,uint256,uint256,uint256,bytes,LibTransfer.To)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L119-L145):\n\tExternal calls:\n\t- [LibTransfer.sendToken(C.bean(),costInBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L136)\n\tState variables written after the call(s):\n\t- [_cancelPodListing(msg.sender,index)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L138)\n\t\t- [delete s.podListings[index]](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L242)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [PodTransfer.allowancePods(address,address)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L41-L47)\n\t- [_transferPlot(msg.sender,o.account,index,start,amount)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L140)\n\t\t- [s.a[account].field.plots[id] = amount](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L71)\n\t\t- [delete s.a[account].field.plots[id]](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L81)\n\t\t- [s.a[account].field.plots[id] = start](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L82)\n\t\t- [s.a[account].field.plots[id.add(end)] = amount.sub(end)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L84)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [PodTransfer.allowancePods(address,address)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L41-L47)\n\t- [delete s.podOrders[id]](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L142)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [PodTransfer.allowancePods(address,address)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L41-L47)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 145
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6a15537b3f63cdcd4fb7069da2d0450c21279022d149b35eda0ab78aa2ba23c3"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in Order._cancelPodOrder(uint24,uint256,uint256,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#150-161):\n\tExternal calls:\n\t- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#158)\n\tState variables written after the call(s):\n\t- delete s.podOrders[id] (contracts/beanstalk/market/MarketplaceFacet/Order.sol#159)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)\n",
            "markdown": "Reentrancy in [Order._cancelPodOrder(uint24,uint256,uint256,LibTransfer.To)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L150-L161):\n\tExternal calls:\n\t- [LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L158)\n\tState variables written after the call(s):\n\t- [delete s.podOrders[id]](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L159)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [PodTransfer.allowancePods(address,address)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L41-L47)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 161
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6c595223d3e5fb4e3667cf9608348dc787da716e44380b568b5b1dbd85463cbd"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in MockUnripeFacet.addUnderlying(address,uint256) (contracts/mocks/mockFacets/MockUnripeFacet.sol#23-38):\n\tExternal calls:\n\t- IERC20(underlyingToken).safeTransferFrom(msg.sender,address(this),amount) (contracts/mocks/mockFacets/MockUnripeFacet.sol#29-33)\n\tState variables written after the call(s):\n\t- s.u[unripeToken].balanceOfUnderlying = s.u[unripeToken].balanceOfUnderlying.add(amount) (contracts/mocks/mockFacets/MockUnripeFacet.sol#34-37)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- UnripeFacet._getUnderlying(address,uint256,uint256) (contracts/beanstalk/barn/UnripeFacet.sol#113-121)\n\t- UnripeFacet.getRecapPaidPercentAmount(uint256) (contracts/beanstalk/barn/UnripeFacet.sol#199-205)\n\t- UnripeFacet.getTotalUnderlying(address) (contracts/beanstalk/barn/UnripeFacet.sol#219-225)\n\t- UnripeFacet.getUnderlyingPerUnripeToken(address) (contracts/beanstalk/barn/UnripeFacet.sol#207-217)\n\t- UnripeFacet.getUnderlyingToken(address) (contracts/beanstalk/barn/UnripeFacet.sol#238-244)\n\t- UnripeFacet.isUnripe(address) (contracts/beanstalk/barn/UnripeFacet.sol#149-151)\n\t- UnripeFacet.picked(address,address) (contracts/beanstalk/barn/UnripeFacet.sol#97-103)\n\t- MockUnripeFacet.setMerkleRootE(address,bytes32) (contracts/mocks/mockFacets/MockUnripeFacet.sol#19-21)\n",
            "markdown": "Reentrancy in [MockUnripeFacet.addUnderlying(address,uint256)](contracts/mocks/mockFacets/MockUnripeFacet.sol#L23-L38):\n\tExternal calls:\n\t- [IERC20(underlyingToken).safeTransferFrom(msg.sender,address(this),amount)](contracts/mocks/mockFacets/MockUnripeFacet.sol#L29-L33)\n\tState variables written after the call(s):\n\t- [s.u[unripeToken].balanceOfUnderlying = s.u[unripeToken].balanceOfUnderlying.add(amount)](contracts/mocks/mockFacets/MockUnripeFacet.sol#L34-L37)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [UnripeFacet._getUnderlying(address,uint256,uint256)](contracts/beanstalk/barn/UnripeFacet.sol#L113-L121)\n\t- [UnripeFacet.getRecapPaidPercentAmount(uint256)](contracts/beanstalk/barn/UnripeFacet.sol#L199-L205)\n\t- [UnripeFacet.getTotalUnderlying(address)](contracts/beanstalk/barn/UnripeFacet.sol#L219-L225)\n\t- [UnripeFacet.getUnderlyingPerUnripeToken(address)](contracts/beanstalk/barn/UnripeFacet.sol#L207-L217)\n\t- [UnripeFacet.getUnderlyingToken(address)](contracts/beanstalk/barn/UnripeFacet.sol#L238-L244)\n\t- [UnripeFacet.isUnripe(address)](contracts/beanstalk/barn/UnripeFacet.sol#L149-L151)\n\t- [UnripeFacet.picked(address,address)](contracts/beanstalk/barn/UnripeFacet.sol#L97-L103)\n\t- [MockUnripeFacet.setMerkleRootE(address,bytes32)](contracts/mocks/mockFacets/MockUnripeFacet.sol#L19-L21)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockUnripeFacet.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "78eb42fbe0d992b844c8e487f5c33acce3e0f567f655fc476d0507c6247ddccd"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82):\n\tExternal calls:\n\t- handleRain(4) (contracts/mocks/mockFacets/MockSeasonFacet.sol#80)\n\t\t- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)\n\t\t- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)\n\t\t- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)\n\t- mockStepSilo(amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#81)\n\t\t- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#49)\n\tState variables written after the call(s):\n\t- mockStepSilo(amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#81)\n\t\t- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)\n\t\t- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)\n\t\t- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)\n\t\t- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)\n\t\t- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)\n\t\t- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n",
            "markdown": "Reentrancy in [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82):\n\tExternal calls:\n\t- [handleRain(4)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L80)\n\t\t- [C.bean().mint(address(this),newHarvestable.add(sopBeans))](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L270)\n\t\t- [C.bean().mint(address(this),sopBeans)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L272)\n\t\t- [amountOut = C.curveMetapool().exchange(0,1,sopBeans,0)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L276)\n\t- [mockStepSilo(amount)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L81)\n\t\t- [C.bean().mint(address(this),amount)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L49)\n\tState variables written after the call(s):\n\t- [mockStepSilo(amount)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L81)\n\t\t- [s.earnedBeans = s.earnedBeans.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L185)\n\t\t- [s.s.stalk = s.s.stalk.add(seasonStalk)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L194)\n\t\t- [s.newEarnedStalk = seasonStalk.toUint128()](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L199)\n\t\t- [s.vestingPeriodRoots = 0](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L200)\n\t\t- [s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L203-L206)\n\t\t- [s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L208-L211)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 82
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7b000cc5c0a3f7b7c2658c373b316cd3659a6b65df3fc70be42946c6eb66c06d"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in Fertilizer.beanstalkMint(address,uint256,uint128,uint128) (contracts/tokens/Fertilizer/Fertilizer.sol#36-49):\n\tExternal calls:\n\t- _update(account,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#40)\n\t\t- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)\n\t- _safeMint(account,id,amount,bytes(0)) (contracts/tokens/Fertilizer/Fertilizer.sol#43-48)\n\t\t- IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data) (contracts/tokens/Fertilizer/Fertilizer1155.sol#109-117)\n\tState variables written after the call(s):\n\t- _safeMint(account,id,amount,bytes(0)) (contracts/tokens/Fertilizer/Fertilizer.sol#43-48)\n\t\t- _balances[id][from].amount = fromBalance - _amount (contracts/tokens/Fertilizer/Internalizer.sol#85)\n\t\t- _balances[id][to].amount = _balances[id][to].amount.add(_amount) (contracts/tokens/Fertilizer/Internalizer.sol#87)\n\tInternalizer._balances (contracts/tokens/Fertilizer/Internalizer.sol#37) can be used in cross function reentrancies:\n\t- Fertilizer.__update(address,uint256[],uint256) (contracts/tokens/Fertilizer/Fertilizer.sol#73-87)\n\t- Internalizer._transfer(address,address,uint256,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#74-88)\n\t- Internalizer.balanceOf(address,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#57-60)\n\t- Fertilizer.balanceOfFertilized(address,uint256[]) (contracts/tokens/Fertilizer/Fertilizer.sol#89-96)\n\t- Fertilizer.balanceOfUnfertilized(address,uint256[]) (contracts/tokens/Fertilizer/Fertilizer.sol#98-103)\n\t- Fertilizer.beanstalkMint(address,uint256,uint128,uint128) (contracts/tokens/Fertilizer/Fertilizer.sol#36-49)\n\t- Internalizer.lastBalanceOf(address,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#62-65)\n",
            "markdown": "Reentrancy in [Fertilizer.beanstalkMint(address,uint256,uint128,uint128)](contracts/tokens/Fertilizer/Fertilizer.sol#L36-L49):\n\tExternal calls:\n\t- [_update(account,ids,bpf)](contracts/tokens/Fertilizer/Fertilizer.sol#L40)\n\t\t- [IBS(owner()).payFertilizer(account,amount)](contracts/tokens/Fertilizer/Fertilizer.sol#L70)\n\t- [_safeMint(account,id,amount,bytes(0))](contracts/tokens/Fertilizer/Fertilizer.sol#L43-L48)\n\t\t- [IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data)](contracts/tokens/Fertilizer/Fertilizer1155.sol#L109-L117)\n\tState variables written after the call(s):\n\t- [_safeMint(account,id,amount,bytes(0))](contracts/tokens/Fertilizer/Fertilizer.sol#L43-L48)\n\t\t- [_balances[id][from].amount = fromBalance - _amount](contracts/tokens/Fertilizer/Internalizer.sol#L85)\n\t\t- [_balances[id][to].amount = _balances[id][to].amount.add(_amount)](contracts/tokens/Fertilizer/Internalizer.sol#L87)\n\t[Internalizer._balances](contracts/tokens/Fertilizer/Internalizer.sol#L37) can be used in cross function reentrancies:\n\t- [Fertilizer.__update(address,uint256[],uint256)](contracts/tokens/Fertilizer/Fertilizer.sol#L73-L87)\n\t- [Internalizer._transfer(address,address,uint256,uint256)](contracts/tokens/Fertilizer/Internalizer.sol#L74-L88)\n\t- [Internalizer.balanceOf(address,uint256)](contracts/tokens/Fertilizer/Internalizer.sol#L57-L60)\n\t- [Fertilizer.balanceOfFertilized(address,uint256[])](contracts/tokens/Fertilizer/Fertilizer.sol#L89-L96)\n\t- [Fertilizer.balanceOfUnfertilized(address,uint256[])](contracts/tokens/Fertilizer/Fertilizer.sol#L98-L103)\n\t- [Fertilizer.beanstalkMint(address,uint256,uint128,uint128)](contracts/tokens/Fertilizer/Fertilizer.sol#L36-L49)\n\t- [Internalizer.lastBalanceOf(address,uint256)](contracts/tokens/Fertilizer/Internalizer.sol#L62-L65)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9adc80a092963e0c08d7ec2fb6c606fb9b7ff934acc1dfbf902fe42709e0f86c"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797):\n\tExternal calls:\n\t- TransferHelper.safeTransfer(token1,recipient,uint256(- amount1)) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#782)\n\t- IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#785)\n\t- TransferHelper.safeTransfer(token0,recipient,uint256(- amount0)) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#788)\n\t- IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#791)\n\tState variables written after the call(s):\n\t- slot0.unlocked = true (contracts/mocks/uniswap/MockUniswapV3Pool.sol#796)\n\tMockUniswapV3Pool.slot0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#80) can be used in cross function reentrancies:\n\t- MockUniswapV3Pool._modifyPosition(MockUniswapV3Pool.ModifyPositionParams) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#315-381)\n\t- MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#388-462)\n\t- MockUniswapV3Pool.flash(address,uint256,uint256,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#800-843)\n\t- MockUniswapV3Pool.increaseObservationCardinalityNext(uint16) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#264-276)\n\t- MockUniswapV3Pool.initialize(uint160) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#280-298)\n\t- MockUniswapV3Pool.lock() (contracts/mocks/uniswap/MockUniswapV3Pool.sol#112-117)\n\t- MockUniswapV3Pool.setFeeProtocol(uint8,uint8) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846-854)\n\t- MockUniswapV3Pool.slot0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#80)\n\t- MockUniswapV3Pool.snapshotCumulativesInside(int24,int24) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#166-241)\n\t- MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797)\n",
            "markdown": "Reentrancy in [MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L605-L797):\n\tExternal calls:\n\t- [TransferHelper.safeTransfer(token1,recipient,uint256(- amount1))](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L782)\n\t- [IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L785)\n\t- [TransferHelper.safeTransfer(token0,recipient,uint256(- amount0))](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L788)\n\t- [IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L791)\n\tState variables written after the call(s):\n\t- [slot0.unlocked = true](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L796)\n\t[MockUniswapV3Pool.slot0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L80) can be used in cross function reentrancies:\n\t- [MockUniswapV3Pool._modifyPosition(MockUniswapV3Pool.ModifyPositionParams)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L315-L381)\n\t- [MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L388-L462)\n\t- [MockUniswapV3Pool.flash(address,uint256,uint256,bytes)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L800-L843)\n\t- [MockUniswapV3Pool.increaseObservationCardinalityNext(uint16)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L264-L276)\n\t- [MockUniswapV3Pool.initialize(uint160)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L280-L298)\n\t- [MockUniswapV3Pool.lock()](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L112-L117)\n\t- [MockUniswapV3Pool.setFeeProtocol(uint8,uint8)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L846-L854)\n\t- [MockUniswapV3Pool.slot0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L80)\n\t- [MockUniswapV3Pool.snapshotCumulativesInside(int24,int24)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L166-L241)\n\t- [MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L605-L797)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 605,
                  "endLine": 797
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b4f0277b77e7f79044ca8a95992cf15c0b57e358015be2c0faf8f07838ab39c4"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293):\n\tExternal calls:\n\t- ERC20(coins[i]).transfer(_receiver,value) (contracts/mocks/curve/MockMeta3Curve.sol#286)\n\tState variables written after the call(s):\n\t- balances[i] = old_balance - value (contracts/mocks/curve/MockMeta3Curve.sol#284)\n\tMockMeta3Curve.balances (contracts/mocks/curve/MockMeta3Curve.sol#54) can be used in cross function reentrancies:\n\t- MockMeta3Curve._update() (contracts/mocks/curve/MockMeta3Curve.sol#121-125)\n\t- MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264)\n\t- MockMeta3Curve.calc_token_amount(uint256[2],bool) (contracts/mocks/curve/MockMeta3Curve.sol#534-547)\n\t- MockMeta3Curve.calc_withdraw_one_coin(uint256,int128) (contracts/mocks/curve/MockMeta3Curve.sol#418-420)\n\t- MockMeta3Curve.exchange(int128,int128,uint256,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#171-203)\n\t- MockMeta3Curve.get_balances() (contracts/mocks/curve/MockMeta3Curve.sol#82-84)\n\t- MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293)\n\t- MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351)\n\t- MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#367-384)\n\t- MockMeta3Curve.reset() (contracts/mocks/curve/MockMeta3Curve.sol#154-160)\n\t- MockMeta3Curve.reset_cumulative() (contracts/mocks/curve/MockMeta3Curve.sol#127-130)\n\t- MockMeta3Curve.set_balances(uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#101-104)\n\t- MockMeta3Curve.update(uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#116-119)\n\t- supply -= _burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#289)\n\tMockMeta3Curve.supply (contracts/mocks/curve/MockMeta3Curve.sol#56) can be used in cross function reentrancies:\n\t- MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#386-416)\n\t- MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264)\n\t- MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293)\n\t- MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351)\n\t- MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#367-384)\n\t- MockMeta3Curve.reset() (contracts/mocks/curve/MockMeta3Curve.sol#154-160)\n\t- MockMeta3Curve.set_supply(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#106-108)\n\t- MockMeta3Curve.totalSupply() (contracts/mocks/curve/MockMeta3Curve.sol#568-570)\n",
            "markdown": "Reentrancy in [MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)](contracts/mocks/curve/MockMeta3Curve.sol#L273-L293):\n\tExternal calls:\n\t- [ERC20(coins[i]).transfer(_receiver,value)](contracts/mocks/curve/MockMeta3Curve.sol#L286)\n\tState variables written after the call(s):\n\t- [balances[i] = old_balance - value](contracts/mocks/curve/MockMeta3Curve.sol#L284)\n\t[MockMeta3Curve.balances](contracts/mocks/curve/MockMeta3Curve.sol#L54) can be used in cross function reentrancies:\n\t- [MockMeta3Curve._update()](contracts/mocks/curve/MockMeta3Curve.sol#L121-L125)\n\t- [MockMeta3Curve.add_liquidity(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L209-L264)\n\t- [MockMeta3Curve.calc_token_amount(uint256[2],bool)](contracts/mocks/curve/MockMeta3Curve.sol#L534-L547)\n\t- [MockMeta3Curve.calc_withdraw_one_coin(uint256,int128)](contracts/mocks/curve/MockMeta3Curve.sol#L418-L420)\n\t- [MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L171-L203)\n\t- [MockMeta3Curve.get_balances()](contracts/mocks/curve/MockMeta3Curve.sol#L82-L84)\n\t- [MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)](contracts/mocks/curve/MockMeta3Curve.sol#L273-L293)\n\t- [MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L302-L351)\n\t- [MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L367-L384)\n\t- [MockMeta3Curve.reset()](contracts/mocks/curve/MockMeta3Curve.sol#L154-L160)\n\t- [MockMeta3Curve.reset_cumulative()](contracts/mocks/curve/MockMeta3Curve.sol#L127-L130)\n\t- [MockMeta3Curve.set_balances(uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L101-L104)\n\t- [MockMeta3Curve.update(uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L116-L119)\n\t- [supply -= _burn_amount](contracts/mocks/curve/MockMeta3Curve.sol#L289)\n\t[MockMeta3Curve.supply](contracts/mocks/curve/MockMeta3Curve.sol#L56) can be used in cross function reentrancies:\n\t- [MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L386-L416)\n\t- [MockMeta3Curve.add_liquidity(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L209-L264)\n\t- [MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)](contracts/mocks/curve/MockMeta3Curve.sol#L273-L293)\n\t- [MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L302-L351)\n\t- [MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L367-L384)\n\t- [MockMeta3Curve.reset()](contracts/mocks/curve/MockMeta3Curve.sol#L154-L160)\n\t- [MockMeta3Curve.set_supply(uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L106-L108)\n\t- [MockMeta3Curve.totalSupply()](contracts/mocks/curve/MockMeta3Curve.sol#L568-L570)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 273,
                  "endLine": 293
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b60073016e96adbe0e303e95e42ae462e1f093efbd450585d8d487ef14a8e1e7"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in Fertilizer._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes) (contracts/tokens/Fertilizer/Fertilizer.sol#51-62):\n\tExternal calls:\n\t- _update(from,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#60)\n\t\t- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)\n\t- _update(to,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#61)\n\t\t- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)\n\tState variables written after the call(s):\n\t- _update(to,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#61)\n\t\t- _balances[ids[i]][account].lastBpf = uint128(stopBpf) (contracts/tokens/Fertilizer/Fertilizer.sol#83)\n\tInternalizer._balances (contracts/tokens/Fertilizer/Internalizer.sol#37) can be used in cross function reentrancies:\n\t- Fertilizer.__update(address,uint256[],uint256) (contracts/tokens/Fertilizer/Fertilizer.sol#73-87)\n\t- Internalizer._transfer(address,address,uint256,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#74-88)\n\t- Internalizer.balanceOf(address,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#57-60)\n\t- Fertilizer.balanceOfFertilized(address,uint256[]) (contracts/tokens/Fertilizer/Fertilizer.sol#89-96)\n\t- Fertilizer.balanceOfUnfertilized(address,uint256[]) (contracts/tokens/Fertilizer/Fertilizer.sol#98-103)\n\t- Fertilizer.beanstalkMint(address,uint256,uint128,uint128) (contracts/tokens/Fertilizer/Fertilizer.sol#36-49)\n\t- Internalizer.lastBalanceOf(address,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#62-65)\n",
            "markdown": "Reentrancy in [Fertilizer._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)](contracts/tokens/Fertilizer/Fertilizer.sol#L51-L62):\n\tExternal calls:\n\t- [_update(from,ids,bpf)](contracts/tokens/Fertilizer/Fertilizer.sol#L60)\n\t\t- [IBS(owner()).payFertilizer(account,amount)](contracts/tokens/Fertilizer/Fertilizer.sol#L70)\n\t- [_update(to,ids,bpf)](contracts/tokens/Fertilizer/Fertilizer.sol#L61)\n\t\t- [IBS(owner()).payFertilizer(account,amount)](contracts/tokens/Fertilizer/Fertilizer.sol#L70)\n\tState variables written after the call(s):\n\t- [_update(to,ids,bpf)](contracts/tokens/Fertilizer/Fertilizer.sol#L61)\n\t\t- [_balances[ids[i]][account].lastBpf = uint128(stopBpf)](contracts/tokens/Fertilizer/Fertilizer.sol#L83)\n\t[Internalizer._balances](contracts/tokens/Fertilizer/Internalizer.sol#L37) can be used in cross function reentrancies:\n\t- [Fertilizer.__update(address,uint256[],uint256)](contracts/tokens/Fertilizer/Fertilizer.sol#L73-L87)\n\t- [Internalizer._transfer(address,address,uint256,uint256)](contracts/tokens/Fertilizer/Internalizer.sol#L74-L88)\n\t- [Internalizer.balanceOf(address,uint256)](contracts/tokens/Fertilizer/Internalizer.sol#L57-L60)\n\t- [Fertilizer.balanceOfFertilized(address,uint256[])](contracts/tokens/Fertilizer/Fertilizer.sol#L89-L96)\n\t- [Fertilizer.balanceOfUnfertilized(address,uint256[])](contracts/tokens/Fertilizer/Fertilizer.sol#L98-L103)\n\t- [Fertilizer.beanstalkMint(address,uint256,uint128,uint128)](contracts/tokens/Fertilizer/Fertilizer.sol#L36-L49)\n\t- [Internalizer.lastBalanceOf(address,uint256)](contracts/tokens/Fertilizer/Internalizer.sol#L62-L65)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c03438740f47b13772633501279204ea7c14b4f2da0127907d1926b856858866"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67):\n\tExternal calls:\n\t- handleRain(4) (contracts/mocks/mockFacets/MockSeasonFacet.sol#64)\n\t\t- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)\n\t\t- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)\n\t\t- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)\n\tState variables written after the call(s):\n\t- s.season.current += 1 (contracts/mocks/mockFacets/MockSeasonFacet.sol#63)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n\t- s.season.sunriseBlock = uint32(block.number) (contracts/mocks/mockFacets/MockSeasonFacet.sol#66)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)\n\t- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)\n\t- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)\n\t- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)\n\t- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)\n\t- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)\n\t- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)\n\t- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)\n\t- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)\n\t- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)\n\t- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)\n\t- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)\n\t- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)\n\t- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)\n\t- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)\n\t- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)\n\t- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)\n\t- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)\n\t- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)\n\t- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)\n\t- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)\n\t- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)\n\t- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)\n\t- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)\n\t- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)\n\t- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n",
            "markdown": "Reentrancy in [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67):\n\tExternal calls:\n\t- [handleRain(4)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L64)\n\t\t- [C.bean().mint(address(this),newHarvestable.add(sopBeans))](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L270)\n\t\t- [C.bean().mint(address(this),sopBeans)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L272)\n\t\t- [amountOut = C.curveMetapool().exchange(0,1,sopBeans,0)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L276)\n\tState variables written after the call(s):\n\t- [s.season.current += 1](contracts/mocks/mockFacets/MockSeasonFacet.sol#L63)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n\t- [s.season.sunriseBlock = uint32(block.number)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L66)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [MockSeasonFacet.curveOracle()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L241-L243)\n\t- [MockSeasonFacet.deployStemsUpgrade()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L265-L303)\n\t- [MockSeasonFacet.droughtSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L84-L90)\n\t- [MockSeasonFacet.droughtSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L69-L74)\n\t- [MockSeasonFacet.farmSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L123-L128)\n\t- [MockSeasonFacet.farmSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L130-L137)\n\t- [MockSeasonFacet.fastForward(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113-L116)\n\t- [MockSeasonFacet.getSunriseBlock()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L260-L262)\n\t- [MockSeasonFacet.getT()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L324-L326)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [MockSeasonFacet.lastDSoil()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L312-L314)\n\t- [MockSeasonFacet.lastSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L316-L318)\n\t- [MockSeasonFacet.lightSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L107-L111)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [MockSeasonFacet.rainSiloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L76-L82)\n\t- [MockSeasonFacet.rainSunrise()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L53-L58)\n\t- [MockSeasonFacet.rainSunrises(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L60-L67)\n\t- [MockSeasonFacet.resetSeasonStart(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L221-L223)\n\t- [MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [MockSeasonFacet.setAbovePegE(bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L143-L145)\n\t- [MockSeasonFacet.setCurrentSeasonE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198-L200)\n\t- [MockSeasonFacet.setLastDSoilE(uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L147-L149)\n\t- [MockSeasonFacet.setLastSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L155-L157)\n\t- [MockSeasonFacet.setMaxTempE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L139-L141)\n\t- [MockSeasonFacet.setNextSowTimeE(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151-L153)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [MockSeasonFacet.setSunriseBlock(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256-L258)\n\t- [MockSeasonFacet.setYieldE(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L36-L38)\n\t- [MockSeasonFacet.siloSunrise(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L40-L46)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [MockSeasonFacet.stepWeatherE(int256,uint128)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L192-L196)\n\t- [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L202-L219)\n\t- [MockSeasonFacet.sunSunrise(int256,uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L92-L97)\n\t- [MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L99-L105)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [MockSeasonFacet.teleportSunrise(uint32)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118-L121)\n\t- [MockSeasonFacet.thisSowTime()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L320-L322)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [MockSeasonFacet.updateTWAPCurveE()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L235-L239)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 67
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c61bbe536be44b0b82e20dfe64225935e421758459e06b8a9815ad1b5e28ce87"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in MockUniswapV3Pool.collectProtocol(address,uint128,uint128) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#857-877):\n\tExternal calls:\n\t- TransferHelper.safeTransfer(token0,recipient,amount0) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#868)\n\tState variables written after the call(s):\n\t- protocolFees.token1 -= amount1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#872)\n\tMockUniswapV3Pool.protocolFees (contracts/mocks/uniswap/MockUniswapV3Pool.sol#93) can be used in cross function reentrancies:\n\t- MockUniswapV3Pool.collectProtocol(address,uint128,uint128) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#857-877)\n\t- MockUniswapV3Pool.flash(address,uint256,uint256,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#800-843)\n\t- MockUniswapV3Pool.protocolFees (contracts/mocks/uniswap/MockUniswapV3Pool.sol#93)\n\t- MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797)\n",
            "markdown": "Reentrancy in [MockUniswapV3Pool.collectProtocol(address,uint128,uint128)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L857-L877):\n\tExternal calls:\n\t- [TransferHelper.safeTransfer(token0,recipient,amount0)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L868)\n\tState variables written after the call(s):\n\t- [protocolFees.token1 -= amount1](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L872)\n\t[MockUniswapV3Pool.protocolFees](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L93) can be used in cross function reentrancies:\n\t- [MockUniswapV3Pool.collectProtocol(address,uint128,uint128)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L857-L877)\n\t- [MockUniswapV3Pool.flash(address,uint256,uint256,bytes)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L800-L843)\n\t- [MockUniswapV3Pool.protocolFees](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L93)\n\t- [MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L605-L797)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 857,
                  "endLine": 877
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c773263fc768a9939c2a8df32ac16a2b304fbe0a0fb48c43d8719a54e1e0c88b"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83):\n\tExternal calls:\n\t- newHarvestable = rewardBeans(uint256(deltaB)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#73)\n\t\t- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)\n\tState variables written after the call(s):\n\t- setSoilAbovePeg(newHarvestable,caseId) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#74)\n\t\t- s.f.soil = amount.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#238)\n\t- s.season.abovePeg = true (contracts/beanstalk/sun/SeasonFacet/Sun.sol#75)\n",
            "markdown": "Reentrancy in [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83):\n\tExternal calls:\n\t- [newHarvestable = rewardBeans(uint256(deltaB))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L73)\n\t\t- [C.bean().mint(address(this),newSupply)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L93)\n\tState variables written after the call(s):\n\t- [setSoilAbovePeg(newHarvestable,caseId)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L74)\n\t\t- [s.f.soil = amount.toUint128()](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L238)\n\t- [s.season.abovePeg = true](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Sun.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c860951d4f47c458f5b037d0c629e9ef451235f8b5e218c448f6bc551530616f"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in SeasonFacet.gm(address,LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#47-62):\n\tExternal calls:\n\t- caseId = stepWeather(deltaB) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#58)\n\t\t- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)\n\t\t- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)\n\t\t- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)\n\t- stepSun(deltaB,caseId) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#59)\n\t\t- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)\n\tState variables written after the call(s):\n\t- stepSun(deltaB,caseId) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#59)\n\t\t- s.f.soil = amount.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#238)\n\t\t- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)\n\t\t- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)\n\t\t- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)\n\t\t- s.season.abovePeg = true (contracts/beanstalk/sun/SeasonFacet/Sun.sol#75)\n\t\t- s.f.harvestable = s.f.harvestable.add(newHarvestable) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#171)\n\t\t- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)\n\t\t- s.season.abovePeg = false (contracts/beanstalk/sun/SeasonFacet/Sun.sol#81)\n\t\t- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)\n\t\t- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)\n\t\t- s.bpf = uint128(firstEndBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#139)\n\t\t- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#140)\n\t\t- s.bpf = uint128(newTotalBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#153)\n\t\t- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#155)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)\n\t- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)\n\t- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)\n\t- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)\n\t- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)\n\t- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)\n\t- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)\n\t- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)\n\t- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)\n\t- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)\n\t- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)\n\t- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)\n\t- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)\n\t- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)\n\t- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)\n\t- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)\n\t- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n",
            "markdown": "Reentrancy in [SeasonFacet.gm(address,LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L47-L62):\n\tExternal calls:\n\t- [caseId = stepWeather(deltaB)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L58)\n\t\t- [C.bean().mint(address(this),newHarvestable.add(sopBeans))](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L270)\n\t\t- [C.bean().mint(address(this),sopBeans)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L272)\n\t\t- [amountOut = C.curveMetapool().exchange(0,1,sopBeans,0)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L276)\n\t- [stepSun(deltaB,caseId)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L59)\n\t\t- [C.bean().mint(address(this),newSupply)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L93)\n\tState variables written after the call(s):\n\t- [stepSun(deltaB,caseId)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L59)\n\t\t- [s.f.soil = amount.toUint128()](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L238)\n\t\t- [s.earnedBeans = s.earnedBeans.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L185)\n\t\t- [s.s.stalk = s.s.stalk.add(seasonStalk)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L194)\n\t\t- [s.newEarnedStalk = seasonStalk.toUint128()](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L199)\n\t\t- [s.season.abovePeg = true](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L75)\n\t\t- [s.f.harvestable = s.f.harvestable.add(newHarvestable)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L171)\n\t\t- [s.vestingPeriodRoots = 0](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L200)\n\t\t- [s.season.abovePeg = false](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L81)\n\t\t- [s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L203-L206)\n\t\t- [s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L208-L211)\n\t\t- [s.bpf = uint128(firstEndBpf)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L139)\n\t\t- [s.fertilizedIndex = s.fertilizedIndex.add(newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L140)\n\t\t- [s.bpf = uint128(newTotalBpf)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L153)\n\t\t- [s.fertilizedIndex = s.fertilizedIndex.add(newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L155)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [SeasonFacet.abovePeg()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L90-L92)\n\t- [Weather.changeWeather(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L198-L217)\n\t- [Weather.handleRain(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L225-L246)\n\t- [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150)\n\t- [SeasonFacet.paused()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L76-L78)\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111)\n\t- [Weather.rewardSop(uint256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L285-L291)\n\t- [Sun.rewardToFertilizer(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L116-L156)\n\t- [Sun.rewardToHarvestable(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L162-L172)\n\t- [Sun.rewardToSilo(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L178-L212)\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71)\n\t- [SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109)\n\t- [Sun.setSoil(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L237-L240)\n\t- [Sun.setSoilAbovePeg(uint256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L226-L234)\n\t- [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280)\n\t- [SeasonFacet.stepSeason()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L116-L121)\n\t- [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83)\n\t- [Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193)\n\t- [SeasonFacet.sunriseBlock()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L97-L99)\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dbf8e8c52820143f222a36153941b6d8fc3b334638387de98b0a28f9d12817c5"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in FertilizerPreMint.initialize(string) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#37-40):\n\tExternal calls:\n\t- IERC20(WETH).approve(SWAP_ROUTER,type()(uint256).max) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#38)\n\tState variables written after the call(s):\n\t- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)\n\t\t- _initialized = true (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#41)\n\tInitializable._initialized (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#25) can be used in cross function reentrancies:\n\t- Initializable.initializer() (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#35-49)\n\t- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)\n\t\t- _initializing = true (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#40)\n\t\t- _initializing = false (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#47)\n\tInitializable._initializing (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#30) can be used in cross function reentrancies:\n\t- Initializable.initializer() (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#35-49)\n",
            "markdown": "Reentrancy in [FertilizerPreMint.initialize(string)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L37-L40):\n\tExternal calls:\n\t- [IERC20(WETH).approve(SWAP_ROUTER,type()(uint256).max)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L38)\n\tState variables written after the call(s):\n\t- [__Internallize_init(_uri)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L39)\n\t\t- [_initialized = true](node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#L41)\n\t[Initializable._initialized](node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#L25) can be used in cross function reentrancies:\n\t- [Initializable.initializer()](node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#L35-L49)\n\t- [__Internallize_init(_uri)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L39)\n\t\t- [_initializing = true](node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#L40)\n\t\t- [_initializing = false](node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#L47)\n\t[Initializable._initializing](node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#L30) can be used in cross function reentrancies:\n\t- [Initializable.initializer()](node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#L35-L49)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/FertilizerPreMint.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e8d13cdb46f4e62dfbd0eb6361aec7499100374fe376b304566a8bcc1e02de08"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193):\n\tExternal calls:\n\t- IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockPlainCurve.sol#185)\n\tState variables written after the call(s):\n\t- supply = total_supply (contracts/mocks/curve/MockPlainCurve.sol#190)\n\tMockPlainCurve.supply (contracts/mocks/curve/MockPlainCurve.sol#37) can be used in cross function reentrancies:\n\t- MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockPlainCurve.sol#219-249)\n\t- MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193)\n\t- MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/mocks/curve/MockPlainCurve.sol#201-217)\n\t- MockPlainCurve.reset() (contracts/mocks/curve/MockPlainCurve.sol#126-132)\n\t- MockPlainCurve.set_supply(uint256) (contracts/mocks/curve/MockPlainCurve.sol#92-94)\n\t- MockPlainCurve.totalSupply() (contracts/mocks/curve/MockPlainCurve.sol#375-377)\n",
            "markdown": "Reentrancy in [MockPlainCurve.add_liquidity(uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L137-L193):\n\tExternal calls:\n\t- [IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2)](contracts/mocks/curve/MockPlainCurve.sol#L185)\n\tState variables written after the call(s):\n\t- [supply = total_supply](contracts/mocks/curve/MockPlainCurve.sol#L190)\n\t[MockPlainCurve.supply](contracts/mocks/curve/MockPlainCurve.sol#L37) can be used in cross function reentrancies:\n\t- [MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2])](contracts/mocks/curve/MockPlainCurve.sol#L219-L249)\n\t- [MockPlainCurve.add_liquidity(uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L137-L193)\n\t- [MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256)](contracts/mocks/curve/MockPlainCurve.sol#L201-L217)\n\t- [MockPlainCurve.reset()](contracts/mocks/curve/MockPlainCurve.sol#L126-L132)\n\t- [MockPlainCurve.set_supply(uint256)](contracts/mocks/curve/MockPlainCurve.sol#L92-L94)\n\t- [MockPlainCurve.totalSupply()](contracts/mocks/curve/MockPlainCurve.sol#L375-L377)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ea90550c9ee9b2ee29a676c673d2494bc3418bf07c6582dc950e442e5123bcae"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264):\n\tExternal calls:\n\t- IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockMeta3Curve.sol#256)\n\tState variables written after the call(s):\n\t- supply = total_supply (contracts/mocks/curve/MockMeta3Curve.sol#261)\n\tMockMeta3Curve.supply (contracts/mocks/curve/MockMeta3Curve.sol#56) can be used in cross function reentrancies:\n\t- MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#386-416)\n\t- MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264)\n\t- MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293)\n\t- MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351)\n\t- MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#367-384)\n\t- MockMeta3Curve.reset() (contracts/mocks/curve/MockMeta3Curve.sol#154-160)\n\t- MockMeta3Curve.set_supply(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#106-108)\n\t- MockMeta3Curve.totalSupply() (contracts/mocks/curve/MockMeta3Curve.sol#568-570)\n",
            "markdown": "Reentrancy in [MockMeta3Curve.add_liquidity(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L209-L264):\n\tExternal calls:\n\t- [IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2)](contracts/mocks/curve/MockMeta3Curve.sol#L256)\n\tState variables written after the call(s):\n\t- [supply = total_supply](contracts/mocks/curve/MockMeta3Curve.sol#L261)\n\t[MockMeta3Curve.supply](contracts/mocks/curve/MockMeta3Curve.sol#L56) can be used in cross function reentrancies:\n\t- [MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L386-L416)\n\t- [MockMeta3Curve.add_liquidity(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L209-L264)\n\t- [MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)](contracts/mocks/curve/MockMeta3Curve.sol#L273-L293)\n\t- [MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L302-L351)\n\t- [MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L367-L384)\n\t- [MockMeta3Curve.reset()](contracts/mocks/curve/MockMeta3Curve.sol#L154-L160)\n\t- [MockMeta3Curve.set_supply(uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L106-L108)\n\t- [MockMeta3Curve.totalSupply()](contracts/mocks/curve/MockMeta3Curve.sol#L568-L570)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 264
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ec721de82ef7c63aa58cd7beab7345090d66c11f6e18711b7e12a847bb6e8900"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280):\n\tExternal calls:\n\t- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)\n\t- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)\n\t- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)\n\tState variables written after the call(s):\n\t- rewardSop(amountOut) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#278)\n\t\t- s.sops[s.season.rainStart] = s.sops[s.season.lastSop].add(amount.mul(C.SOP_PRECISION).div(s.r.roots)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#286-288)\n\t\t- s.season.lastSop = s.season.rainStart (contracts/beanstalk/sun/SeasonFacet/Weather.sol#289)\n\t\t- s.season.lastSopSeason = s.season.current (contracts/beanstalk/sun/SeasonFacet/Weather.sol#290)\n\tReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:\n\t- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)\n\t- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)\n\t- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)\n",
            "markdown": "Reentrancy in [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280):\n\tExternal calls:\n\t- [C.bean().mint(address(this),newHarvestable.add(sopBeans))](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L270)\n\t- [C.bean().mint(address(this),sopBeans)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L272)\n\t- [amountOut = C.curveMetapool().exchange(0,1,sopBeans,0)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L276)\n\tState variables written after the call(s):\n\t- [rewardSop(amountOut)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L278)\n\t\t- [s.sops[s.season.rainStart] = s.sops[s.season.lastSop].add(amount.mul(C.SOP_PRECISION).div(s.r.roots))](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L286-L288)\n\t\t- [s.season.lastSop = s.season.rainStart](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L289)\n\t\t- [s.season.lastSopSeason = s.season.current](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L290)\n\t[ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) can be used in cross function reentrancies:\n\t- [Weather.plentyPerRoot(uint32)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L89-L91)\n\t- [Weather.rain()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L82-L84)\n\t- [Weather.weather()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L75-L77)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Weather.sol"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 280
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f960f5405d99a246a8b441ef0f1d47fbb19983daede1540d59cd58ce374ba3b7"
          }
        },
        {
          "ruleId": "1-0-tautology",
          "message": {
            "text": "MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#497-533) contains a tautology or contradiction:\n\t- require(bool)(i >= 0) (contracts/mocks/curve/MockMeta3Curve.sol#503)\n",
            "markdown": "[MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L497-L533) contains a tautology or contradiction:\n\t- [require(bool)(i >= 0)](contracts/mocks/curve/MockMeta3Curve.sol#L503)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 497,
                  "endLine": 533
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3956de8c293e8c68326776907fb245bd6aa9224a2d274715430070cd7adf8567"
          }
        },
        {
          "ruleId": "1-0-tautology",
          "message": {
            "text": "MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#453-495) contains a tautology or contradiction:\n\t- require(bool,string)(i >= 0,Curve: i below zero) (contracts/mocks/curve/MockMeta3Curve.sol#463)\n",
            "markdown": "[MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L453-L495) contains a tautology or contradiction:\n\t- [require(bool,string)(i >= 0,Curve: i below zero)](contracts/mocks/curve/MockMeta3Curve.sol#L463)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 453,
                  "endLine": 495
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4ef897bc6f17474ce9fe9d0c35c29d8ad5195d0f568bbb7d69aecf3b6fe9a99d"
          }
        },
        {
          "ruleId": "1-0-tautology",
          "message": {
            "text": "MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#297-339) contains a tautology or contradiction:\n\t- require(bool,string)(i >= 0,Curve: i below zero) (contracts/mocks/curve/MockPlainCurve.sol#307)\n",
            "markdown": "[MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L297-L339) contains a tautology or contradiction:\n\t- [require(bool,string)(i >= 0,Curve: i below zero)](contracts/mocks/curve/MockPlainCurve.sol#L307)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 339
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8f177e9208263ed7dec26cdadbf3024ef51b9bf2370a997adc717efc76e63ed8"
          }
        },
        {
          "ruleId": "1-0-tautology",
          "message": {
            "text": "MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#497-533) contains a tautology or contradiction:\n\t- require(bool)(j >= 0) (contracts/mocks/curve/MockMeta3Curve.sol#500)\n",
            "markdown": "[MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L497-L533) contains a tautology or contradiction:\n\t- [require(bool)(j >= 0)](contracts/mocks/curve/MockMeta3Curve.sol#L500)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 497,
                  "endLine": 533
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cbd3c9db6ef6f994acd6796137ca0f33037bc2c14b0b16a4ac5024527e07a261"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "InitSiloEvents.init(InitSiloEvents.SiloEvents[]).i (contracts/beanstalk/init/InitSiloEvents.sol#38) is a local variable never initialized\n",
            "markdown": "[InitSiloEvents.init(InitSiloEvents.SiloEvents[]).i](contracts/beanstalk/init/InitSiloEvents.sol#L38) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitSiloEvents.sol"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "486a823d0b62147a6a613752ce8366ec69ba197274dfa1c0a6386da0dfdc8fab"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "TickBitmap.nextInitializedTickWithinOneWord(mapping(int16 => uint256),int24,int24,bool).bitPos_scope_1 (node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol#65) is a local variable never initialized\n",
            "markdown": "[TickBitmap.nextInitializedTickWithinOneWord(mapping(int16 => uint256),int24,int24,bool).bitPos_scope_1](node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol#L65) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "707abe372e8f9208441406dc9541346e86e313059c865cc881ef70e0f1cb4141"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "TickBitmap.nextInitializedTickWithinOneWord(mapping(int16 => uint256),int24,int24,bool).wordPos_scope_0 (node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol#65) is a local variable never initialized\n",
            "markdown": "[TickBitmap.nextInitializedTickWithinOneWord(mapping(int16 => uint256),int24,int24,bool).wordPos_scope_0](node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol#L65) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ae0e09c8fc85d11d233743afbd7f6854d481fb4eb9abe2ac7a98206726cbf5e0"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibLegacyTokenSilo._mowAndMigrate(address,address[],uint32[][],uint256[][]).perTokenData (contracts/libraries/Silo/LibLegacyTokenSilo.sol#305) is a local variable never initialized\n",
            "markdown": "[LibLegacyTokenSilo._mowAndMigrate(address,address[],uint32[][],uint256[][]).perTokenData](contracts/libraries/Silo/LibLegacyTokenSilo.sol#L305) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibLegacyTokenSilo.sol"
                },
                "region": {
                  "startLine": 305,
                  "endLine": 305
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "03ba2b33d5167b8902a7622b992eaa99ecb7e72d86dc991fe742878a35dd01be"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibCurve.getD(uint256[2],uint256)._i (contracts/libraries/Curve/LibCurve.sol#91) is a local variable never initialized\n",
            "markdown": "[LibCurve.getD(uint256[2],uint256)._i](contracts/libraries/Curve/LibCurve.sol#L91) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0517d448ce17ee127898717fb611bb7c2b185edf300dab0a6ccecb7505320521"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibCurve.getY(uint256,uint256[2],uint256,uint256)._i (contracts/libraries/Curve/LibCurve.sol#62) is a local variable never initialized\n",
            "markdown": "[LibCurve.getY(uint256,uint256[2],uint256,uint256)._i](contracts/libraries/Curve/LibCurve.sol#L62) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "05ccff85d7619355da28dbaacbd023b4f8b204696bb64c868c61f9104e861c2a"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockPlainCurve._xp_mem(uint256[2],uint256[2]).i (contracts/mocks/curve/MockPlainCurve.sol#267) is a local variable never initialized\n",
            "markdown": "[MockPlainCurve._xp_mem(uint256[2],uint256[2]).i](contracts/mocks/curve/MockPlainCurve.sol#L267) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "07385c0b63b7d8aa60cf4aa3c1fda3121e3def4c410a0edd5d616cc1bdbe80f6"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "ConvertFacet.enrootDeposits(address,int96[],uint256[]).i (contracts/beanstalk/silo/ConvertFacet.sol#206) is a local variable never initialized\n",
            "markdown": "[ConvertFacet.enrootDeposits(address,int96[],uint256[]).i](contracts/beanstalk/silo/ConvertFacet.sol#L206) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/ConvertFacet.sol"
                },
                "region": {
                  "startLine": 206,
                  "endLine": 206
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "090c2b3966c86006c4fe161da52c0777bdde34b09644fbca0d7c894097f6fe00"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "FieldFacet._harvest(uint256[]).i (contracts/beanstalk/field/FieldFacet.sol#175) is a local variable never initialized\n",
            "markdown": "[FieldFacet._harvest(uint256[]).i](contracts/beanstalk/field/FieldFacet.sol#L175) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/field/FieldFacet.sol"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 175
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0af05b28651977d3226441fcc38f83800b7200e385dcd6f3a470e79ed07491f9"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_1 (contracts/beanstalk/farm/CurveFacet.sol#202) is a local variable never initialized\n",
            "markdown": "[CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_1](contracts/beanstalk/farm/CurveFacet.sol#L202) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0b11a2b8415ee1c377b8ee7f9d63556af7fc409c2c41d272a5a6c32c325bbc7c"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "FarmFacet.farm(bytes[]).i (contracts/beanstalk/farm/FarmFacet.sol#42) is a local variable never initialized\n",
            "markdown": "[FarmFacet.farm(bytes[]).i](contracts/beanstalk/farm/FarmFacet.sol#L42) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/FarmFacet.sol"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e34f170e9c55c4df3af99435aa9892571f96d9eed09ba92d0886453d27f7614"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "ERC1155Upgradeable._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).response (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#380) is a local variable never initialized\n",
            "markdown": "[ERC1155Upgradeable._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).response](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L380) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol"
                },
                "region": {
                  "startLine": 380,
                  "endLine": 380
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "104938b55100c30fd1f8ca6122524d1a9fc0d72ef9ccfd52fc9d382dfb43a32e"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Fertilizer.balanceOfFertilized(address,uint256[]).i (contracts/tokens/Fertilizer/Fertilizer.sol#91) is a local variable never initialized\n",
            "markdown": "[Fertilizer.balanceOfFertilized(address,uint256[]).i](contracts/tokens/Fertilizer/Fertilizer.sol#L91) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer.sol"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "11555468aaeb243220f9e62071ea203761a18b0b70053b05215f852cd4a2edf0"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address).i_scope_0 (contracts/mocks/curve/MockMeta3Curve.sol#322) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address).i_scope_0](contracts/mocks/curve/MockMeta3Curve.sol#L322) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 322,
                  "endLine": 322
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "18d0ed21bea2ebbfa9da02c64d9b0a43ad36e26305bb94a394575efd43481047"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2])._i (contracts/mocks/curve/MockMeta3Curve.sol#514) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2])._i](contracts/mocks/curve/MockMeta3Curve.sol#L514) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 514,
                  "endLine": 514
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "19ccb2e5dc376c30a936d7d3567b5c12290c1c1a0977257a5d7f11ccddd7c767"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibDiamond.addFunctions(address,bytes4[]).selectorIndex (contracts/libraries/LibDiamond.sol#129) is a local variable never initialized\n",
            "markdown": "[LibDiamond.addFunctions(address,bytes4[]).selectorIndex](contracts/libraries/LibDiamond.sol#L129) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 129
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1b2c0af68f51c492092ad3543e276f6420fcfe07ec039e3813b60786eb8b6ea2"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24).flippedUpper (contracts/mocks/uniswap/MockUniswapV3Pool.sol#402) is a local variable never initialized\n",
            "markdown": "[MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24).flippedUpper](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L402) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 402,
                  "endLine": 402
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1c44b75196669db7ad92af3ee7f84d5e444f61eba3c69f13a972e8c7863db76d"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Internalizer.lastBalanceOfBatch(address[],uint256[]).i (contracts/tokens/Fertilizer/Internalizer.sol#69) is a local variable never initialized\n",
            "markdown": "[Internalizer.lastBalanceOfBatch(address[],uint256[]).i](contracts/tokens/Fertilizer/Internalizer.sol#L69) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Internalizer.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1da697c91117e0a7394eb76f4a5e6c880daeec93b66da2cd2156633727eaff57"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Fertilizer1155.__doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).response (contracts/tokens/Fertilizer/Fertilizer1155.sol#109) is a local variable never initialized\n",
            "markdown": "[Fertilizer1155.__doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).response](contracts/tokens/Fertilizer/Fertilizer1155.sol#L109) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer1155.sol"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "20baa57856624686fed971e449ec6ca72e1baac121cc618d672831a48a2eba35"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "OracleLibrary.getWeightedArithmeticMeanTick(OracleLibrary.WeightedTickData[]).i (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#152) is a local variable never initialized\n",
            "markdown": "[OracleLibrary.getWeightedArithmeticMeanTick(OracleLibrary.WeightedTickData[]).i](node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#L152) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "23ae43c8ca06eabc1162ee0621adc7462794a3a7d45d54177006c761aeb979b0"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "TokenSilo._transferDeposits(address,address,address,int96[],uint256[]).i (contracts/beanstalk/silo/SiloFacet/TokenSilo.sol#346) is a local variable never initialized\n",
            "markdown": "[TokenSilo._transferDeposits(address,address,address,int96[],uint256[]).i](contracts/beanstalk/silo/SiloFacet/TokenSilo.sol#L346) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/SiloFacet/TokenSilo.sol"
                },
                "region": {
                  "startLine": 346,
                  "endLine": 346
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2bbf1ce553e663b914c750a0388976a94513ad7301e654b8a63fc35972e5108d"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256)._i_scope_0 (contracts/mocks/curve/MockPlainCurve.sol#327) is a local variable never initialized\n",
            "markdown": "[MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256)._i_scope_0](contracts/mocks/curve/MockPlainCurve.sol#L327) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 327,
                  "endLine": 327
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2fa7f917502af6115524602d340241c9c238c264cf5b0e29c871f8bb76d63738"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_3 (contracts/beanstalk/farm/CurveFacet.sol#209) is a local variable never initialized\n",
            "markdown": "[CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_3](contracts/beanstalk/farm/CurveFacet.sol#L209) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 209
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "32fe9824c7768966521e9983a5fbf9241448e06d85d4b5cd7d598d97aed9faf5"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "CurveFacet.removeLiquidityImbalance(address,address,uint256[],uint256,LibTransfer.From,LibTransfer.To).i_scope_1 (contracts/beanstalk/farm/CurveFacet.sol#295) is a local variable never initialized\n",
            "markdown": "[CurveFacet.removeLiquidityImbalance(address,address,uint256[],uint256,LibTransfer.From,LibTransfer.To).i_scope_1](contracts/beanstalk/farm/CurveFacet.sol#L295) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 295,
                  "endLine": 295
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "37a95c48c2f01a13ea1932f9f9fcb5e74b16595b631df4bdaac2090586034e11"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockPlainCurve.get_D(uint256[2],uint256)._i_scope_0 (contracts/mocks/curve/MockPlainCurve.sol#283) is a local variable never initialized\n",
            "markdown": "[MockPlainCurve.get_D(uint256[2],uint256)._i_scope_0](contracts/mocks/curve/MockPlainCurve.sol#L283) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 283,
                  "endLine": 283
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3a04ffe3c61eebaec2babe0f7b87ed2953ddfc00608391ddffe726ec39dd9733"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibPolynomial.evaluatePolynomialIntegration(bytes,uint256,uint256,uint256,uint256).positiveSum (contracts/libraries/LibPolynomial.sol#112) is a local variable never initialized\n",
            "markdown": "[LibPolynomial.evaluatePolynomialIntegration(bytes,uint256,uint256,uint256,uint256).positiveSum](contracts/libraries/LibPolynomial.sol#L112) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPolynomial.sol"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3a2543c8a4ae7b566668d35c631d8153ec1904d04576270108c7b58dd8034518"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Fertilizer.balanceOfUnfertilized(address,uint256[]).i (contracts/tokens/Fertilizer/Fertilizer.sol#100) is a local variable never initialized\n",
            "markdown": "[Fertilizer.balanceOfUnfertilized(address,uint256[]).i](contracts/tokens/Fertilizer/Fertilizer.sol#L100) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer.sol"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3ab69efbd96a2dd06fa2a4885cf8893e639f80d1d3bc2e3089bbc0b9cbb02448"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2]).j (contracts/mocks/curve/MockMeta3Curve.sol#403) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2]).j](contracts/mocks/curve/MockMeta3Curve.sol#L403) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 403,
                  "endLine": 403
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "430ddf89eb64fa221235afde632f4e213dc3d215306b10b776d6424defa647e8"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibSilo._removeDepositsFromAccount(address,address,int96[],uint256[]).i (contracts/libraries/Silo/LibSilo.sol#562) is a local variable never initialized\n",
            "markdown": "[LibSilo._removeDepositsFromAccount(address,address,int96[],uint256[]).i](contracts/libraries/Silo/LibSilo.sol#L562) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibSilo.sol"
                },
                "region": {
                  "startLine": 562,
                  "endLine": 562
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "48470734e3e5e7e8641098409762dac5c5a608bfa6c2b308634d746939d17e93"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockSeasonFacet.resetState().i (contracts/mocks/mockFacets/MockSeasonFacet.sol#164) is a local variable never initialized\n",
            "markdown": "[MockSeasonFacet.resetState().i](contracts/mocks/mockFacets/MockSeasonFacet.sol#L164) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "496200d718aa7119f01f997df22a3864567d70a28424c2a9e64bc9f4a8e5f029"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibLegacyTokenSilo._claimWithdrawals(address,address,uint32[]).i (contracts/libraries/Silo/LibLegacyTokenSilo.sol#528) is a local variable never initialized\n",
            "markdown": "[LibLegacyTokenSilo._claimWithdrawals(address,address,uint32[]).i](contracts/libraries/Silo/LibLegacyTokenSilo.sol#L528) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibLegacyTokenSilo.sol"
                },
                "region": {
                  "startLine": 528,
                  "endLine": 528
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4a5c1bcdd69b6f95955a8b7d7c7bd20258aedb8bad1e5df4b57c4f22b8021a22"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i (contracts/beanstalk/farm/CurveFacet.sol#179) is a local variable never initialized\n",
            "markdown": "[CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i](contracts/beanstalk/farm/CurveFacet.sol#L179) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 179,
                  "endLine": 179
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4b98194b06022be9e086756a1b5c74eac4c54afe9eefcafff131dcd74e3e93c9"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.get_D(uint256[2],uint256)._i_scope_0 (contracts/mocks/curve/MockMeta3Curve.sol#439) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.get_D(uint256[2],uint256)._i_scope_0](contracts/mocks/curve/MockMeta3Curve.sol#L439) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 439,
                  "endLine": 439
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4c485f4334351acd32605d3d4aaf2a64040958d8107a74b30eea903c5bc9821f"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#487) is a local variable never initialized\n",
            "markdown": "[MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L487) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 487,
                  "endLine": 487
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4f58adc50a9f6dafc605a1ff83cd9299afa7a8e5db3cad6c23c018539d15123d"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MigrationFacet.getDepositLegacy(address,address,uint32).bdv_scope_1 (contracts/beanstalk/silo/MigrationFacet.sol#102) is a local variable never initialized\n",
            "markdown": "[MigrationFacet.getDepositLegacy(address,address,uint32).bdv_scope_1](contracts/beanstalk/silo/MigrationFacet.sol#L102) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/MigrationFacet.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "57bae23c77e6fb02bf6a58b6f0396032a6c858029dc3fc4c40979459c05a4be3"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.add_liquidity(uint256[2],uint256,address).i (contracts/mocks/curve/MockMeta3Curve.sol#220) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.add_liquidity(uint256[2],uint256,address).i](contracts/mocks/curve/MockMeta3Curve.sol#L220) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 220,
                  "endLine": 220
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "60dba9783e0c726eeefb8eaee2242bf16d65e7f3314fb42cc2d6b2aefdea1dfe"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address).i (contracts/mocks/curve/MockMeta3Curve.sol#315) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address).i](contracts/mocks/curve/MockMeta3Curve.sol#L315) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 315
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6104ce74f22e46434ed67ff113a9c2ba61a618c347dd52c44ecf69b4873c3349"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_5 (contracts/beanstalk/farm/CurveFacet.sol#221) is a local variable never initialized\n",
            "markdown": "[CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_5](contracts/beanstalk/farm/CurveFacet.sol#L221) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 221,
                  "endLine": 221
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "612fc6a5e61e5a4c3cf8f7c7f19437cff52d3d525c563b52bce32606d9bb5f82"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "SiloFacet.mowMultiple(address,address[]).i (contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#277) is a local variable never initialized\n",
            "markdown": "[SiloFacet.mowMultiple(address,address[]).i](contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#L277) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/SiloFacet/SiloFacet.sol"
                },
                "region": {
                  "startLine": 277,
                  "endLine": 277
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "688b65c8806d9066c7894cc2cf8cc9683d25fe93f9d741c52705f91876f76696"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockSeasonFacet.farmSunrises(uint256).i (contracts/mocks/mockFacets/MockSeasonFacet.sol#132) is a local variable never initialized\n",
            "markdown": "[MockSeasonFacet.farmSunrises(uint256).i](contracts/mocks/mockFacets/MockSeasonFacet.sol#L132) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "68fcb7dfa74b98cad67b184ed1f4d4cfdae183725f6efd05f66b1cf2dc649e3e"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256)._i_scope_0 (contracts/mocks/curve/MockMeta3Curve.sol#483) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256)._i_scope_0](contracts/mocks/curve/MockMeta3Curve.sol#L483) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 483,
                  "endLine": 483
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6ac8bf791e151b0fb0faf77fab6172e39653a7fd3091d43c05d04d88389722a4"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "TokenFacet.getExternalBalances(address,IERC20[]).i (contracts/beanstalk/farm/TokenFacet.sol#306) is a local variable never initialized\n",
            "markdown": "[TokenFacet.getExternalBalances(address,IERC20[]).i](contracts/beanstalk/farm/TokenFacet.sol#L306) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/TokenFacet.sol"
                },
                "region": {
                  "startLine": 306,
                  "endLine": 306
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7015fda6f1920277935faa73f2876533840254dd261de40898c4983ab03c7fd8"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "ApprovalFacet.permitDeposits(address,address,address[],uint256[],uint256,uint8,bytes32,bytes32).i (contracts/beanstalk/silo/ApprovalFacet.sol#126) is a local variable never initialized\n",
            "markdown": "[ApprovalFacet.permitDeposits(address,address,address[],uint256[],uint256,uint8,bytes32,bytes32).i](contracts/beanstalk/silo/ApprovalFacet.sol#L126) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/ApprovalFacet.sol"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7582f308aed0536958ecb981e9880b3bc3322fa064904597cf3cd50c7e54c77e"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "SqrtPriceMath.getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool).product_scope_0 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#49) is a local variable never initialized\n",
            "markdown": "[SqrtPriceMath.getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool).product_scope_0](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L49) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "78b83f62b414bbe87b27894a6b7d95c42848a4fb96844d145dce318214ef88a8"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_7 (contracts/beanstalk/farm/CurveFacet.sol#225) is a local variable never initialized\n",
            "markdown": "[CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_7](contracts/beanstalk/farm/CurveFacet.sol#L225) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7a3d441aef298a62376809cde69038a65acafa802a4f37af06de07ff65d1eb7d"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibPolynomial.evaluatePolynomialIntegration(bytes,uint256,uint256,uint256,uint256).degree (contracts/libraries/LibPolynomial.sol#119) is a local variable never initialized\n",
            "markdown": "[LibPolynomial.evaluatePolynomialIntegration(bytes,uint256,uint256,uint256,uint256).degree](contracts/libraries/LibPolynomial.sol#L119) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPolynomial.sol"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 119
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7cd869096f1df22ff7edcbe3a8e409ac35251a05a6a87d48f13b5ef1fc646b0b"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockSeasonFacet.resetPools(address[]).i (contracts/mocks/mockFacets/MockSeasonFacet.sol#246) is a local variable never initialized\n",
            "markdown": "[MockSeasonFacet.resetPools(address[]).i](contracts/mocks/mockFacets/MockSeasonFacet.sol#L246) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 246,
                  "endLine": 246
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7edfdada18376009d5c907a967e2745b928d29f416c5edc9b0b3a42376593bbb"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.remove_liquidity(uint256,uint256[2],address).i (contracts/mocks/curve/MockMeta3Curve.sol#280) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.remove_liquidity(uint256,uint256[2],address).i](contracts/mocks/curve/MockMeta3Curve.sol#L280) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 280
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7f5b15815aca2bb0d960bff3cff465eecefc1981760b7e67746be87f20ffd6c5"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibDiamond.removeFunctions(address,bytes4[]).selectorIndex (contracts/libraries/LibDiamond.sol#162) is a local variable never initialized\n",
            "markdown": "[LibDiamond.removeFunctions(address,bytes4[]).selectorIndex](contracts/libraries/LibDiamond.sol#L162) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 162,
                  "endLine": 162
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7fd0933aca07898d5cf2bdee1ac7c8d856165a402449002a1a0d6eeef7106904"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibPolynomial.evaluatePolynomialIntegration(bytes,uint256,uint256,uint256,uint256).negativeSum (contracts/libraries/LibPolynomial.sol#113) is a local variable never initialized\n",
            "markdown": "[LibPolynomial.evaluatePolynomialIntegration(bytes,uint256,uint256,uint256,uint256).negativeSum](contracts/libraries/LibPolynomial.sol#L113) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPolynomial.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8543d5bde16ab497b98cdf74fa1daad2305b0b989d29f537381140959d67d2dd"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256)._i (contracts/mocks/curve/MockMeta3Curve.sol#472) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256)._i](contracts/mocks/curve/MockMeta3Curve.sol#L472) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 472,
                  "endLine": 472
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "86d71655d4d0fd3d1f177a51085f149105edc4417540fb3edbb8644bf828677d"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibPolynomial.evaluatePolynomial(bytes,uint256,uint256,uint256).degree (contracts/libraries/LibPolynomial.sol#75) is a local variable never initialized\n",
            "markdown": "[LibPolynomial.evaluatePolynomial(bytes,uint256,uint256,uint256).degree](contracts/libraries/LibPolynomial.sol#L75) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPolynomial.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "86ed386ae2afd7ff0e3fab8ba62e9b7a4f646232b07e4b7822e370c4ad4c68f0"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.get_D(uint256[2],uint256)._j (contracts/mocks/curve/MockMeta3Curve.sol#441) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.get_D(uint256[2],uint256)._j](contracts/mocks/curve/MockMeta3Curve.sol#L441) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 441,
                  "endLine": 441
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8a804447cbb3a3a5b9ed0df8a3a1a613cfb54d8a7510efbef04d3b1ec7d1aa18"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibLegacyTokenSilo._mowAndMigrate(address,address[],uint32[][],uint256[][]).migrateData (contracts/libraries/Silo/LibLegacyTokenSilo.sol#301) is a local variable never initialized\n",
            "markdown": "[LibLegacyTokenSilo._mowAndMigrate(address,address[],uint32[][],uint256[][]).migrateData](contracts/libraries/Silo/LibLegacyTokenSilo.sol#L301) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibLegacyTokenSilo.sol"
                },
                "region": {
                  "startLine": 301,
                  "endLine": 301
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8a808b95c72bf0d92024c91f55593a684fc422d4792624ff771762a9683221d0"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.calc_token_amount(uint256[2],bool).i (contracts/mocks/curve/MockMeta3Curve.sol#538) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.calc_token_amount(uint256[2],bool).i](contracts/mocks/curve/MockMeta3Curve.sol#L538) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 538,
                  "endLine": 538
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "93e0fbd142fa5b92871fe2f24b3fd286a915551636123610fff7dc8f32210985"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibCurve.getYD(uint256,uint256,uint256[2],uint256)._i_scope_0 (contracts/libraries/Curve/LibCurve.sol#138) is a local variable never initialized\n",
            "markdown": "[LibCurve.getYD(uint256,uint256,uint256[2],uint256)._i_scope_0](contracts/libraries/Curve/LibCurve.sol#L138) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 138,
                  "endLine": 138
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "96c4f577fca28fe746877226a6adc2bfefc495d31257a9322365de1cdb97db3b"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Fertilizer.__update(address,uint256[],uint256).i (contracts/tokens/Fertilizer/Fertilizer.sol#78) is a local variable never initialized\n",
            "markdown": "[Fertilizer.__update(address,uint256[],uint256).i](contracts/tokens/Fertilizer/Fertilizer.sol#L78) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer.sol"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "972901ae5ba9b29114d9ecb68ff85e4cea78575aa454cc49443cc284a1ddefd5"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.add_liquidity(uint256[2],uint256,address).i_scope_1 (contracts/mocks/curve/MockMeta3Curve.sol#253) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.add_liquidity(uint256[2],uint256,address).i_scope_1](contracts/mocks/curve/MockMeta3Curve.sol#L253) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 253,
                  "endLine": 253
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9784218f625a4f3d037a675103727f42aa2d0ee171e655b850cb4ae73696ccf0"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "ERC1155Upgradeable._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).reason (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#407) is a local variable never initialized\n",
            "markdown": "[ERC1155Upgradeable._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).reason](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L407) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol"
                },
                "region": {
                  "startLine": 407,
                  "endLine": 407
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9d0ee0d40fbebddcdcec8653cffe6000eee8c3fe245bdabe4ba22fc7a83bca46"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockPlainCurve.get_D(uint256[2],uint256)._i (contracts/mocks/curve/MockPlainCurve.sol#276) is a local variable never initialized\n",
            "markdown": "[MockPlainCurve.get_D(uint256[2],uint256)._i](contracts/mocks/curve/MockPlainCurve.sol#L276) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a16d87ebcf286fccd979d09afec15f605493cbd1e399881c88858b60422c4a57"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockPlainCurve.calc_token_amount(uint256[2],bool).i (contracts/mocks/curve/MockPlainCurve.sol#345) is a local variable never initialized\n",
            "markdown": "[MockPlainCurve.calc_token_amount(uint256[2],bool).i](contracts/mocks/curve/MockPlainCurve.sol#L345) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 345,
                  "endLine": 345
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a17421f72719e0f2d73b4d0d32e3c6f8fd803c0a647120fd1e69ba5815fa309b"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibCurve.getD(uint256[2],uint256)._j (contracts/libraries/Curve/LibCurve.sol#100) is a local variable never initialized\n",
            "markdown": "[LibCurve.getD(uint256[2],uint256)._j](contracts/libraries/Curve/LibCurve.sol#L100) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a1ab275b839b4034ab98853735a4ec237bac83405c5dab66da50b67649510dd9"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24).flippedLower (contracts/mocks/uniswap/MockUniswapV3Pool.sol#401) is a local variable never initialized\n",
            "markdown": "[MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24).flippedLower](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L401) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 401,
                  "endLine": 401
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a1ba3eb12910569b83a4610f0c9f98a552b252c0df6f9c3b25022df679829704"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Fertilizer1155.__doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).reason (contracts/tokens/Fertilizer/Fertilizer1155.sol#136) is a local variable never initialized\n",
            "markdown": "[Fertilizer1155.__doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).reason](contracts/tokens/Fertilizer/Fertilizer1155.sol#L136) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer1155.sol"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 136
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a50b6d984c6d777c33b38d2c5cfe8351202594ecc0c26ab745eda08a2ab8f041"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256)._i (contracts/mocks/curve/MockPlainCurve.sol#316) is a local variable never initialized\n",
            "markdown": "[MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256)._i](contracts/mocks/curve/MockPlainCurve.sol#L316) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 316,
                  "endLine": 316
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a5b0a9066dce441b4a84e81674f014b45be220241281a3fac34e74ace48e7b40"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Fertilizer1155.__doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).reason (contracts/tokens/Fertilizer/Fertilizer1155.sol#113) is a local variable never initialized\n",
            "markdown": "[Fertilizer1155.__doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).reason](contracts/tokens/Fertilizer/Fertilizer1155.sol#L113) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer1155.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a61b715bfed06ec712f16936b330909d40d70a95dbf9a0ee30c9a78b16f6ed54"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "TokenFacet.getBalances(address,IERC20[]).i (contracts/beanstalk/farm/TokenFacet.sol#334) is a local variable never initialized\n",
            "markdown": "[TokenFacet.getBalances(address,IERC20[]).i](contracts/beanstalk/farm/TokenFacet.sol#L334) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/TokenFacet.sol"
                },
                "region": {
                  "startLine": 334,
                  "endLine": 334
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a8e907603002a433d42cce73937654badd7b33abb998c7f46dbfd08668ff97ea"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "SiloFacet.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes).i (contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#252) is a local variable never initialized\n",
            "markdown": "[SiloFacet.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes).i](contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#L252) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/SiloFacet/SiloFacet.sol"
                },
                "region": {
                  "startLine": 252,
                  "endLine": 252
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aa5c269a4ffa0b3c631477c645385c90de60c9755ab0618f0cbd42c31188576e"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "TokenFacet.getInternalBalances(address,IERC20[]).i (contracts/beanstalk/farm/TokenFacet.sol#279) is a local variable never initialized\n",
            "markdown": "[TokenFacet.getInternalBalances(address,IERC20[]).i](contracts/beanstalk/farm/TokenFacet.sol#L279) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/TokenFacet.sol"
                },
                "region": {
                  "startLine": 279,
                  "endLine": 279
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ac90afa0cd5f1600419d98cf788fe622f6a2c13ba7b4fee8102fabdadc7a348a"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibCurve.getD(uint256[2],uint256)._i_scope_0 (contracts/libraries/Curve/LibCurve.sol#98) is a local variable never initialized\n",
            "markdown": "[LibCurve.getD(uint256[2],uint256)._i_scope_0](contracts/libraries/Curve/LibCurve.sol#L98) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad10966ab87139626ce671756c2829a0685d82ea10a67113a8199b2f2f5ddf68"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "TokenFacet.getAllBalances(address,IERC20[]).i (contracts/beanstalk/farm/TokenFacet.sol#363) is a local variable never initialized\n",
            "markdown": "[TokenFacet.getAllBalances(address,IERC20[]).i](contracts/beanstalk/farm/TokenFacet.sol#L363) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/TokenFacet.sol"
                },
                "region": {
                  "startLine": 363,
                  "endLine": 363
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad2e70d3cb43328d0226a9d871230352f86f0da548b6cb50f23e8814062c4a77"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "CurveFacet.removeLiquidityImbalance(address,address,uint256[],uint256,LibTransfer.From,LibTransfer.To).i (contracts/beanstalk/farm/CurveFacet.sol#261) is a local variable never initialized\n",
            "markdown": "[CurveFacet.removeLiquidityImbalance(address,address,uint256[],uint256,LibTransfer.From,LibTransfer.To).i](contracts/beanstalk/farm/CurveFacet.sol#L261) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b18a88ee3ec218e3bda17faceb87d1286e889c9f2b7ac157155c66bcded24453"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_0 (contracts/beanstalk/farm/CurveFacet.sol#184) is a local variable never initialized\n",
            "markdown": "[CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_0](contracts/beanstalk/farm/CurveFacet.sol#L184) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 184,
                  "endLine": 184
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b501e5ce471fea3ebd10597dd8860fbfc74272cb146a012413d4326840a8969a"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibFunction.useClipboard(bytes,bytes,bytes[]).i (contracts/libraries/LibFunction.sol#90) is a local variable never initialized\n",
            "markdown": "[LibFunction.useClipboard(bytes,bytes,bytes[]).i](contracts/libraries/LibFunction.sol#L90) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibFunction.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b59594d82f0a56d229ca9f65e30599c9545c6449dd47304a4c68e682d9425005"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).response (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#396) is a local variable never initialized\n",
            "markdown": "[ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).response](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L396) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol"
                },
                "region": {
                  "startLine": 396,
                  "endLine": 396
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b5ed04205bf937594748e9cdd341c11fa41207a35e4597287fae0e925cf18dbc"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockSeasonFacet.rainSunrises(uint256).i (contracts/mocks/mockFacets/MockSeasonFacet.sol#62) is a local variable never initialized\n",
            "markdown": "[MockSeasonFacet.rainSunrises(uint256).i](contracts/mocks/mockFacets/MockSeasonFacet.sol#L62) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b6c0bb09f8c5e77d5b4db13e829800f4594b2aa03329b580e8bcbe96a75a9128"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "ERC1155Upgradeable._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).reason (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#384) is a local variable never initialized\n",
            "markdown": "[ERC1155Upgradeable._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).reason](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L384) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol"
                },
                "region": {
                  "startLine": 384,
                  "endLine": 384
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b8400f88f8cb687dcaa5fc37ffea0d9d06d6a575371ea0a77622b6114edec3c4"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibCurve.getY(uint256,uint256[2],uint256,uint256)._i_scope_0 (contracts/libraries/Curve/LibCurve.sol#74) is a local variable never initialized\n",
            "markdown": "[LibCurve.getY(uint256,uint256[2],uint256,uint256)._i_scope_0](contracts/libraries/Curve/LibCurve.sol#L74) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b96676ea97b2f7dd0af75e86896fda761b47baa3cb95cecbafe4e081bd340456"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibPolynomial.evaluatePolynomialIntegrationPiecewise(bytes,uint256,uint256).integrateToEnd (contracts/libraries/LibPolynomial.sol#146) is a local variable never initialized\n",
            "markdown": "[LibPolynomial.evaluatePolynomialIntegrationPiecewise(bytes,uint256,uint256).integrateToEnd](contracts/libraries/LibPolynomial.sol#L146) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPolynomial.sol"
                },
                "region": {
                  "startLine": 146,
                  "endLine": 146
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ba2b130f293a42db8fac1851c392d220aa895ad2b27093ac1007055a2601b888"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Order._createPodOrder(uint256,uint24,uint256,uint256).emptyPricingFunction (contracts/beanstalk/market/MarketplaceFacet/Order.sol#70) is a local variable never initialized\n",
            "markdown": "[Order._createPodOrder(uint256,uint24,uint256,uint256).emptyPricingFunction](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L70) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bb29de7d2ebe29d0af733243d0a0c070acaf0a085e63c4dc29997577c94570db"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockSeasonFacet.resetState().i_scope_0 (contracts/mocks/mockFacets/MockSeasonFacet.sol#169) is a local variable never initialized\n",
            "markdown": "[MockSeasonFacet.resetState().i_scope_0](contracts/mocks/mockFacets/MockSeasonFacet.sol#L169) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 169,
                  "endLine": 169
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bc5e16ecab0029ba8adf39441b15cfae310184db6716c2ee37dd9481c3e466a6"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address).i_scope_1 (contracts/mocks/curve/MockMeta3Curve.sol#344) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address).i_scope_1](contracts/mocks/curve/MockMeta3Curve.sol#L344) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 344
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bce13ae8bf696fd6f5b605dd03de3d6e829c89968fb2ecd3dfc843ee28b81141"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "ERC1155Upgradeable._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).response (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#403) is a local variable never initialized\n",
            "markdown": "[ERC1155Upgradeable._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).response](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L403) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol"
                },
                "region": {
                  "startLine": 403,
                  "endLine": 403
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "be435f6f216a93bdbd75f3a53b3448004a50b2603fbcef089235f91e300424b3"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibCurve.getYD(uint256,uint256,uint256[2],uint256)._i (contracts/libraries/Curve/LibCurve.sol#127) is a local variable never initialized\n",
            "markdown": "[LibCurve.getYD(uint256,uint256,uint256[2],uint256)._i](contracts/libraries/Curve/LibCurve.sol#L127) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c05f07750a6f9f7c44ce49054e54f69ec03da020385928a9456f2e89a8af8cd3"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibDiamond.diamondCut(IDiamondCut.FacetCut[],address,bytes).facetIndex (contracts/libraries/LibDiamond.sol#104) is a local variable never initialized\n",
            "markdown": "[LibDiamond.diamondCut(IDiamondCut.FacetCut[],address,bytes).facetIndex](contracts/libraries/LibDiamond.sol#L104) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c0ecf7eb70dbfffdcd2edeea45572421162da0f015be76ca79bb3f781bf7a1f0"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Sun.rewardBeans(uint256).newFertilized (contracts/beanstalk/sun/SeasonFacet/Sun.sol#91) is a local variable never initialized\n",
            "markdown": "[Sun.rewardBeans(uint256).newFertilized](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L91) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Sun.sol"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c112a31ba501edf7095f16b48b65411f3531539a05c59b370d5700573921f26a"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).reason (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#377) is a local variable never initialized\n",
            "markdown": "[ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).reason](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L377) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol"
                },
                "region": {
                  "startLine": 377,
                  "endLine": 377
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cfa26e7c033f1f7341e80e2da408f03a568d4acfb634cb8b14f44e492c15a718"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "DiamondLoupeFacet.facets().i (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#32) is a local variable never initialized\n",
            "markdown": "[DiamondLoupeFacet.facets().i](contracts/beanstalk/diamond/DiamondLoupeFacet.sol#L32) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/DiamondLoupeFacet.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d08da3796b1b956ca1bf483989a76900bd96590081631d53d6f597b8a7e119da"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibPolynomial.evaluatePolynomial(bytes,uint256,uint256,uint256).negativeSum (contracts/libraries/LibPolynomial.sol#69) is a local variable never initialized\n",
            "markdown": "[LibPolynomial.evaluatePolynomial(bytes,uint256,uint256,uint256).negativeSum](contracts/libraries/LibPolynomial.sol#L69) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPolynomial.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d1153a9580a448176a530bb20937bb4f0090baad4b2e6b66f40e2b8d4a851461"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockPlainCurve.add_liquidity(uint256[2],uint256).i_scope_0 (contracts/mocks/curve/MockPlainCurve.sol#163) is a local variable never initialized\n",
            "markdown": "[MockPlainCurve.add_liquidity(uint256[2],uint256).i_scope_0](contracts/mocks/curve/MockPlainCurve.sol#L163) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 163
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d63f349fb71bfdde83c470955d04b0d0e4aa1ee6a818b59446d15b8da5fa5f4b"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MigrationFacet.getDepositLegacy(address,address,uint32).amount_scope_0 (contracts/beanstalk/silo/MigrationFacet.sol#102) is a local variable never initialized\n",
            "markdown": "[MigrationFacet.getDepositLegacy(address,address,uint32).amount_scope_0](contracts/beanstalk/silo/MigrationFacet.sol#L102) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/MigrationFacet.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "db42eaf274412df13fb5be57d9fd7adb53b0528bffcdfdca4b6e6a0a45ded7cd"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.get_D(uint256[2],uint256)._i (contracts/mocks/curve/MockMeta3Curve.sol#432) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.get_D(uint256[2],uint256)._i](contracts/mocks/curve/MockMeta3Curve.sol#L432) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 432,
                  "endLine": 432
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dc8ff5a983a157c291c9b128751bb1c551f90426fbdb3dffb909e0f00ea0e18b"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.add_liquidity(uint256[2],uint256,address).i_scope_0 (contracts/mocks/curve/MockMeta3Curve.sol#234) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.add_liquidity(uint256[2],uint256,address).i_scope_0](contracts/mocks/curve/MockMeta3Curve.sol#L234) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 234
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e12fcc9466acda14927be1b62248617bc2441b6290c615fab38d86d64661fb01"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2]).j (contracts/mocks/curve/MockPlainCurve.sol#236) is a local variable never initialized\n",
            "markdown": "[MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2]).j](contracts/mocks/curve/MockPlainCurve.sol#L236) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 236,
                  "endLine": 236
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e182e80aa6744c27187964718d3d568b82d031cc1aab093e16a9044f469ba363"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockPlainCurve.get_D(uint256[2],uint256)._j (contracts/mocks/curve/MockPlainCurve.sol#285) is a local variable never initialized\n",
            "markdown": "[MockPlainCurve.get_D(uint256[2],uint256)._j](contracts/mocks/curve/MockPlainCurve.sol#L285) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 285,
                  "endLine": 285
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e233d3797d9fbdffcb9db1510e809de38660a14584e693ade73389b3454f423d"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibDiamond.replaceFunctions(address,bytes4[]).selectorIndex (contracts/libraries/LibDiamond.sol#147) is a local variable never initialized\n",
            "markdown": "[LibDiamond.replaceFunctions(address,bytes4[]).selectorIndex](contracts/libraries/LibDiamond.sol#L147) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e5e41fdc060585bc65eefb60fcfb6f878f4ae724f9ad59891d182f79fbc25064"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "ConvertFacet._withdrawTokens(address,int96[],uint256[],uint256).a (contracts/beanstalk/silo/ConvertFacet.sol#257) is a local variable never initialized\n",
            "markdown": "[ConvertFacet._withdrawTokens(address,int96[],uint256[],uint256).a](contracts/beanstalk/silo/ConvertFacet.sol#L257) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/ConvertFacet.sol"
                },
                "region": {
                  "startLine": 257,
                  "endLine": 257
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e63963541179984611dc77b5bfa7810afa39ad0999e3f008bd5e68302698e541"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibFertilizer.addUnderlying(uint256,uint256).newDepositedBeans (contracts/libraries/LibFertilizer.sol#75) is a local variable never initialized\n",
            "markdown": "[LibFertilizer.addUnderlying(uint256,uint256).newDepositedBeans](contracts/libraries/LibFertilizer.sol#L75) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibFertilizer.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e78d6b3331cbe5ad9408bde86ffe7538ab4f7076731ee0a688b91da36a3f559e"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).reason (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#400) is a local variable never initialized\n",
            "markdown": "[ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).reason](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L400) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol"
                },
                "region": {
                  "startLine": 400,
                  "endLine": 400
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e86e07c07c456329aac10a8f790199383aea15e762b4a7bdcd69605e92974968"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Listing._createPodListing(uint256,uint256,uint256,uint24,uint256,uint256,LibTransfer.To).f (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#79) is a local variable never initialized\n",
            "markdown": "[Listing._createPodListing(uint256,uint256,uint256,uint24,uint256,uint256,LibTransfer.To).f](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L79) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Listing.sol"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e9f4178a56fea58f31785c12281664cdc1db49521f869ed45a525ce666399409"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).response (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#373) is a local variable never initialized\n",
            "markdown": "[ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).response](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L373) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol"
                },
                "region": {
                  "startLine": 373,
                  "endLine": 373
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ea5d87d7eb24d66fd14851d006b7475958602f14122f9057248c2f3f47ebb6d7"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#488) is a local variable never initialized\n",
            "markdown": "[MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L488) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 488,
                  "endLine": 488
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ea86f9a48edbe74b4b4f24b1d92cd328a33aac47b0459fe759fdfbe093efdf1d"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2])._i_scope_0 (contracts/mocks/curve/MockMeta3Curve.sol#526) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2])._i_scope_0](contracts/mocks/curve/MockMeta3Curve.sol#L526) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 526,
                  "endLine": 526
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eb02b308eb6458fa974ed94346b65122338c8508c32fa771e2fa4e5ead03f2e9"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Weather.sop().newHarvestable (contracts/beanstalk/sun/SeasonFacet/Weather.sol#264) is a local variable never initialized\n",
            "markdown": "[Weather.sop().newHarvestable](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L264) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Weather.sol"
                },
                "region": {
                  "startLine": 264,
                  "endLine": 264
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ecef897901bf9dc933ef8d3a8c25eccf754d3a7d73ba3f68390fa31eaea4a69f"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Fertilizer1155.__doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).response (contracts/tokens/Fertilizer/Fertilizer1155.sol#131) is a local variable never initialized\n",
            "markdown": "[Fertilizer1155.__doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).response](contracts/tokens/Fertilizer/Fertilizer1155.sol#L131) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer1155.sol"
                },
                "region": {
                  "startLine": 131,
                  "endLine": 131
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ee04823ec3d26c9c89921a393d48544bd07fd72b29fc1b885aa0462f86c92ff2"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockPlainCurve.add_liquidity(uint256[2],uint256).i (contracts/mocks/curve/MockPlainCurve.sol#148) is a local variable never initialized\n",
            "markdown": "[MockPlainCurve.add_liquidity(uint256[2],uint256).i](contracts/mocks/curve/MockPlainCurve.sol#L148) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 148,
                  "endLine": 148
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f2b19ec893b93b57269cde3d80f7914faf0cd7f981e1fd7827551328a14b19d9"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockMeta3Curve._xp_mem(uint256[2],uint256[2]).i (contracts/mocks/curve/MockMeta3Curve.sol#423) is a local variable never initialized\n",
            "markdown": "[MockMeta3Curve._xp_mem(uint256[2],uint256[2]).i](contracts/mocks/curve/MockMeta3Curve.sol#L423) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 423,
                  "endLine": 423
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f33258567bf94d77d72c507c0261d9466f5214877c781a37db37b67e986b52e7"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "LibPolynomial.evaluatePolynomial(bytes,uint256,uint256,uint256).positiveSum (contracts/libraries/LibPolynomial.sol#68) is a local variable never initialized\n",
            "markdown": "[LibPolynomial.evaluatePolynomial(bytes,uint256,uint256,uint256).positiveSum](contracts/libraries/LibPolynomial.sol#L68) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPolynomial.sol"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f3a0d989dac06be85a236363a64a2012500cdc2e979df43c4c7e4b6c30663527"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "CurveFacet.addLiquidity(address,address,uint256[],uint256,LibTransfer.From,LibTransfer.To).i (contracts/beanstalk/farm/CurveFacet.sol#110) is a local variable never initialized\n",
            "markdown": "[CurveFacet.addLiquidity(address,address,uint256[],uint256,LibTransfer.From,LibTransfer.To).i](contracts/beanstalk/farm/CurveFacet.sol#L110) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f480c0bddbbda829b45089f69c3d4a4c7eb3d9d6250877d795b6e388c9041bd0"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Fertilizer1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes).i (contracts/tokens/Fertilizer/Fertilizer1155.sol#67) is a local variable never initialized\n",
            "markdown": "[Fertilizer1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes).i](contracts/tokens/Fertilizer/Fertilizer1155.sol#L67) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer1155.sol"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f603c213f7df570fd974534d0195894d4835beece7208249348fb5680ecc6786"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MetadataFacet.getDepositMetadata(uint256).depositMetadata (contracts/beanstalk/metadata/MetadataFacet.sol#71) is a local variable never initialized\n",
            "markdown": "[MetadataFacet.getDepositMetadata(uint256).depositMetadata](contracts/beanstalk/metadata/MetadataFacet.sol#L71) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/metadata/MetadataFacet.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f7583076f5b8bb2965d5af0649551708fac1d692d8903ff147d84cd6b8d27afb"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "SqrtPriceMath.getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool).product (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#39) is a local variable never initialized\n",
            "markdown": "[SqrtPriceMath.getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool).product](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L39) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ffac0bf9427e7550774ec11a83c21e1bbe58b26e50a0612258be0c933813e076"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "MockPlainCurve.add_liquidity(uint256[2],uint256).i_scope_1 (contracts/mocks/curve/MockPlainCurve.sol#182) is a local variable never initialized\n",
            "markdown": "[MockPlainCurve.add_liquidity(uint256[2],uint256).i_scope_1](contracts/mocks/curve/MockPlainCurve.sol#L182) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ffaf5c1222ee557c990c0982353790022568350af1399765c33fca2d8e8baa07"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC1155Upgradeable._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#392-413) ignores return value by IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator,from,ids,amounts,data) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#403-411)\n",
            "markdown": "[ERC1155Upgradeable._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L392-L413) ignores return value by [IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator,from,ids,amounts,data)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L403-L411)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol"
                },
                "region": {
                  "startLine": 392,
                  "endLine": 413
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e76767a77d375163a030f3c55ad87d9c71be80ddc0792de7b80fcc836a7a386"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "MockCurveZap.approve() (contracts/mocks/curve/MockCurveZap.sol#21-24) ignores return value by IERC20(BEAN).approve(BEAN_METAPOOL,type()(uint256).max) (contracts/mocks/curve/MockCurveZap.sol#22)\n",
            "markdown": "[MockCurveZap.approve()](contracts/mocks/curve/MockCurveZap.sol#L21-L24) ignores return value by [IERC20(BEAN).approve(BEAN_METAPOOL,type()(uint256).max)](contracts/mocks/curve/MockCurveZap.sol#L22)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveZap.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "12e509e9c9c594442a0076ec89518d751161be41326c4b13ef765f3b971a7b76"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC721._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#387-402) ignores return value by _holderTokens[from].remove(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#396)\n",
            "markdown": "[ERC721._transfer(address,address,uint256)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L387-L402) ignores return value by [_holderTokens[from].remove(tokenId)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L396)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol"
                },
                "region": {
                  "startLine": 387,
                  "endLine": 402
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "15ca87e106ec37f07cb344aa88d44fe2cd297fb0cef2600e08cc06ec8a57945a"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC721._burn(uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#356-374) ignores return value by _tokenOwners.remove(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#371)\n",
            "markdown": "[ERC721._burn(uint256)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L356-L374) ignores return value by [_tokenOwners.remove(tokenId)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L371)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol"
                },
                "region": {
                  "startLine": 356,
                  "endLine": 374
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "177ec76ce0418e398f0f1cd01be5eab00daef28a9c4f11e8b4a27e4428b251b6"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "FertilizerFacet.addFertilizerOwner(uint128,uint128,uint256) (contracts/beanstalk/barn/FertilizerFacet.sol#61-73) ignores return value by LibFertilizer.addFertilizer(id,amount,minLP) (contracts/beanstalk/barn/FertilizerFacet.sol#72)\n",
            "markdown": "[FertilizerFacet.addFertilizerOwner(uint128,uint128,uint256)](contracts/beanstalk/barn/FertilizerFacet.sol#L61-L73) ignores return value by [LibFertilizer.addFertilizer(id,amount,minLP)](contracts/beanstalk/barn/FertilizerFacet.sol#L72)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/barn/FertilizerFacet.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1d63ec6b9b032cca511e1bc6ddc344b528956bf6a7355c5d97c61da7d5d2f7f2"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "CurveFacet.exchangeUnderlying(address,address,address,uint256,uint256,LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/CurveFacet.sol#68-98) ignores return value by ICurvePoolR(pool).exchange_underlying(i,j,amountIn,minAmountOut,msg.sender) (contracts/beanstalk/farm/CurveFacet.sol#82-88)\n",
            "markdown": "[CurveFacet.exchangeUnderlying(address,address,address,uint256,uint256,LibTransfer.From,LibTransfer.To)](contracts/beanstalk/farm/CurveFacet.sol#L68-L98) ignores return value by [ICurvePoolR(pool).exchange_underlying(i,j,amountIn,minAmountOut,msg.sender)](contracts/beanstalk/farm/CurveFacet.sol#L82-L88)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 98
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "22d61f9cca84d72ba7bd36628af91a4ab9006439a0b26859c5bc9f4945f62e0b"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC721._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#387-402) ignores return value by _tokenOwners.set(tokenId,to) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#399)\n",
            "markdown": "[ERC721._transfer(address,address,uint256)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L387-L402) ignores return value by [_tokenOwners.set(tokenId,to)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L399)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol"
                },
                "region": {
                  "startLine": 387,
                  "endLine": 402
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2f343532dd5d8f179439384098062d4fe6038dc95a41eb7e29136cfc668741c1"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#362-383) ignores return value by IERC1155Receiver(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#373-381)\n",
            "markdown": "[ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L362-L383) ignores return value by [IERC1155Receiver(to).onERC1155Received(operator,from,id,amount,data)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L373-L381)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol"
                },
                "region": {
                  "startLine": 362,
                  "endLine": 383
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "302c71e0619b75d74ecb5873f7be32510af33ba21da9d2fec6662300b9ef7252"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC1155Upgradeable._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#369-390) ignores return value by IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#380-388)\n",
            "markdown": "[ERC1155Upgradeable._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L369-L390) ignores return value by [IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L380-L388)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol"
                },
                "region": {
                  "startLine": 369,
                  "endLine": 390
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "34dfdbdf1a9031cf5776adc8485716364be2716e633c058089aebc1a27716d3c"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "TokenFacet.transferInternalTokenFrom(IERC20,address,address,uint256,LibTransfer.To) (contracts/beanstalk/farm/TokenFacet.sol#77-96) ignores return value by LibTransfer.transferToken(token,sender,recipient,amount,LibTransfer.From.INTERNAL,toMode) (contracts/beanstalk/farm/TokenFacet.sol#84-91)\n",
            "markdown": "[TokenFacet.transferInternalTokenFrom(IERC20,address,address,uint256,LibTransfer.To)](contracts/beanstalk/farm/TokenFacet.sol#L77-L96) ignores return value by [LibTransfer.transferToken(token,sender,recipient,amount,LibTransfer.From.INTERNAL,toMode)](contracts/beanstalk/farm/TokenFacet.sol#L84-L91)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/TokenFacet.sol"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "425d71751bf01c231000de6dfc172b1a9f57d5ccec58a9b492c9cc460446c173"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#385-406) ignores return value by IERC1155Receiver(to).onERC1155BatchReceived(operator,from,ids,amounts,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#396-404)\n",
            "markdown": "[ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L385-L406) ignores return value by [IERC1155Receiver(to).onERC1155BatchReceived(operator,from,ids,amounts,data)](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L396-L404)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol"
                },
                "region": {
                  "startLine": 385,
                  "endLine": 406
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "43615d7252bc13a10409feeb3839e0be7a5e973816a2b25bc5e3090ba2132ce0"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "MockCurveZap.add_liquidity(address,uint256[4],uint256) (contracts/mocks/curve/MockCurveZap.sol#26-32) ignores return value by MockToken(THREE_CURVE).mint(address(this),threeCrvAmount) (contracts/mocks/curve/MockCurveZap.sol#30)\n",
            "markdown": "[MockCurveZap.add_liquidity(address,uint256[4],uint256)](contracts/mocks/curve/MockCurveZap.sol#L26-L32) ignores return value by [MockToken(THREE_CURVE).mint(address(this),threeCrvAmount)](contracts/mocks/curve/MockCurveZap.sol#L30)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveZap.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4aa4c472a8e8ec172b659d3934edcef327d0cec48fce6ab3e9f59e851a05bcae"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "MockInitDiamond.init() (contracts/mocks/MockInitDiamond.sol#25-61) ignores return value by C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#27)\n",
            "markdown": "[MockInitDiamond.init()](contracts/mocks/MockInitDiamond.sol#L25-L61) ignores return value by [C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max)](contracts/mocks/MockInitDiamond.sol#L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockInitDiamond.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "544e1070b28b63112f0753b82be9f855d4196e5b5999703b209957072f4aa06e"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC721._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#387-402) ignores return value by _holderTokens[to].add(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#397)\n",
            "markdown": "[ERC721._transfer(address,address,uint256)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L387-L402) ignores return value by [_holderTokens[to].add(tokenId)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L397)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol"
                },
                "region": {
                  "startLine": 387,
                  "endLine": 402
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "698fed8e96850f22d82ee0e452b507c57dc9ece4ffebe9a8b7185b300f87412a"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC721._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#333-344) ignores return value by _tokenOwners.set(tokenId,to) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#341)\n",
            "markdown": "[ERC721._mint(address,uint256)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L333-L344) ignores return value by [_tokenOwners.set(tokenId,to)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L341)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol"
                },
                "region": {
                  "startLine": 333,
                  "endLine": 344
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6abe4378c250d736122528ebbc374edcfab6a6d559e7dddc08b8d85a905325df"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC721._burn(uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#356-374) ignores return value by _holderTokens[owner].remove(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#369)\n",
            "markdown": "[ERC721._burn(uint256)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L356-L374) ignores return value by [_holderTokens[owner].remove(tokenId)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L369)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol"
                },
                "region": {
                  "startLine": 356,
                  "endLine": 374
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6b6b38b0fe0dc978ed118b835eaeb07f5ac814b6fc84d08b4ecbdc2a5365748e"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "MockAdminFacet.forceSunrise() (contracts/mocks/mockFacets/MockAdminFacet.sol#37-41) ignores return value by sf.sunrise() (contracts/mocks/mockFacets/MockAdminFacet.sol#40)\n",
            "markdown": "[MockAdminFacet.forceSunrise()](contracts/mocks/mockFacets/MockAdminFacet.sol#L37-L41) ignores return value by [sf.sunrise()](contracts/mocks/mockFacets/MockAdminFacet.sol#L40)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockAdminFacet.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6bf12823a4a22c1a4f326f82bd5690b9b3e05cfced83e2c81100b067368aeeb0"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "InitDiamond.init() (contracts/beanstalk/init/InitDiamond.sol#31-69) ignores return value by C.bean().approve(C.curveZapAddress(),type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#39)\n",
            "markdown": "[InitDiamond.init()](contracts/beanstalk/init/InitDiamond.sol#L31-L69) ignores return value by [C.bean().approve(C.curveZapAddress(),type()(uint256).max)](contracts/beanstalk/init/InitDiamond.sol#L39)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitDiamond.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7682963875d62b93e6b20781c8d7ecbc43a33507879dd49730645e6f56e4f9a1"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "MockSiloFacet.mockUnripeLPDeposit(uint256,uint32,uint256,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#40-56) ignores return value by LibTransfer.receiveToken(IERC20(C.UNRIPE_LP),unripeLP,msg.sender,LibTransfer.From.EXTERNAL) (contracts/mocks/mockFacets/MockSiloFacet.sol#55)\n",
            "markdown": "[MockSiloFacet.mockUnripeLPDeposit(uint256,uint32,uint256,uint256)](contracts/mocks/mockFacets/MockSiloFacet.sol#L40-L56) ignores return value by [LibTransfer.receiveToken(IERC20(C.UNRIPE_LP),unripeLP,msg.sender,LibTransfer.From.EXTERNAL)](contracts/mocks/mockFacets/MockSiloFacet.sol#L55)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 56
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "80bf986b1e015b20e5b61c7dae5d28a6f5444df769a5c5052c506e4ad0398d90"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "MockInitDiamond.init() (contracts/mocks/MockInitDiamond.sol#25-61) ignores return value by C.bean().approve(C.curveZapAddress(),type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#28)\n",
            "markdown": "[MockInitDiamond.init()](contracts/mocks/MockInitDiamond.sol#L25-L61) ignores return value by [C.bean().approve(C.curveZapAddress(),type()(uint256).max)](contracts/mocks/MockInitDiamond.sol#L28)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockInitDiamond.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8765d595e61df2e8f60c72f3c867e75118f6dd28bc968b0b72e30d8ffd8d37b4"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "MockCurveZap.approve() (contracts/mocks/curve/MockCurveZap.sol#21-24) ignores return value by IERC20(THREE_CURVE).approve(BEAN_METAPOOL,type()(uint256).max) (contracts/mocks/curve/MockCurveZap.sol#23)\n",
            "markdown": "[MockCurveZap.approve()](contracts/mocks/curve/MockCurveZap.sol#L21-L24) ignores return value by [IERC20(THREE_CURVE).approve(BEAN_METAPOOL,type()(uint256).max)](contracts/mocks/curve/MockCurveZap.sol#L23)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveZap.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8b15042c4fe3bf674cbec5a01710fb09a4561318649c3fa5651352a2c1708043"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "MockInitDiamond.init() (contracts/mocks/MockInitDiamond.sol#25-61) ignores return value by C.usdc().approve(C.curveZapAddress(),type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#29)\n",
            "markdown": "[MockInitDiamond.init()](contracts/mocks/MockInitDiamond.sol#L25-L61) ignores return value by [C.usdc().approve(C.curveZapAddress(),type()(uint256).max)](contracts/mocks/MockInitDiamond.sol#L29)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockInitDiamond.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a29b456d867375cdcf426f74632b4948b198e594eb0661737cecdd2007c4142c"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC721._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#333-344) ignores return value by _holderTokens[to].add(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#339)\n",
            "markdown": "[ERC721._mint(address,uint256)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L333-L344) ignores return value by [_holderTokens[to].add(tokenId)](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L339)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol"
                },
                "region": {
                  "startLine": 333,
                  "endLine": 344
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a4f405edb567b9295359acd1d012fa4e54344eafa74c35614f606e34df790e4e"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "FertilizerPreMint.initialize(string) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#37-40) ignores return value by IERC20(WETH).approve(SWAP_ROUTER,type()(uint256).max) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#38)\n",
            "markdown": "[FertilizerPreMint.initialize(string)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L37-L40) ignores return value by [IERC20(WETH).approve(SWAP_ROUTER,type()(uint256).max)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L38)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/FertilizerPreMint.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bdd624ce5c0a61d008c31b4c2a31f2f210005a14c4e0dde4113a388502bc62f8"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Fertilizer1155.__doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes) (contracts/tokens/Fertilizer/Fertilizer1155.sol#121-142) ignores return value by IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator,from,ids,amounts,data) (contracts/tokens/Fertilizer/Fertilizer1155.sol#130-140)\n",
            "markdown": "[Fertilizer1155.__doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes)](contracts/tokens/Fertilizer/Fertilizer1155.sol#L121-L142) ignores return value by [IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator,from,ids,amounts,data)](contracts/tokens/Fertilizer/Fertilizer1155.sol#L130-L140)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer1155.sol"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 142
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3015ace222faaf47d4aadfb67014f6a43a81897629272134392e1d767645e51"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "InitDiamond.init() (contracts/beanstalk/init/InitDiamond.sol#31-69) ignores return value by C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#38)\n",
            "markdown": "[InitDiamond.init()](contracts/beanstalk/init/InitDiamond.sol#L31-L69) ignores return value by [C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max)](contracts/beanstalk/init/InitDiamond.sol#L38)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitDiamond.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d6094247c9ef7216f8fe17a9ee300a9302f0be2322868ea0672a0c8cb156a556"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "TokenFacet.transferToken(IERC20,address,uint256,LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/TokenFacet.sol#56-71) ignores return value by LibTransfer.transferToken(token,msg.sender,recipient,amount,fromMode,toMode) (contracts/beanstalk/farm/TokenFacet.sol#63-70)\n",
            "markdown": "[TokenFacet.transferToken(IERC20,address,uint256,LibTransfer.From,LibTransfer.To)](contracts/beanstalk/farm/TokenFacet.sol#L56-L71) ignores return value by [LibTransfer.transferToken(token,msg.sender,recipient,amount,fromMode,toMode)](contracts/beanstalk/farm/TokenFacet.sol#L63-L70)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/TokenFacet.sol"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e3e12e1bf0029825dda89aec797b1ba46d3eaac8a10b05d8e42a975844e29032"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "InitDiamond.init() (contracts/beanstalk/init/InitDiamond.sol#31-69) ignores return value by C.usdc().approve(C.curveZapAddress(),type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#40)\n",
            "markdown": "[InitDiamond.init()](contracts/beanstalk/init/InitDiamond.sol#L31-L69) ignores return value by [C.usdc().approve(C.curveZapAddress(),type()(uint256).max)](contracts/beanstalk/init/InitDiamond.sol#L40)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitDiamond.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e90a31dd6b06b9f101073dd9b302bd2e26976a9376bea2c1040fa69f06142220"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "CurveFacet.exchange(address,address,address,address,uint256,uint256,LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/CurveFacet.sol#33-66) ignores return value by ICurvePoolR(pool).exchange(i,j,amountIn,minAmountOut,msg.sender) (contracts/beanstalk/farm/CurveFacet.sol#52)\n",
            "markdown": "[CurveFacet.exchange(address,address,address,address,uint256,uint256,LibTransfer.From,LibTransfer.To)](contracts/beanstalk/farm/CurveFacet.sol#L33-L66) ignores return value by [ICurvePoolR(pool).exchange(i,j,amountIn,minAmountOut,msg.sender)](contracts/beanstalk/farm/CurveFacet.sol#L52)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f42d55df3bcca9c117c0974ca6ea854bfb4b97cf9b874ec6d0ae3687f11f3d9e"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Fertilizer1155.__doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes) (contracts/tokens/Fertilizer/Fertilizer1155.sol#100-119) ignores return value by IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data) (contracts/tokens/Fertilizer/Fertilizer1155.sol#109-117)\n",
            "markdown": "[Fertilizer1155.__doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes)](contracts/tokens/Fertilizer/Fertilizer1155.sol#L100-L119) ignores return value by [IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data)](contracts/tokens/Fertilizer/Fertilizer1155.sol#L109-L117)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer1155.sol"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 119
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fbc00d5c87dbeee92b07385df9c712f4baf0a4faa3f596edc21c4a1b9cfab3b4"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "CurveFacet.removeLiquidityOneToken(address,address,address,uint256,uint256,LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/CurveFacet.sol#306-354) ignores return value by ICurvePoolR(pool).remove_liquidity_one_coin(amountIn,i,minAmountOut,msg.sender) (contracts/beanstalk/farm/CurveFacet.sol#340-345)\n",
            "markdown": "[CurveFacet.removeLiquidityOneToken(address,address,address,uint256,uint256,LibTransfer.From,LibTransfer.To)](contracts/beanstalk/farm/CurveFacet.sol#L306-L354) ignores return value by [ICurvePoolR(pool).remove_liquidity_one_coin(amountIn,i,minAmountOut,msg.sender)](contracts/beanstalk/farm/CurveFacet.sol#L340-L345)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 306,
                  "endLine": 354
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fe6d6a61fb39a498d2aba9670ec7a1a8101f06066491d41c01bff0c7f4efe0c6"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "MockSiloFacet.mockUnripeBeanDeposit(uint32,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#58-70) ignores return value by LibTransfer.receiveToken(IERC20(C.UNRIPE_BEAN),amount,msg.sender,LibTransfer.From.EXTERNAL) (contracts/mocks/mockFacets/MockSiloFacet.sol#69)\n",
            "markdown": "[MockSiloFacet.mockUnripeBeanDeposit(uint32,uint256)](contracts/mocks/mockFacets/MockSiloFacet.sol#L58-L70) ignores return value by [LibTransfer.receiveToken(IERC20(C.UNRIPE_BEAN),amount,msg.sender,LibTransfer.From.EXTERNAL)](contracts/mocks/mockFacets/MockSiloFacet.sol#L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ffd0be5a5f22f8003b87c0a92067bbf9051c2c795465a159ab1b8745122cd3ad"
          }
        },
        {
          "ruleId": "1-0-write-after-write",
          "message": {
            "text": "LibUnripeSilo.unripeLPDeposit(address,uint32).bdv (contracts/libraries/Silo/LibUnripeSilo.sol#182) is written in both\n\t(amount,bdv) = getBeanEthUnripeLP(account,season) (contracts/libraries/Silo/LibUnripeSilo.sol#188)\n\tbdv = uint256(s.a[account].legacyDeposits[C.UNRIPE_LP][season].bdv).add(legBdv) (contracts/libraries/Silo/LibUnripeSilo.sol#205-207)\n",
            "markdown": "[LibUnripeSilo.unripeLPDeposit(address,uint32).bdv](contracts/libraries/Silo/LibUnripeSilo.sol#L182) is written in both\n\t[(amount,bdv) = getBeanEthUnripeLP(account,season)](contracts/libraries/Silo/LibUnripeSilo.sol#L188)\n\t[bdv = uint256(s.a[account].legacyDeposits[C.UNRIPE_LP][season].bdv).add(legBdv)](contracts/libraries/Silo/LibUnripeSilo.sol#L205-L207)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibUnripeSilo.sol"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "280594535456137ce1ebcc0af26cd0cfe2ef1774cd4ad574f7606e50ca46b3a6"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockSeasonFacet.setCurrentSeasonE(uint32).season (contracts/mocks/mockFacets/MockSeasonFacet.sol#198) shadows:\n\t- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71) (function)\n",
            "markdown": "[MockSeasonFacet.setCurrentSeasonE(uint32).season](contracts/mocks/mockFacets/MockSeasonFacet.sol#L198) shadows:\n\t- [SeasonFacet.season()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L69-L71) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 198
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0aea10d4299494418e33883c9312580e3f961c06b8eda3e5f04471c1bf708c1c"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockToken.constructor(string,string).symbol (contracts/mocks/MockToken.sol#20) shadows:\n\t- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#72-74) (function)\n",
            "markdown": "[MockToken.constructor(string,string).symbol](contracts/mocks/MockToken.sol#L20) shadows:\n\t- [ERC20.symbol()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L72-L74) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockToken.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0fede2ff954b3f2b315a8972547fc72c40fb7f99974483c79d485971c96461ca"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "BeanstalkPrice.price().i (contracts/ecosystem/price/BeanstalkPrice.sol#21) shadows:\n\t- CurvePrice.i (contracts/ecosystem/price/CurvePrice.sol#32) (state variable)\n",
            "markdown": "[BeanstalkPrice.price().i](contracts/ecosystem/price/BeanstalkPrice.sol#L21) shadows:\n\t- [CurvePrice.i](contracts/ecosystem/price/CurvePrice.sol#L32) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ecosystem/price/BeanstalkPrice.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "13b811fd8c77639f48b52062d2dc4b52e21bd6ed2ae4a98ab7b1a24e8b5b908a"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "ApprovalFacet.permitDeposits(address,address,address[],uint256[],uint256,uint8,bytes32,bytes32).s (contracts/beanstalk/silo/ApprovalFacet.sol#123) shadows:\n\t- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)\n",
            "markdown": "[ApprovalFacet.permitDeposits(address,address,address[],uint256[],uint256,uint8,bytes32,bytes32).s](contracts/beanstalk/silo/ApprovalFacet.sol#L123) shadows:\n\t- [ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/ApprovalFacet.sol"
                },
                "region": {
                  "startLine": 123,
                  "endLine": 123
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "34064538297931f9e17d15b3f4166d553349acb1ca919ab35bede918eb9aac8d"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockSiloFacet.addDepositToAccountLegacy(address,address,uint32,uint256,uint256).s (contracts/mocks/mockFacets/MockSiloFacet.sol#196) shadows:\n\t- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)\n",
            "markdown": "[MockSiloFacet.addDepositToAccountLegacy(address,address,uint32,uint256,uint256).s](contracts/mocks/mockFacets/MockSiloFacet.sol#L196) shadows:\n\t- [ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "575950ceb52fadc8930430d26890d6d39f3750b8bf997189ab115392d3c965b7"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "LegacyClaimWithdrawalFacet.getWithdrawal(address,address,uint32).s (contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol#71) shadows:\n\t- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)\n",
            "markdown": "[LegacyClaimWithdrawalFacet.getWithdrawal(address,address,uint32).s](contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol#L71) shadows:\n\t- [ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "58045a3363b269af91059a1620a41dbb77d640acc1eb766d31c35ac75e42ecc9"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "FertilizerPreMint.initialize(string)._uri (contracts/tokens/Fertilizer/FertilizerPreMint.sol#37) shadows:\n\t- Internalizer._uri (contracts/tokens/Fertilizer/Internalizer.sol#39) (state variable)\n\t- ERC1155Upgradeable._uri (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#33) (state variable)\n",
            "markdown": "[FertilizerPreMint.initialize(string)._uri](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L37) shadows:\n\t- [Internalizer._uri](contracts/tokens/Fertilizer/Internalizer.sol#L39) (state variable)\n\t- [ERC1155Upgradeable._uri](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L33) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/FertilizerPreMint.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d4eb73f79e07b24300d6c1c4b537d2e1f8a7801c861c19f2f9f3fdc8dea14cf"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockSeasonFacet.setNextSowTimeE(uint32).time (contracts/mocks/mockFacets/MockSeasonFacet.sol#151) shadows:\n\t- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85) (function)\n",
            "markdown": "[MockSeasonFacet.setNextSowTimeE(uint32).time](contracts/mocks/mockFacets/MockSeasonFacet.sol#L151) shadows:\n\t- [SeasonFacet.time()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L83-L85) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 151
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6d08e932d40f30d9689e3ac2f7397a0a31b44689879de316cfb4b8a102cc3748"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockFundraiserFacet.createFundraiserE(address,address,uint256).fundraiser (contracts/mocks/mockFacets/MockFundraiserFacet.sol#21) shadows:\n\t- FundraiserFacet.fundraiser(uint32) (contracts/beanstalk/field/FundraiserFacet.sol#180-186) (function)\n",
            "markdown": "[MockFundraiserFacet.createFundraiserE(address,address,uint256).fundraiser](contracts/mocks/mockFacets/MockFundraiserFacet.sol#L21) shadows:\n\t- [FundraiserFacet.fundraiser(uint32)](contracts/beanstalk/field/FundraiserFacet.sol#L180-L186) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockFundraiserFacet.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6d59ca13375fcce37d0522a87f001721098e972a3bcea282a992b9652419eb0f"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockSiloFacet.whitelistTokenLegacy(address,bytes4,uint32,uint32).s (contracts/mocks/mockFacets/MockSiloFacet.sol#325) shadows:\n\t- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)\n",
            "markdown": "[MockSiloFacet.whitelistTokenLegacy(address,bytes4,uint32,uint32).s](contracts/mocks/mockFacets/MockSiloFacet.sol#L325) shadows:\n\t- [ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6f5b59e290885d5806928c7fa4b9df534c23f6938e310bfdaff21daefb7bc468"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "BeanstalkERC20.constructor(address,string,string).symbol (contracts/tokens/ERC20/BeanstalkERC20.sol#34) shadows:\n\t- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#72-74) (function)\n",
            "markdown": "[BeanstalkERC20.constructor(address,string,string).symbol](contracts/tokens/ERC20/BeanstalkERC20.sol#L34) shadows:\n\t- [ERC20.symbol()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L72-L74) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/ERC20/BeanstalkERC20.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "704ed6a57bb0ded9471ffbfcf7786df7d3c1e7783852f1984fd4ed4b3bba5874"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockToken.constructor(string,string).name (contracts/mocks/MockToken.sol#20) shadows:\n\t- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#64-66) (function)\n",
            "markdown": "[MockToken.constructor(string,string).name](contracts/mocks/MockToken.sol#L20) shadows:\n\t- [ERC20.name()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L64-L66) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockToken.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9b573419e53920193162a50f592f5084a77f05328a60c05e38a23e44c90a6b67"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockSiloFacet.incrementTotalDepositedAmount(address,uint256).s (contracts/mocks/mockFacets/MockSiloFacet.sol#359) shadows:\n\t- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)\n",
            "markdown": "[MockSiloFacet.incrementTotalDepositedAmount(address,uint256).s](contracts/mocks/mockFacets/MockSiloFacet.sol#L359) shadows:\n\t- [ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 359,
                  "endLine": 359
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9ebe4bef9bb989b293fad2cd1299c91fe39959d3b709c7680b3dac39d81c5a20"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockSiloFacet.mintSeeds(address,uint256).s (contracts/mocks/mockFacets/MockSiloFacet.sol#161) shadows:\n\t- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)\n",
            "markdown": "[MockSiloFacet.mintSeeds(address,uint256).s](contracts/mocks/mockFacets/MockSiloFacet.sol#L161) shadows:\n\t- [ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 161
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a66985ed618a587c97a1d3fca69b59a3220c807860f714225dd773516e548bcb"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "BeanstalkERC20.constructor(address,string,string).name (contracts/tokens/ERC20/BeanstalkERC20.sol#34) shadows:\n\t- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#64-66) (function)\n",
            "markdown": "[BeanstalkERC20.constructor(address,string,string).name](contracts/tokens/ERC20/BeanstalkERC20.sol#L34) shadows:\n\t- [ERC20.name()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L64-L66) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/ERC20/BeanstalkERC20.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a6d19d552ae32196d0280af47de66f146a1b29d796f1bd44cc0b69b5b872440a"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MigrationFacet.getDepositLegacy(address,address,uint32).s (contracts/beanstalk/silo/MigrationFacet.sol#95) shadows:\n\t- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)\n",
            "markdown": "[MigrationFacet.getDepositLegacy(address,address,uint32).s](contracts/beanstalk/silo/MigrationFacet.sol#L95) shadows:\n\t- [ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/MigrationFacet.sol"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aabe1e50b06fafd7564c5c0b7fe44562f989915f77596cfcb2438940d5717fc7"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "TokenFacet.permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32).s (contracts/beanstalk/farm/TokenFacet.sol#180) shadows:\n\t- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)\n",
            "markdown": "[TokenFacet.permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32).s](contracts/beanstalk/farm/TokenFacet.sol#L180) shadows:\n\t- [ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/TokenFacet.sol"
                },
                "region": {
                  "startLine": 180,
                  "endLine": 180
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aae9b13d0c439c47146464a3485bc64329f01eff8f8c5eb3394d796eb78e4ddd"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "ERC20Permit.constructor(string).name (contracts/tokens/ERC20/ERC20Permit.sol#39) shadows:\n\t- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#64-66) (function)\n",
            "markdown": "[ERC20Permit.constructor(string).name](contracts/tokens/ERC20/ERC20Permit.sol#L39) shadows:\n\t- [ERC20.name()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L64-L66) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/ERC20/ERC20Permit.sol"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b3b48e74ebb6562888993a4c7faabd7e1ad192ce0bbaac7e7672349e861c102a"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockSiloFacet.beanDenominatedValueLegacy(address,uint256).s (contracts/mocks/mockFacets/MockSiloFacet.sol#285) shadows:\n\t- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)\n",
            "markdown": "[MockSiloFacet.beanDenominatedValueLegacy(address,uint256).s](contracts/mocks/mockFacets/MockSiloFacet.sol#L285) shadows:\n\t- [ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 285,
                  "endLine": 285
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d8f73645ddb21361f25ae6da40420755436ab7c43569c6e8e057f1793ee2f680"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "ApprovalFacet.permitDeposit(address,address,address,uint256,uint256,uint8,bytes32,bytes32).s (contracts/beanstalk/silo/ApprovalFacet.sol#151) shadows:\n\t- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)\n",
            "markdown": "[ApprovalFacet.permitDeposit(address,address,address,uint256,uint256,uint8,bytes32,bytes32).s](contracts/beanstalk/silo/ApprovalFacet.sol#L151) shadows:\n\t- [ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/ApprovalFacet.sol"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 151
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f5b8c75bf793dcd06ecf31cdef723ba118c4f2b3a83ba3e1939adfbaf63e9066"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "MockSiloFacet.depositWithBDVLegacy(address,address,uint32,uint256,uint256).s (contracts/mocks/mockFacets/MockSiloFacet.sol#268) shadows:\n\t- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)\n",
            "markdown": "[MockSiloFacet.depositWithBDVLegacy(address,address,uint32,uint256,uint256).s](contracts/mocks/mockFacets/MockSiloFacet.sol#L268) shadows:\n\t- [ReentrancyGuard.s](contracts/beanstalk/ReentrancyGuard.sol#L17) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fbabe41336b52a47f72aa8ea5d3705d6dc6d75816ba4a8312046411a88364a5b"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "MockContract.setAccount(address)._account (contracts/mocks/MockContract.sol#16) lacks a zero-check on :\n\t\t- account = _account (contracts/mocks/MockContract.sol#17)\n",
            "markdown": "[MockContract.setAccount(address)._account](contracts/mocks/MockContract.sol#L16) lacks a zero-check on :\n\t\t- [account = _account](contracts/mocks/MockContract.sol#L17)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockContract.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ce128da7ba071340802e9faabd6b115713603e7f86b1638060d19fe40cfccee"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "MockMeta3Curve.constructor(address,address,address).base_pool (contracts/mocks/curve/MockMeta3Curve.sol#65) lacks a zero-check on :\n\t\t- BASE_POOL = base_pool (contracts/mocks/curve/MockMeta3Curve.sol#68)\n",
            "markdown": "[MockMeta3Curve.constructor(address,address,address).base_pool](contracts/mocks/curve/MockMeta3Curve.sol#L65) lacks a zero-check on :\n\t\t- [BASE_POOL = base_pool](contracts/mocks/curve/MockMeta3Curve.sol#L68)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "44c1cb08059d3707a1f93d575a03da942c01f931ec3c3283c3e8dc1139bcf86c"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "MockUniswapV3Factory.setOwner(address)._owner (contracts/mocks/uniswap/MockUniswapV3Factory.sol#54) lacks a zero-check on :\n\t\t- owner = _owner (contracts/mocks/uniswap/MockUniswapV3Factory.sol#57)\n",
            "markdown": "[MockUniswapV3Factory.setOwner(address)._owner](contracts/mocks/uniswap/MockUniswapV3Factory.sol#L54) lacks a zero-check on :\n\t\t- [owner = _owner](contracts/mocks/uniswap/MockUniswapV3Factory.sol#L57)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Factory.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6ca700ffa54bdc68a61a180a6ad5943c233cbd77761e04c800105226adfe8a7d"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "MockMeta3Curve.init(address,address,address).base_pool (contracts/mocks/curve/MockMeta3Curve.sol#71) lacks a zero-check on :\n\t\t- BASE_POOL = base_pool (contracts/mocks/curve/MockMeta3Curve.sol#74)\n",
            "markdown": "[MockMeta3Curve.init(address,address,address).base_pool](contracts/mocks/curve/MockMeta3Curve.sol#L71) lacks a zero-check on :\n\t\t- [BASE_POOL = base_pool](contracts/mocks/curve/MockMeta3Curve.sol#L74)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7a5247e36e33476ffda09d3fac7fba61abb1b35b4698f57c92dd832d16a56c6e"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "FarmFacet._farmMem(bytes) (contracts/beanstalk/farm/FarmFacet.sol#90-96) has external calls inside a loop: (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#94)\n",
            "markdown": "[FarmFacet._farmMem(bytes)](contracts/beanstalk/farm/FarmFacet.sol#L90-L96) has external calls inside a loop: [(success,result) = facet.delegatecall(data)](contracts/beanstalk/farm/FarmFacet.sol#L94)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/FarmFacet.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "018e995b85812168974771f9eae9b09abe5e587723de003d59affd8877b4ed8a"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "MockSeasonFacet.resetPools(address[]) (contracts/mocks/mockFacets/MockSeasonFacet.sol#245-249) has external calls inside a loop: ResetPool(pools[i]).reset_cumulative() (contracts/mocks/mockFacets/MockSeasonFacet.sol#247)\n",
            "markdown": "[MockSeasonFacet.resetPools(address[])](contracts/mocks/mockFacets/MockSeasonFacet.sol#L245-L249) has external calls inside a loop: [ResetPool(pools[i]).reset_cumulative()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L247)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 245,
                  "endLine": 249
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "027e70a48a6123d1e7f3f5e49225d66dd157224192e8eab61323da42496d4f51"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351) has external calls inside a loop: ERC20(coins[i_scope_1]).transfer(_receiver,amount) (contracts/mocks/curve/MockMeta3Curve.sol#347)\n",
            "markdown": "[MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L302-L351) has external calls inside a loop: [ERC20(coins[i_scope_1]).transfer(_receiver,amount)](contracts/mocks/curve/MockMeta3Curve.sol#L347)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 351
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e81d441144a32d0cc2f1ec95b70fbf563157dd79721f772444f231bb1ce00a7"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "LibMetaCurve.getXP(uint256[2],uint256) (contracts/libraries/Curve/LibMetaCurve.sol#31-40) has external calls inside a loop: LibCurve.getXP(balances,padding,C.curve3Pool().get_virtual_price()) (contracts/libraries/Curve/LibMetaCurve.sol#35-39)\n",
            "markdown": "[LibMetaCurve.getXP(uint256[2],uint256)](contracts/libraries/Curve/LibMetaCurve.sol#L31-L40) has external calls inside a loop: [LibCurve.getXP(balances,padding,C.curve3Pool().get_virtual_price())](contracts/libraries/Curve/LibMetaCurve.sol#L35-L39)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibMetaCurve.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1c3f54f7607014fe90df920990495986317519bb120d403287a9ea95dd36457b"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/CurveFacet.sol#159-234) has external calls inside a loop: amountOut = IERC20(coins[i_scope_0]).balanceOf(address(this)).sub(beforeAmounts[i_scope_0]) (contracts/beanstalk/farm/CurveFacet.sol#185)\n",
            "markdown": "[CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To)](contracts/beanstalk/farm/CurveFacet.sol#L159-L234) has external calls inside a loop: [amountOut = IERC20(coins[i_scope_0]).balanceOf(address(this)).sub(beforeAmounts[i_scope_0])](contracts/beanstalk/farm/CurveFacet.sol#L185)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 234
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c692dd82e1689fea49252229d768e1bd55d36a90d3c45ed6be41783e7f96701"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190) has external calls inside a loop: MockToken(s.fundraisers[i_scope_0].token).burn(MockToken(s.fundraisers[i_scope_0].token).balanceOf(address(this))) (contracts/mocks/mockFacets/MockSeasonFacet.sol#170)\n",
            "markdown": "[MockSeasonFacet.resetState()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L163-L190) has external calls inside a loop: [MockToken(s.fundraisers[i_scope_0].token).burn(MockToken(s.fundraisers[i_scope_0].token).balanceOf(address(this)))](contracts/mocks/mockFacets/MockSeasonFacet.sol#L170)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 190
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "367fb1d90299e89eca4dbf36e98b0a8279f3276e873973bbd3a62d64d96aaba7"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280) has external calls inside a loop: C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)\n",
            "markdown": "[Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280) has external calls inside a loop: [C.bean().mint(address(this),sopBeans)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L272)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Weather.sol"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 280
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "382ab09a96f80a599d1ec9869d41fadb44b518712d5cb069144111bd97844ef2"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280) has external calls inside a loop: C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)\n",
            "markdown": "[Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280) has external calls inside a loop: [C.bean().mint(address(this),newHarvestable.add(sopBeans))](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L270)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Weather.sol"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 280
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3b5b550d81565c1edc87bcf0364ece5ea99c0273ca5d6829abc34485e88b533b"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193) has external calls inside a loop: IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockPlainCurve.sol#185)\n",
            "markdown": "[MockPlainCurve.add_liquidity(uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L137-L193) has external calls inside a loop: [IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2)](contracts/mocks/curve/MockPlainCurve.sol#L185)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "402470f0d561f407a43503300eb23ada286fbf785dc5101117315d87b2f9963e"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/CurveFacet.sol#159-234) has external calls inside a loop: beforeAmounts[i] = IERC20(coins[i]).balanceOf(address(this)) (contracts/beanstalk/farm/CurveFacet.sol#179)\n",
            "markdown": "[CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To)](contracts/beanstalk/farm/CurveFacet.sol#L159-L234) has external calls inside a loop: [beforeAmounts[i] = IERC20(coins[i]).balanceOf(address(this))](contracts/beanstalk/farm/CurveFacet.sol#L179)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 234
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "52d7aa540f722717a5b2b5e4d0aa34dc9595edde2615d7168afcc8ca317f657c"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264) has external calls inside a loop: IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockMeta3Curve.sol#256)\n",
            "markdown": "[MockMeta3Curve.add_liquidity(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L209-L264) has external calls inside a loop: [IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2)](contracts/mocks/curve/MockMeta3Curve.sol#L256)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 264
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6d276fcc2283db06bdbefd3037cc6bd0c9e5978b4ed07ff870ed885484b19254"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "Pipeline._pipe(address,bytes,uint256) (contracts/pipeline/Pipeline.sol#69-77) has external calls inside a loop: (success,result) = target.call{value: value}(data) (contracts/pipeline/Pipeline.sol#75)\n",
            "markdown": "[Pipeline._pipe(address,bytes,uint256)](contracts/pipeline/Pipeline.sol#L69-L77) has external calls inside a loop: [(success,result) = target.call{value: value}(data)](contracts/pipeline/Pipeline.sol#L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/pipeline/Pipeline.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7a7ca4a664ef4a3d465c9523b367c645294d529865768625899a0301a2443806"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "LibBalance.getBalance(address,IERC20) (contracts/libraries/Token/LibBalance.sol#39-48) has external calls inside a loop: balance = token.balanceOf(account).add(getInternalBalance(account,token)) (contracts/libraries/Token/LibBalance.sol#44-46)\n",
            "markdown": "[LibBalance.getBalance(address,IERC20)](contracts/libraries/Token/LibBalance.sol#L39-L48) has external calls inside a loop: [balance = token.balanceOf(account).add(getInternalBalance(account,token))](contracts/libraries/Token/LibBalance.sol#L44-L46)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibBalance.sol"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "821abdff9e08e1bde527d7ac4403cf1fbd5d52e5d3a2a3e60a55d7a4b68b4154"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "TokenFacet.getExternalBalance(address,IERC20) (contracts/beanstalk/farm/TokenFacet.sol#289-295) has external calls inside a loop: balance = token.balanceOf(account) (contracts/beanstalk/farm/TokenFacet.sol#294)\n",
            "markdown": "[TokenFacet.getExternalBalance(address,IERC20)](contracts/beanstalk/farm/TokenFacet.sol#L289-L295) has external calls inside a loop: [balance = token.balanceOf(account)](contracts/beanstalk/farm/TokenFacet.sol#L294)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/TokenFacet.sol"
                },
                "region": {
                  "startLine": 289,
                  "endLine": 295
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8af6572e8d626c4a1c7e37bafc7da5079d449320a1573ffdb6695fb2198dd5be"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "Depot.farm(bytes[]) (contracts/depot/Depot.sol#43-54) has external calls inside a loop: (success,result) = address(this).delegatecall(data[i]) (contracts/depot/Depot.sol#50)\n",
            "markdown": "[Depot.farm(bytes[])](contracts/depot/Depot.sol#L43-L54) has external calls inside a loop: [(success,result) = address(this).delegatecall(data[i])](contracts/depot/Depot.sol#L50)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/depot/Depot.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "97d4f79055eee0594e2202e19b90216bdc5cc08ddb281b86d04d95beb61617fa"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293) has external calls inside a loop: ERC20(coins[i]).transfer(_receiver,value) (contracts/mocks/curve/MockMeta3Curve.sol#286)\n",
            "markdown": "[MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)](contracts/mocks/curve/MockMeta3Curve.sol#L273-L293) has external calls inside a loop: [ERC20(coins[i]).transfer(_receiver,value)](contracts/mocks/curve/MockMeta3Curve.sol#L286)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 273,
                  "endLine": 293
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a826da8f1c2b1a9bd2541485023ffcc6b24412de48925e9a39e6e82383ff8927"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "LibMetaCurve.getDFroms(address,uint256[2],uint256) (contracts/libraries/Curve/LibMetaCurve.sol#45-54) has external calls inside a loop: LibCurve.getD(getXP(balances,padding),IMeta3Curve(pool).A_precise()) (contracts/libraries/Curve/LibMetaCurve.sol#50-53)\n",
            "markdown": "[LibMetaCurve.getDFroms(address,uint256[2],uint256)](contracts/libraries/Curve/LibMetaCurve.sol#L45-L54) has external calls inside a loop: [LibCurve.getD(getXP(balances,padding),IMeta3Curve(pool).A_precise())](contracts/libraries/Curve/LibMetaCurve.sol#L50-L53)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibMetaCurve.sol"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d75644cb42a7f11497d36e8da1cf65ce5a594fd39fa946e637b477c0d4cab1b7"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "FarmFacet._farm(bytes) (contracts/beanstalk/farm/FarmFacet.sol#81-87) has external calls inside a loop: (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#85)\n",
            "markdown": "[FarmFacet._farm(bytes)](contracts/beanstalk/farm/FarmFacet.sol#L81-L87) has external calls inside a loop: [(success,result) = facet.delegatecall(data)](contracts/beanstalk/farm/FarmFacet.sol#L85)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/FarmFacet.sol"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ddbe46c4b1ed72cfeac74e8e4ed5299f72843cc29d58371c569ab4b644ca0bb3"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "Pipeline._pipeMem(address,bytes,uint256) (contracts/pipeline/Pipeline.sol#80-88) has external calls inside a loop: (success,result) = target.call{value: value}(data) (contracts/pipeline/Pipeline.sol#86)\n",
            "markdown": "[Pipeline._pipeMem(address,bytes,uint256)](contracts/pipeline/Pipeline.sol#L80-L88) has external calls inside a loop: [(success,result) = target.call{value: value}(data)](contracts/pipeline/Pipeline.sol#L86)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/pipeline/Pipeline.sol"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 88
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ebfaa3e79619a24e17979962666f962c1c620cae3bb7a72546d80efca89b0faa"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "LibBeanMetaCurve.getDeltaB() (contracts/libraries/Curve/LibBeanMetaCurve.sol#47-51) has external calls inside a loop: balances = C.curveMetapool().get_balances() (contracts/libraries/Curve/LibBeanMetaCurve.sol#48)\n",
            "markdown": "[LibBeanMetaCurve.getDeltaB()](contracts/libraries/Curve/LibBeanMetaCurve.sol#L47-L51) has external calls inside a loop: [balances = C.curveMetapool().get_balances()](contracts/libraries/Curve/LibBeanMetaCurve.sol#L48)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibBeanMetaCurve.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f037737bec255c2a1992c59316016ccf3e3a7d4be8534bd6fd86e78b006df80a"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280) has external calls inside a loop: amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)\n",
            "markdown": "[Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280) has external calls inside a loop: [amountOut = C.curveMetapool().exchange(0,1,sopBeans,0)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L276)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Weather.sol"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 280
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fa05b32e14860c3e954b8ec88195ad2d09769fa9215b5f08fdf66b3717398a69"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293):\n\tExternal calls:\n\t- ERC20(coins[i]).transfer(_receiver,value) (contracts/mocks/curve/MockMeta3Curve.sol#286)\n\tState variables written after the call(s):\n\t- _balanceOf[msg.sender] -= _burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#290)\n",
            "markdown": "Reentrancy in [MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)](contracts/mocks/curve/MockMeta3Curve.sol#L273-L293):\n\tExternal calls:\n\t- [ERC20(coins[i]).transfer(_receiver,value)](contracts/mocks/curve/MockMeta3Curve.sol#L286)\n\tState variables written after the call(s):\n\t- [_balanceOf[msg.sender] -= _burn_amount](contracts/mocks/curve/MockMeta3Curve.sol#L290)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 273,
                  "endLine": 293
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1f90f0e608c00e3dd64e861648bba2054ed49eceb070073e97eb887ac5b74fee"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in FieldFacet._sow(uint256,uint256,bool,LibTransfer.From) (contracts/beanstalk/field/FieldFacet.sol#135-142):\n\tExternal calls:\n\t- beans = LibTransfer.burnToken(C.bean(),beans,msg.sender,mode) (contracts/beanstalk/field/FieldFacet.sol#139)\n\tState variables written after the call(s):\n\t- s.f.beanSown = s.f.beanSown + SafeCast.toUint128(beans) (contracts/beanstalk/field/FieldFacet.sol#141)\n",
            "markdown": "Reentrancy in [FieldFacet._sow(uint256,uint256,bool,LibTransfer.From)](contracts/beanstalk/field/FieldFacet.sol#L135-L142):\n\tExternal calls:\n\t- [beans = LibTransfer.burnToken(C.bean(),beans,msg.sender,mode)](contracts/beanstalk/field/FieldFacet.sol#L139)\n\tState variables written after the call(s):\n\t- [s.f.beanSown = s.f.beanSown + SafeCast.toUint128(beans)](contracts/beanstalk/field/FieldFacet.sol#L141)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/field/FieldFacet.sol"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 142
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "21bc3aafbf64cdf74d62a04a0c27a385bd9e72e2cdff56a209416201d58fb884"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MarketplaceFacet.fillPodListingV2(Listing.PodListing,uint256,bytes,LibTransfer.From) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#81-96):\n\tExternal calls:\n\t- beanAmount = LibTransfer.transferToken(C.bean(),msg.sender,l.account,beanAmount,mode,l.mode) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#87-94)\n\tState variables written after the call(s):\n\t- _fillListingV2(l,beanAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#95)\n\t\t- s.a[account].field.plots[id] = amount (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#71)\n\t\t- delete s.a[account].field.plots[id] (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#81)\n\t\t- delete s.podListings[l.index] (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#215)\n\t\t- s.a[account].field.plots[id] = start (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#82)\n\t\t- s.podListings[l.index.add(amount).add(l.start)] = hashListingV2(0,l.amount.sub(amount),l.pricePerPod,l.maxHarvestableIndex,l.minFillAmount,pricingFunction,l.mode) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#218-226)\n\t\t- s.a[account].field.plots[id.add(end)] = amount.sub(end) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#84)\n",
            "markdown": "Reentrancy in [MarketplaceFacet.fillPodListingV2(Listing.PodListing,uint256,bytes,LibTransfer.From)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L81-L96):\n\tExternal calls:\n\t- [beanAmount = LibTransfer.transferToken(C.bean(),msg.sender,l.account,beanAmount,mode,l.mode)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L87-L94)\n\tState variables written after the call(s):\n\t- [_fillListingV2(l,beanAmount,pricingFunction)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L95)\n\t\t- [s.a[account].field.plots[id] = amount](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L71)\n\t\t- [delete s.a[account].field.plots[id]](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L81)\n\t\t- [delete s.podListings[l.index]](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L215)\n\t\t- [s.a[account].field.plots[id] = start](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L82)\n\t\t- [s.podListings[l.index.add(amount).add(l.start)] = hashListingV2(0,l.amount.sub(amount),l.pricePerPod,l.maxHarvestableIndex,l.minFillAmount,pricingFunction,l.mode)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L218-L226)\n\t\t- [s.a[account].field.plots[id.add(end)] = amount.sub(end)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L84)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3849a47ea33641654c56376421f1d091e7dc9b6c790250e064d4ec364b6c2944"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MockPlainCurve.reset() (contracts/mocks/curve/MockPlainCurve.sol#126-132):\n\tExternal calls:\n\t- MockToken(coins[0]).burn(MockToken(coins[0]).balanceOf(address(this))) (contracts/mocks/curve/MockPlainCurve.sol#129)\n\t- MockToken(coins[1]).burn(MockToken(coins[1]).balanceOf(address(this))) (contracts/mocks/curve/MockPlainCurve.sol#130)\n\tState variables written after the call(s):\n\t- reset_cumulative() (contracts/mocks/curve/MockPlainCurve.sol#131)\n\t\t- price_cumulative_last = balances (contracts/mocks/curve/MockPlainCurve.sol#115)\n\t- reset_cumulative() (contracts/mocks/curve/MockPlainCurve.sol#131)\n\t\t- timestamp_last = block.timestamp (contracts/mocks/curve/MockPlainCurve.sol#114)\n",
            "markdown": "Reentrancy in [MockPlainCurve.reset()](contracts/mocks/curve/MockPlainCurve.sol#L126-L132):\n\tExternal calls:\n\t- [MockToken(coins[0]).burn(MockToken(coins[0]).balanceOf(address(this)))](contracts/mocks/curve/MockPlainCurve.sol#L129)\n\t- [MockToken(coins[1]).burn(MockToken(coins[1]).balanceOf(address(this)))](contracts/mocks/curve/MockPlainCurve.sol#L130)\n\tState variables written after the call(s):\n\t- [reset_cumulative()](contracts/mocks/curve/MockPlainCurve.sol#L131)\n\t\t- [price_cumulative_last = balances](contracts/mocks/curve/MockPlainCurve.sol#L115)\n\t- [reset_cumulative()](contracts/mocks/curve/MockPlainCurve.sol#L131)\n\t\t- [timestamp_last = block.timestamp](contracts/mocks/curve/MockPlainCurve.sol#L114)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 132
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4892e7bfab5a500cb682fb7cb8937a898ad41c9a258779d869e51e7c6974af26"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MockFieldFacet.incrementTotalHarvestableE(uint256) (contracts/mocks/mockFacets/MockFieldFacet.sol#24-27):\n\tExternal calls:\n\t- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockFieldFacet.sol#25)\n\tState variables written after the call(s):\n\t- s.f.harvestable = s.f.harvestable.add(amount) (contracts/mocks/mockFacets/MockFieldFacet.sol#26)\n",
            "markdown": "Reentrancy in [MockFieldFacet.incrementTotalHarvestableE(uint256)](contracts/mocks/mockFacets/MockFieldFacet.sol#L24-L27):\n\tExternal calls:\n\t- [C.bean().mint(address(this),amount)](contracts/mocks/mockFacets/MockFieldFacet.sol#L25)\n\tState variables written after the call(s):\n\t- [s.f.harvestable = s.f.harvestable.add(amount)](contracts/mocks/mockFacets/MockFieldFacet.sol#L26)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockFieldFacet.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4eaa641b6a7ca44262eb01fc28a03c93f5cc8f5a40caf6868194f7832d80422e"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MockAdminFacet.fertilize(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#27-30):\n\tExternal calls:\n\t- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#28)\n\tState variables written after the call(s):\n\t- rewardToFertilizer(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#29)\n\t\t- s.bpf = uint128(firstEndBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#139)\n\t\t- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#140)\n\t\t- s.bpf = uint128(newTotalBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#153)\n\t\t- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#155)\n",
            "markdown": "Reentrancy in [MockAdminFacet.fertilize(uint256)](contracts/mocks/mockFacets/MockAdminFacet.sol#L27-L30):\n\tExternal calls:\n\t- [C.bean().mint(address(this),amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L28)\n\tState variables written after the call(s):\n\t- [rewardToFertilizer(amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L29)\n\t\t- [s.bpf = uint128(firstEndBpf)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L139)\n\t\t- [s.fertilizedIndex = s.fertilizedIndex.add(newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L140)\n\t\t- [s.bpf = uint128(newTotalBpf)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L153)\n\t\t- [s.fertilizedIndex = s.fertilizedIndex.add(newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L155)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockAdminFacet.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "504244ef4e2b9a38947c4e0e4250710f6620f16afa193bd1b962f9c0875538a2"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111):\n\tExternal calls:\n\t- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)\n\tState variables written after the call(s):\n\t- newFertilized = rewardToFertilizer(newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#97)\n\t\t- s.bpf = uint128(firstEndBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#139)\n\t\t- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#140)\n\t\t- s.bpf = uint128(newTotalBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#153)\n\t\t- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#155)\n\t- newHarvestable = rewardToHarvestable(newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#103)\n\t\t- s.f.harvestable = s.f.harvestable.add(newHarvestable) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#171)\n\t- rewardToSilo(newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#108)\n\t\t- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)\n\t\t- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)\n\t\t- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)\n\t\t- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)\n\t\t- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)\n\t\t- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)\n",
            "markdown": "Reentrancy in [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111):\n\tExternal calls:\n\t- [C.bean().mint(address(this),newSupply)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L93)\n\tState variables written after the call(s):\n\t- [newFertilized = rewardToFertilizer(newSupply)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L97)\n\t\t- [s.bpf = uint128(firstEndBpf)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L139)\n\t\t- [s.fertilizedIndex = s.fertilizedIndex.add(newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L140)\n\t\t- [s.bpf = uint128(newTotalBpf)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L153)\n\t\t- [s.fertilizedIndex = s.fertilizedIndex.add(newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L155)\n\t- [newHarvestable = rewardToHarvestable(newSupply)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L103)\n\t\t- [s.f.harvestable = s.f.harvestable.add(newHarvestable)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L171)\n\t- [rewardToSilo(newSupply)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L108)\n\t\t- [s.earnedBeans = s.earnedBeans.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L185)\n\t\t- [s.s.stalk = s.s.stalk.add(seasonStalk)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L194)\n\t\t- [s.newEarnedStalk = seasonStalk.toUint128()](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L199)\n\t\t- [s.vestingPeriodRoots = 0](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L200)\n\t\t- [s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L203-L206)\n\t\t- [s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L208-L211)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Sun.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 111
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5fbdd8a3307743721a05d51f154125a87342799b49811e8c10a759108a6d69e6"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MockMeta3Curve.reset() (contracts/mocks/curve/MockMeta3Curve.sol#154-160):\n\tExternal calls:\n\t- MockToken(coins[0]).burn(MockToken(coins[0]).balanceOf(address(this))) (contracts/mocks/curve/MockMeta3Curve.sol#157)\n\t- MockToken(coins[1]).burn(MockToken(coins[1]).balanceOf(address(this))) (contracts/mocks/curve/MockMeta3Curve.sol#158)\n\tState variables written after the call(s):\n\t- reset_cumulative() (contracts/mocks/curve/MockMeta3Curve.sol#159)\n\t\t- price_cumulative_last = balances (contracts/mocks/curve/MockMeta3Curve.sol#129)\n\t- reset_cumulative() (contracts/mocks/curve/MockMeta3Curve.sol#159)\n\t\t- timestamp_last = block.timestamp (contracts/mocks/curve/MockMeta3Curve.sol#128)\n",
            "markdown": "Reentrancy in [MockMeta3Curve.reset()](contracts/mocks/curve/MockMeta3Curve.sol#L154-L160):\n\tExternal calls:\n\t- [MockToken(coins[0]).burn(MockToken(coins[0]).balanceOf(address(this)))](contracts/mocks/curve/MockMeta3Curve.sol#L157)\n\t- [MockToken(coins[1]).burn(MockToken(coins[1]).balanceOf(address(this)))](contracts/mocks/curve/MockMeta3Curve.sol#L158)\n\tState variables written after the call(s):\n\t- [reset_cumulative()](contracts/mocks/curve/MockMeta3Curve.sol#L159)\n\t\t- [price_cumulative_last = balances](contracts/mocks/curve/MockMeta3Curve.sol#L129)\n\t- [reset_cumulative()](contracts/mocks/curve/MockMeta3Curve.sol#L159)\n\t\t- [timestamp_last = block.timestamp](contracts/mocks/curve/MockMeta3Curve.sol#L128)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 160
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "62e23771e9af4ff9dd05fe3dbe511fa985bba994832dad5de7dee69f7a349bdb"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264):\n\tExternal calls:\n\t- IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockMeta3Curve.sol#256)\n\tState variables written after the call(s):\n\t- _balanceOf[_receiver] += mint_amount (contracts/mocks/curve/MockMeta3Curve.sol#260)\n",
            "markdown": "Reentrancy in [MockMeta3Curve.add_liquidity(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L209-L264):\n\tExternal calls:\n\t- [IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2)](contracts/mocks/curve/MockMeta3Curve.sol#L256)\n\tState variables written after the call(s):\n\t- [_balanceOf[_receiver] += mint_amount](contracts/mocks/curve/MockMeta3Curve.sol#L260)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 264
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6697b595cbb16c3940919dd8974069895861cdaa350511611904bf93fe023d1d"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MockUniswapV3Pool.flash(address,uint256,uint256,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#800-843):\n\tExternal calls:\n\t- TransferHelper.safeTransfer(token0,recipient,amount0) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#814)\n\t- TransferHelper.safeTransfer(token1,recipient,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#815)\n\t- IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0,fee1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#817)\n\tState variables written after the call(s):\n\t- feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0,FixedPoint128.Q128,_liquidity) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#833)\n\t- feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1,FixedPoint128.Q128,_liquidity) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#839)\n\t- protocolFees.token0 += uint128(fees0) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#832)\n\t- protocolFees.token1 += uint128(fees1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#838)\n",
            "markdown": "Reentrancy in [MockUniswapV3Pool.flash(address,uint256,uint256,bytes)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L800-L843):\n\tExternal calls:\n\t- [TransferHelper.safeTransfer(token0,recipient,amount0)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L814)\n\t- [TransferHelper.safeTransfer(token1,recipient,amount1)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L815)\n\t- [IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0,fee1,data)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L817)\n\tState variables written after the call(s):\n\t- [feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0,FixedPoint128.Q128,_liquidity)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L833)\n\t- [feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1,FixedPoint128.Q128,_liquidity)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L839)\n\t- [protocolFees.token0 += uint128(fees0)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L832)\n\t- [protocolFees.token1 += uint128(fees1)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L838)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 800,
                  "endLine": 843
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "788e0dc3a5bb7a71ced03bb459d306ba946a22807d4178eefcb6fcac0277c360"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in FertilizerPreMint.initialize(string) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#37-40):\n\tExternal calls:\n\t- IERC20(WETH).approve(SWAP_ROUTER,type()(uint256).max) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#38)\n\tState variables written after the call(s):\n\t- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)\n\t\t- _owner = msgSender (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#34)\n\t- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)\n\t\t- _status = _NOT_ENTERED (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#44)\n\t- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)\n\t\t- _supportedInterfaces[interfaceId] = true (node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#57)\n\t- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)\n\t\t- _uri = newuri (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#236)\n",
            "markdown": "Reentrancy in [FertilizerPreMint.initialize(string)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L37-L40):\n\tExternal calls:\n\t- [IERC20(WETH).approve(SWAP_ROUTER,type()(uint256).max)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L38)\n\tState variables written after the call(s):\n\t- [__Internallize_init(_uri)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L39)\n\t\t- [_owner = msgSender](node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#L34)\n\t- [__Internallize_init(_uri)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L39)\n\t\t- [_status = _NOT_ENTERED](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L44)\n\t- [__Internallize_init(_uri)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L39)\n\t\t- [_supportedInterfaces[interfaceId] = true](node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#L57)\n\t- [__Internallize_init(_uri)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L39)\n\t\t- [_uri = newuri](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L236)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/FertilizerPreMint.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8376a7a6cee1719b007851cbbb45d280f4d3703766a16e4dc714f45ceff491ec"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MockAdminFacet.rewardSilo(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#32-35):\n\tExternal calls:\n\t- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#33)\n\tState variables written after the call(s):\n\t- rewardToSilo(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#34)\n\t\t- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)\n\t\t- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)\n\t\t- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)\n\t\t- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)\n\t\t- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)\n\t\t- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)\n",
            "markdown": "Reentrancy in [MockAdminFacet.rewardSilo(uint256)](contracts/mocks/mockFacets/MockAdminFacet.sol#L32-L35):\n\tExternal calls:\n\t- [C.bean().mint(address(this),amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L33)\n\tState variables written after the call(s):\n\t- [rewardToSilo(amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L34)\n\t\t- [s.earnedBeans = s.earnedBeans.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L185)\n\t\t- [s.s.stalk = s.s.stalk.add(seasonStalk)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L194)\n\t\t- [s.newEarnedStalk = seasonStalk.toUint128()](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L199)\n\t\t- [s.vestingPeriodRoots = 0](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L200)\n\t\t- [s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L203-L206)\n\t\t- [s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L208-L211)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockAdminFacet.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a3e706797a2b044baa44c99a2af869128ba05b520a70f93f5c8a74cd0fe7be60"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in InitHotFix5.init() (contracts/beanstalk/init/InitHotFix5.sol#28-39):\n\tExternal calls:\n\t- IBs(address(this)).updateSilo(AFFECTED_ADDRESS) (contracts/beanstalk/init/InitHotFix5.sol#30)\n\tState variables written after the call(s):\n\t- s.a[AFFECTED_ADDRESS].roots = s.a[AFFECTED_ADDRESS].roots.add(diffRoots) (contracts/beanstalk/init/InitHotFix5.sol#37)\n\t- s.s.roots = s.s.roots.add(diffRoots) (contracts/beanstalk/init/InitHotFix5.sol#38)\n",
            "markdown": "Reentrancy in [InitHotFix5.init()](contracts/beanstalk/init/InitHotFix5.sol#L28-L39):\n\tExternal calls:\n\t- [IBs(address(this)).updateSilo(AFFECTED_ADDRESS)](contracts/beanstalk/init/InitHotFix5.sol#L30)\n\tState variables written after the call(s):\n\t- [s.a[AFFECTED_ADDRESS].roots = s.a[AFFECTED_ADDRESS].roots.add(diffRoots)](contracts/beanstalk/init/InitHotFix5.sol#L37)\n\t- [s.s.roots = s.s.roots.add(diffRoots)](contracts/beanstalk/init/InitHotFix5.sol#L38)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitHotFix5.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aec67f3b6a9fcf2a56eeeaedfd27d6702fa446b3f3b604a5e3b913c3b3747642"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in InitDiamond.init() (contracts/beanstalk/init/InitDiamond.sol#31-69):\n\tExternal calls:\n\t- C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#38)\n\t- C.bean().approve(C.curveZapAddress(),type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#39)\n\t- C.usdc().approve(C.curveZapAddress(),type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#40)\n\tState variables written after the call(s):\n\t- s.cases = s.cases = (int8(3),1,0,0,- 1,- 3,- 3,0,3,1,0,0,- 1,- 3,- 3,0,3,3,1,0,0,- 1,- 3,0,3,3,1,0,0,- 1,- 3,0) (contracts/beanstalk/init/InitDiamond.sol#42-52)\n\t- s.w.t = 1 (contracts/beanstalk/init/InitDiamond.sol#53)\n\t- s.season.current = 1 (contracts/beanstalk/init/InitDiamond.sol#55)\n\t- s.season.withdrawSeasons = 25 (contracts/beanstalk/init/InitDiamond.sol#56)\n\t- s.season.period = C.getSeasonPeriod() (contracts/beanstalk/init/InitDiamond.sol#57)\n\t- s.season.timestamp = block.timestamp (contracts/beanstalk/init/InitDiamond.sol#58)\n\t- s.w.thisSowTime = type()(uint32).max (contracts/beanstalk/init/InitDiamond.sol#63)\n\t- s.w.lastSowTime = type()(uint32).max (contracts/beanstalk/init/InitDiamond.sol#64)\n\t- s.isFarm = 1 (contracts/beanstalk/init/InitDiamond.sol#65)\n\t- s.season.start = (block.timestamp / s.season.period) * s.season.period (contracts/beanstalk/init/InitDiamond.sol#59-61)\n\t- s.season.start = block.timestamp (contracts/beanstalk/init/InitDiamond.sol#59-61)\n",
            "markdown": "Reentrancy in [InitDiamond.init()](contracts/beanstalk/init/InitDiamond.sol#L31-L69):\n\tExternal calls:\n\t- [C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max)](contracts/beanstalk/init/InitDiamond.sol#L38)\n\t- [C.bean().approve(C.curveZapAddress(),type()(uint256).max)](contracts/beanstalk/init/InitDiamond.sol#L39)\n\t- [C.usdc().approve(C.curveZapAddress(),type()(uint256).max)](contracts/beanstalk/init/InitDiamond.sol#L40)\n\tState variables written after the call(s):\n\t- [s.cases = s.cases = (int8(3),1,0,0,- 1,- 3,- 3,0,3,1,0,0,- 1,- 3,- 3,0,3,3,1,0,0,- 1,- 3,0,3,3,1,0,0,- 1,- 3,0)](contracts/beanstalk/init/InitDiamond.sol#L42-L52)\n\t- [s.w.t = 1](contracts/beanstalk/init/InitDiamond.sol#L53)\n\t- [s.season.current = 1](contracts/beanstalk/init/InitDiamond.sol#L55)\n\t- [s.season.withdrawSeasons = 25](contracts/beanstalk/init/InitDiamond.sol#L56)\n\t- [s.season.period = C.getSeasonPeriod()](contracts/beanstalk/init/InitDiamond.sol#L57)\n\t- [s.season.timestamp = block.timestamp](contracts/beanstalk/init/InitDiamond.sol#L58)\n\t- [s.w.thisSowTime = type()(uint32).max](contracts/beanstalk/init/InitDiamond.sol#L63)\n\t- [s.w.lastSowTime = type()(uint32).max](contracts/beanstalk/init/InitDiamond.sol#L64)\n\t- [s.isFarm = 1](contracts/beanstalk/init/InitDiamond.sol#L65)\n\t- [s.season.start = (block.timestamp / s.season.period) * s.season.period](contracts/beanstalk/init/InitDiamond.sol#L59-L61)\n\t- [s.season.start = block.timestamp](contracts/beanstalk/init/InitDiamond.sol#L59-L61)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitDiamond.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "af94ac53aff06cd187cf6014190ba930a81d0770a225940efaa47e9d09fc6c2f"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MockAdminFacet.ripen(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#22-25):\n\tExternal calls:\n\t- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#23)\n\tState variables written after the call(s):\n\t- rewardToHarvestable(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#24)\n\t\t- s.f.harvestable = s.f.harvestable.add(newHarvestable) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#171)\n",
            "markdown": "Reentrancy in [MockAdminFacet.ripen(uint256)](contracts/mocks/mockFacets/MockAdminFacet.sol#L22-L25):\n\tExternal calls:\n\t- [C.bean().mint(address(this),amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L23)\n\tState variables written after the call(s):\n\t- [rewardToHarvestable(amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L24)\n\t\t- [s.f.harvestable = s.f.harvestable.add(newHarvestable)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L171)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockAdminFacet.sol"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b688369075dea25c0b10da8c792a90e2b15fecbe0399f87f732fa13ef6838ccf"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193):\n\tExternal calls:\n\t- IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockPlainCurve.sol#185)\n\tState variables written after the call(s):\n\t- _balanceOf[msg.sender] += mint_amount (contracts/mocks/curve/MockPlainCurve.sol#189)\n",
            "markdown": "Reentrancy in [MockPlainCurve.add_liquidity(uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L137-L193):\n\tExternal calls:\n\t- [IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2)](contracts/mocks/curve/MockPlainCurve.sol#L185)\n\tState variables written after the call(s):\n\t- [_balanceOf[msg.sender] += mint_amount](contracts/mocks/curve/MockPlainCurve.sol#L189)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bca609ba50f380f0eeadfbecc9fe2dc607d652d1ae1e99045be69d12441b559d"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MockSeasonFacet.mockStepSilo(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#48-51):\n\tExternal calls:\n\t- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#49)\n\tState variables written after the call(s):\n\t- rewardToSilo(amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#50)\n\t\t- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)\n\t\t- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)\n\t\t- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)\n\t\t- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)\n\t\t- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)\n\t\t- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)\n",
            "markdown": "Reentrancy in [MockSeasonFacet.mockStepSilo(uint256)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L48-L51):\n\tExternal calls:\n\t- [C.bean().mint(address(this),amount)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L49)\n\tState variables written after the call(s):\n\t- [rewardToSilo(amount)](contracts/mocks/mockFacets/MockSeasonFacet.sol#L50)\n\t\t- [s.earnedBeans = s.earnedBeans.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L185)\n\t\t- [s.s.stalk = s.s.stalk.add(seasonStalk)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L194)\n\t\t- [s.newEarnedStalk = seasonStalk.toUint128()](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L199)\n\t\t- [s.vestingPeriodRoots = 0](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L200)\n\t\t- [s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L203-L206)\n\t\t- [s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L208-L211)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e0d2c9ec13931d47144cab5a66a04461cdf5c223ba2e4fe238ca442a87741ce1"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MarketplaceFacet.fillPodListing(Listing.PodListing,uint256,LibTransfer.From) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#65-79):\n\tExternal calls:\n\t- beanAmount = LibTransfer.transferToken(C.bean(),msg.sender,l.account,beanAmount,mode,l.mode) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#70-77)\n\tState variables written after the call(s):\n\t- _fillListing(l,beanAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#78)\n\t\t- s.a[account].field.plots[id] = amount (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#71)\n\t\t- delete s.podListings[l.index] (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#189)\n\t\t- delete s.a[account].field.plots[id] (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#81)\n\t\t- s.a[account].field.plots[id] = start (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#82)\n\t\t- s.podListings[l.index.add(amount).add(l.start)] = hashListing(0,l.amount.sub(amount),l.pricePerPod,l.maxHarvestableIndex,l.minFillAmount,l.mode) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#192-199)\n\t\t- s.a[account].field.plots[id.add(end)] = amount.sub(end) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#84)\n",
            "markdown": "Reentrancy in [MarketplaceFacet.fillPodListing(Listing.PodListing,uint256,LibTransfer.From)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L65-L79):\n\tExternal calls:\n\t- [beanAmount = LibTransfer.transferToken(C.bean(),msg.sender,l.account,beanAmount,mode,l.mode)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L70-L77)\n\tState variables written after the call(s):\n\t- [_fillListing(l,beanAmount)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L78)\n\t\t- [s.a[account].field.plots[id] = amount](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L71)\n\t\t- [delete s.podListings[l.index]](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L189)\n\t\t- [delete s.a[account].field.plots[id]](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L81)\n\t\t- [s.a[account].field.plots[id] = start](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L82)\n\t\t- [s.podListings[l.index.add(amount).add(l.start)] = hashListing(0,l.amount.sub(amount),l.pricePerPod,l.maxHarvestableIndex,l.minFillAmount,l.mode)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L192-L199)\n\t\t- [s.a[account].field.plots[id.add(end)] = amount.sub(end)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L84)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 79
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e493b1f75cfb76b917d7a8388a854cf6c22d70b0b421a15a1f4823e676f2581d"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in MockInitDiamond.init() (contracts/mocks/MockInitDiamond.sol#25-61):\n\tExternal calls:\n\t- C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#27)\n\t- C.bean().approve(C.curveZapAddress(),type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#28)\n\t- C.usdc().approve(C.curveZapAddress(),type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#29)\n\tState variables written after the call(s):\n\t- s.cases = s.cases = (int8(3),1,0,0,- 1,- 3,- 3,0,3,1,0,0,- 1,- 3,- 3,0,3,3,1,0,0,- 1,- 3,0,3,3,1,0,0,- 1,- 3,0) (contracts/mocks/MockInitDiamond.sol#31-41)\n\t- s.w.t = 1 (contracts/mocks/MockInitDiamond.sol#42)\n\t- s.w.thisSowTime = type()(uint32).max (contracts/mocks/MockInitDiamond.sol#44)\n\t- s.w.lastSowTime = type()(uint32).max (contracts/mocks/MockInitDiamond.sol#45)\n\t- s.season.current = 1 (contracts/mocks/MockInitDiamond.sol#51)\n\t- s.season.withdrawSeasons = 25 (contracts/mocks/MockInitDiamond.sol#52)\n\t- s.season.period = C.getSeasonPeriod() (contracts/mocks/MockInitDiamond.sol#53)\n\t- s.season.timestamp = block.timestamp (contracts/mocks/MockInitDiamond.sol#54)\n\t- s.isFarm = 1 (contracts/mocks/MockInitDiamond.sol#58)\n\t- s.season.start = (block.timestamp / s.season.period) * s.season.period (contracts/mocks/MockInitDiamond.sol#55-57)\n\t- s.season.start = block.timestamp (contracts/mocks/MockInitDiamond.sol#55-57)\n",
            "markdown": "Reentrancy in [MockInitDiamond.init()](contracts/mocks/MockInitDiamond.sol#L25-L61):\n\tExternal calls:\n\t- [C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max)](contracts/mocks/MockInitDiamond.sol#L27)\n\t- [C.bean().approve(C.curveZapAddress(),type()(uint256).max)](contracts/mocks/MockInitDiamond.sol#L28)\n\t- [C.usdc().approve(C.curveZapAddress(),type()(uint256).max)](contracts/mocks/MockInitDiamond.sol#L29)\n\tState variables written after the call(s):\n\t- [s.cases = s.cases = (int8(3),1,0,0,- 1,- 3,- 3,0,3,1,0,0,- 1,- 3,- 3,0,3,3,1,0,0,- 1,- 3,0,3,3,1,0,0,- 1,- 3,0)](contracts/mocks/MockInitDiamond.sol#L31-L41)\n\t- [s.w.t = 1](contracts/mocks/MockInitDiamond.sol#L42)\n\t- [s.w.thisSowTime = type()(uint32).max](contracts/mocks/MockInitDiamond.sol#L44)\n\t- [s.w.lastSowTime = type()(uint32).max](contracts/mocks/MockInitDiamond.sol#L45)\n\t- [s.season.current = 1](contracts/mocks/MockInitDiamond.sol#L51)\n\t- [s.season.withdrawSeasons = 25](contracts/mocks/MockInitDiamond.sol#L52)\n\t- [s.season.period = C.getSeasonPeriod()](contracts/mocks/MockInitDiamond.sol#L53)\n\t- [s.season.timestamp = block.timestamp](contracts/mocks/MockInitDiamond.sol#L54)\n\t- [s.isFarm = 1](contracts/mocks/MockInitDiamond.sol#L58)\n\t- [s.season.start = (block.timestamp / s.season.period) * s.season.period](contracts/mocks/MockInitDiamond.sol#L55-L57)\n\t- [s.season.start = block.timestamp](contracts/mocks/MockInitDiamond.sol#L55-L57)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockInitDiamond.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fd832b00677b06b1b759ee9e79c2b6497e51ddbab3c20d57fdd9f8d6812d8204"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Order._fillPodOrder(Order.PodOrder,uint256,uint256,uint256,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#92-117):\n\tExternal calls:\n\t- LibTransfer.sendToken(C.bean(),costInBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#108)\n\tEvent emitted after the call(s):\n\t- PlotTransfer(from,to,index.add(start),amount) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#63)\n\t\t- _transferPlot(msg.sender,o.account,index,start,amount) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#112)\n\t- PodListingCancelled(account,index) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#244)\n\t\t- _cancelPodListing(msg.sender,index) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#110)\n\t- PodOrderFilled(msg.sender,o.account,id,index,start,amount,costInBeans) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#116)\n",
            "markdown": "Reentrancy in [Order._fillPodOrder(Order.PodOrder,uint256,uint256,uint256,LibTransfer.To)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L92-L117):\n\tExternal calls:\n\t- [LibTransfer.sendToken(C.bean(),costInBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L108)\n\tEvent emitted after the call(s):\n\t- [PlotTransfer(from,to,index.add(start),amount)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L63)\n\t\t- [_transferPlot(msg.sender,o.account,index,start,amount)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L112)\n\t- [PodListingCancelled(account,index)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L244)\n\t\t- [_cancelPodListing(msg.sender,index)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L110)\n\t- [PodOrderFilled(msg.sender,o.account,id,index,start,amount,costInBeans)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L116)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0171a35c47a6218c09870b0cdea262616a1cea6f7af8a4f5dd509f6c7f556d77"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111):\n\tExternal calls:\n\t- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)\n\tEvent emitted after the call(s):\n\t- Reward(s.season.current,newHarvestable,newSupply,newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#110)\n",
            "markdown": "Reentrancy in [Sun.rewardBeans(uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L90-L111):\n\tExternal calls:\n\t- [C.bean().mint(address(this),newSupply)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L93)\n\tEvent emitted after the call(s):\n\t- [Reward(s.season.current,newHarvestable,newSupply,newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L110)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Sun.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 111
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "03561f6c641b880c2d764338a4f953c8e2d9f455a5d4c20ca557aa4596c9e016"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83):\n\tExternal calls:\n\t- newHarvestable = rewardBeans(uint256(deltaB)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#73)\n\t\t- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)\n\tEvent emitted after the call(s):\n\t- Soil(s.season.current,amount.toUint128()) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#239)\n\t\t- setSoilAbovePeg(newHarvestable,caseId) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#74)\n",
            "markdown": "Reentrancy in [Sun.stepSun(int256,uint256)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L70-L83):\n\tExternal calls:\n\t- [newHarvestable = rewardBeans(uint256(deltaB))](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L73)\n\t\t- [C.bean().mint(address(this),newSupply)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L93)\n\tEvent emitted after the call(s):\n\t- [Soil(s.season.current,amount.toUint128())](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L239)\n\t\t- [setSoilAbovePeg(newHarvestable,caseId)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L74)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Sun.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "03567905ece99565685cbe21d606547d50fee88b97a6322faef165a18fc425e1"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MockAdminFacet.rewardSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#43-48):\n\tExternal calls:\n\t- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#46)\n\t- rewardBeans(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#47)\n\t\t- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)\n\tEvent emitted after the call(s):\n\t- Reward(s.season.current,newHarvestable,newSupply,newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#110)\n\t\t- rewardBeans(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#47)\n",
            "markdown": "Reentrancy in [MockAdminFacet.rewardSunrise(uint256)](contracts/mocks/mockFacets/MockAdminFacet.sol#L43-L48):\n\tExternal calls:\n\t- [C.bean().mint(address(this),amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L46)\n\t- [rewardBeans(amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L47)\n\t\t- [C.bean().mint(address(this),newSupply)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L93)\n\tEvent emitted after the call(s):\n\t- [Reward(s.season.current,newHarvestable,newSupply,newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L110)\n\t\t- [rewardBeans(amount)](contracts/mocks/mockFacets/MockAdminFacet.sol#L47)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockAdminFacet.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e100b67ce3dbeb7bfb67beb95d5e9c0dc94e185b4ee0628907a0b934447ae5e"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Order._cancelPodOrder(uint24,uint256,uint256,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#150-161):\n\tExternal calls:\n\t- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#158)\n\tEvent emitted after the call(s):\n\t- PodOrderCancelled(msg.sender,id) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#160)\n",
            "markdown": "Reentrancy in [Order._cancelPodOrder(uint24,uint256,uint256,LibTransfer.To)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L150-L161):\n\tExternal calls:\n\t- [LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L158)\n\tEvent emitted after the call(s):\n\t- [PodOrderCancelled(msg.sender,id)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L160)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 161
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "101321c61e38d22f73b9f7e934fd4edafaa8131c4f50860a4f32f088599ca469"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Order._createPodOrder(uint256,uint24,uint256,uint256) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#56-72):\n\tExternal calls:\n\t- _cancelPodOrder(pricePerPod,maxPlaceInLine,minFillAmount,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#67)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#158)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)\n\tExternal calls sending eth:\n\t- _cancelPodOrder(pricePerPod,maxPlaceInLine,minFillAmount,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#67)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tEvent emitted after the call(s):\n\t- PodOrderCreated(msg.sender,id,beanAmount,pricePerPod,maxPlaceInLine,minFillAmount,emptyPricingFunction,LibPolynomial.PriceType.Fixed) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#71)\n",
            "markdown": "Reentrancy in [Order._createPodOrder(uint256,uint24,uint256,uint256)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L56-L72):\n\tExternal calls:\n\t- [_cancelPodOrder(pricePerPod,maxPlaceInLine,minFillAmount,LibTransfer.To.INTERNAL)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L67)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#L69)\n\t\t- [LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L158)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\t\t- [token.safeTransfer(recipient,amount)](contracts/libraries/Token/LibTransfer.sol#L82)\n\tExternal calls sending eth:\n\t- [_cancelPodOrder(pricePerPod,maxPlaceInLine,minFillAmount,LibTransfer.To.INTERNAL)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L67)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\tEvent emitted after the call(s):\n\t- [PodOrderCreated(msg.sender,id,beanAmount,pricePerPod,maxPlaceInLine,minFillAmount,emptyPricingFunction,LibPolynomial.PriceType.Fixed)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L71)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 72
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "17d5613b26ba92e03c121c22821a532d0d0fc628444b6ea216aaf9f09dddcbdd"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in InitDiamond.init() (contracts/beanstalk/init/InitDiamond.sol#31-69):\n\tExternal calls:\n\t- C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#38)\n\t- C.bean().approve(C.curveZapAddress(),type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#39)\n\t- C.usdc().approve(C.curveZapAddress(),type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#40)\n\t- C.bean().mint(msg.sender,LibIncentive.MAX_REWARD) (contracts/beanstalk/init/InitDiamond.sol#67)\n\tEvent emitted after the call(s):\n\t- Incentivization(msg.sender,LibIncentive.MAX_REWARD) (contracts/beanstalk/init/InitDiamond.sol#68)\n",
            "markdown": "Reentrancy in [InitDiamond.init()](contracts/beanstalk/init/InitDiamond.sol#L31-L69):\n\tExternal calls:\n\t- [C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max)](contracts/beanstalk/init/InitDiamond.sol#L38)\n\t- [C.bean().approve(C.curveZapAddress(),type()(uint256).max)](contracts/beanstalk/init/InitDiamond.sol#L39)\n\t- [C.usdc().approve(C.curveZapAddress(),type()(uint256).max)](contracts/beanstalk/init/InitDiamond.sol#L40)\n\t- [C.bean().mint(msg.sender,LibIncentive.MAX_REWARD)](contracts/beanstalk/init/InitDiamond.sol#L67)\n\tEvent emitted after the call(s):\n\t- [Incentivization(msg.sender,LibIncentive.MAX_REWARD)](contracts/beanstalk/init/InitDiamond.sol#L68)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitDiamond.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2ed2f28633df32c0341ea5cae27a10953ee8047d986afe1563c2a3c88f12e05d"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Silo._claimPlenty(address) (contracts/beanstalk/silo/SiloFacet/Silo.sol#149-156):\n\tExternal calls:\n\t- C.threeCrv().safeTransfer(account,plenty) (contracts/beanstalk/silo/SiloFacet/Silo.sol#152)\n\tEvent emitted after the call(s):\n\t- ClaimPlenty(account,plenty) (contracts/beanstalk/silo/SiloFacet/Silo.sol#155)\n",
            "markdown": "Reentrancy in [Silo._claimPlenty(address)](contracts/beanstalk/silo/SiloFacet/Silo.sol#L149-L156):\n\tExternal calls:\n\t- [C.threeCrv().safeTransfer(account,plenty)](contracts/beanstalk/silo/SiloFacet/Silo.sol#L152)\n\tEvent emitted after the call(s):\n\t- [ClaimPlenty(account,plenty)](contracts/beanstalk/silo/SiloFacet/Silo.sol#L155)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/SiloFacet/Silo.sol"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "412b68272fc45a79d3ee3306c6873a3f4d9fffaa3bcc6692696cc2003d90200d"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MockWETH.withdraw(uint256) (contracts/mocks/MockWETH.sol#27-33):\n\tExternal calls:\n\t- (success) = msg.sender.call{value: wad}() (contracts/mocks/MockWETH.sol#30)\n\tEvent emitted after the call(s):\n\t- Withdrawal(msg.sender,wad) (contracts/mocks/MockWETH.sol#32)\n",
            "markdown": "Reentrancy in [MockWETH.withdraw(uint256)](contracts/mocks/MockWETH.sol#L27-L33):\n\tExternal calls:\n\t- [(success) = msg.sender.call{value: wad}()](contracts/mocks/MockWETH.sol#L30)\n\tEvent emitted after the call(s):\n\t- [Withdrawal(msg.sender,wad)](contracts/mocks/MockWETH.sol#L32)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockWETH.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "418a9d44c1ea86c37b6b828ec357b200a38b6cf38f37b3b6997e572192a11e78"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MockInitDiamond.init() (contracts/mocks/MockInitDiamond.sol#25-61):\n\tExternal calls:\n\t- C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#27)\n\t- C.bean().approve(C.curveZapAddress(),type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#28)\n\t- C.usdc().approve(C.curveZapAddress(),type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#29)\n\tEvent emitted after the call(s):\n\t- WhitelistToken(token,selector,stalkEarnedPerSeason,stalkIssuedPerBdv) (contracts/libraries/Silo/LibLegacyWhitelist.sol#56)\n\t\t- whitelistPools() (contracts/mocks/MockInitDiamond.sol#60)\n",
            "markdown": "Reentrancy in [MockInitDiamond.init()](contracts/mocks/MockInitDiamond.sol#L25-L61):\n\tExternal calls:\n\t- [C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max)](contracts/mocks/MockInitDiamond.sol#L27)\n\t- [C.bean().approve(C.curveZapAddress(),type()(uint256).max)](contracts/mocks/MockInitDiamond.sol#L28)\n\t- [C.usdc().approve(C.curveZapAddress(),type()(uint256).max)](contracts/mocks/MockInitDiamond.sol#L29)\n\tEvent emitted after the call(s):\n\t- [WhitelistToken(token,selector,stalkEarnedPerSeason,stalkIssuedPerBdv)](contracts/libraries/Silo/LibLegacyWhitelist.sol#L56)\n\t\t- [whitelistPools()](contracts/mocks/MockInitDiamond.sol#L60)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockInitDiamond.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "420a65fc91e6c32a6fdc625ddda4b367496973aab04f5764988ba1aa65bb4b34"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Fertilizer.beanstalkMint(address,uint256,uint128,uint128) (contracts/tokens/Fertilizer/Fertilizer.sol#36-49):\n\tExternal calls:\n\t- _update(account,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#40)\n\t\t- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)\n\t- _safeMint(account,id,amount,bytes(0)) (contracts/tokens/Fertilizer/Fertilizer.sol#43-48)\n\t\t- IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data) (contracts/tokens/Fertilizer/Fertilizer1155.sol#109-117)\n\tEvent emitted after the call(s):\n\t- TransferSingle(operator,address(0),to,id,amount) (contracts/tokens/Fertilizer/Fertilizer1155.sol#91)\n\t\t- _safeMint(account,id,amount,bytes(0)) (contracts/tokens/Fertilizer/Fertilizer.sol#43-48)\n",
            "markdown": "Reentrancy in [Fertilizer.beanstalkMint(address,uint256,uint128,uint128)](contracts/tokens/Fertilizer/Fertilizer.sol#L36-L49):\n\tExternal calls:\n\t- [_update(account,ids,bpf)](contracts/tokens/Fertilizer/Fertilizer.sol#L40)\n\t\t- [IBS(owner()).payFertilizer(account,amount)](contracts/tokens/Fertilizer/Fertilizer.sol#L70)\n\t- [_safeMint(account,id,amount,bytes(0))](contracts/tokens/Fertilizer/Fertilizer.sol#L43-L48)\n\t\t- [IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data)](contracts/tokens/Fertilizer/Fertilizer1155.sol#L109-L117)\n\tEvent emitted after the call(s):\n\t- [TransferSingle(operator,address(0),to,id,amount)](contracts/tokens/Fertilizer/Fertilizer1155.sol#L91)\n\t\t- [_safeMint(account,id,amount,bytes(0))](contracts/tokens/Fertilizer/Fertilizer.sol#L43-L48)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "466db8677c2a615b9eb68adf72974153d8489285b5270503d910c41877330c03"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Order._cancelPodOrderV2(uint256,uint256,bytes,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#163-175):\n\tExternal calls:\n\t- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#171)\n\tEvent emitted after the call(s):\n\t- PodOrderCancelled(msg.sender,id) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#174)\n",
            "markdown": "Reentrancy in [Order._cancelPodOrderV2(uint256,uint256,bytes,LibTransfer.To)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L163-L175):\n\tExternal calls:\n\t- [LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L171)\n\tEvent emitted after the call(s):\n\t- [PodOrderCancelled(msg.sender,id)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L174)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 175
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4cacce638b84fffa9082940991a319de6b0a5ac9e0489586d9316c8155420e01"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MarketplaceFacet.fillPodListingV2(Listing.PodListing,uint256,bytes,LibTransfer.From) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#81-96):\n\tExternal calls:\n\t- beanAmount = LibTransfer.transferToken(C.bean(),msg.sender,l.account,beanAmount,mode,l.mode) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#87-94)\n\tEvent emitted after the call(s):\n\t- PlotTransfer(from,to,index.add(start),amount) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#63)\n\t\t- _fillListingV2(l,beanAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#95)\n\t- PodListingFilled(l.account,to,l.index,l.start,amount,beanAmount) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#229)\n\t\t- _fillListingV2(l,beanAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#95)\n",
            "markdown": "Reentrancy in [MarketplaceFacet.fillPodListingV2(Listing.PodListing,uint256,bytes,LibTransfer.From)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L81-L96):\n\tExternal calls:\n\t- [beanAmount = LibTransfer.transferToken(C.bean(),msg.sender,l.account,beanAmount,mode,l.mode)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L87-L94)\n\tEvent emitted after the call(s):\n\t- [PlotTransfer(from,to,index.add(start),amount)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L63)\n\t\t- [_fillListingV2(l,beanAmount,pricingFunction)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L95)\n\t- [PodListingFilled(l.account,to,l.index,l.start,amount,beanAmount)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L229)\n\t\t- [_fillListingV2(l,beanAmount,pricingFunction)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L95)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5018d5def6e587e14c6fea05e7a31e4b6454b06bab14e2dbb525ab07914da05a"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Order._fillPodOrderV2(Order.PodOrder,uint256,uint256,uint256,bytes,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#119-145):\n\tExternal calls:\n\t- LibTransfer.sendToken(C.bean(),costInBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#136)\n\tEvent emitted after the call(s):\n\t- PlotTransfer(from,to,index.add(start),amount) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#63)\n\t\t- _transferPlot(msg.sender,o.account,index,start,amount) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#140)\n\t- PodListingCancelled(account,index) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#244)\n\t\t- _cancelPodListing(msg.sender,index) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#138)\n\t- PodOrderFilled(msg.sender,o.account,id,index,start,amount,costInBeans) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#144)\n",
            "markdown": "Reentrancy in [Order._fillPodOrderV2(Order.PodOrder,uint256,uint256,uint256,bytes,LibTransfer.To)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L119-L145):\n\tExternal calls:\n\t- [LibTransfer.sendToken(C.bean(),costInBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L136)\n\tEvent emitted after the call(s):\n\t- [PlotTransfer(from,to,index.add(start),amount)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L63)\n\t\t- [_transferPlot(msg.sender,o.account,index,start,amount)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L140)\n\t- [PodListingCancelled(account,index)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L244)\n\t\t- [_cancelPodListing(msg.sender,index)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L138)\n\t- [PodOrderFilled(msg.sender,o.account,id,index,start,amount,costInBeans)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L144)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 145
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5035e1ec60d06cbb7ebaf5368034d852651f652b2938b637cd255473943eb48d"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in LibTransfer.transferToken(IERC20,address,address,uint256,LibTransfer.From,LibTransfer.To) (contracts/libraries/Token/LibTransfer.sol#30-46):\n\tExternal calls:\n\t- amount = receiveToken(token,amount,sender,fromMode) (contracts/libraries/Token/LibTransfer.sol#43)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- token.safeTransferFrom(sender,address(this),amount - receivedAmount) (contracts/libraries/Token/LibTransfer.sol#66)\n\t- sendToken(token,amount,recipient,toMode) (contracts/libraries/Token/LibTransfer.sol#44)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)\n\tExternal calls sending eth:\n\t- amount = receiveToken(token,amount,sender,fromMode) (contracts/libraries/Token/LibTransfer.sol#43)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t- sendToken(token,amount,recipient,toMode) (contracts/libraries/Token/LibTransfer.sol#44)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tEvent emitted after the call(s):\n\t- InternalBalanceChanged(account,token,delta) (contracts/libraries/Token/LibBalance.sol#102)\n\t\t- sendToken(token,amount,recipient,toMode) (contracts/libraries/Token/LibTransfer.sol#44)\n",
            "markdown": "Reentrancy in [LibTransfer.transferToken(IERC20,address,address,uint256,LibTransfer.From,LibTransfer.To)](contracts/libraries/Token/LibTransfer.sol#L30-L46):\n\tExternal calls:\n\t- [amount = receiveToken(token,amount,sender,fromMode)](contracts/libraries/Token/LibTransfer.sol#L43)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#L69)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\t\t- [token.safeTransferFrom(sender,address(this),amount - receivedAmount)](contracts/libraries/Token/LibTransfer.sol#L66)\n\t- [sendToken(token,amount,recipient,toMode)](contracts/libraries/Token/LibTransfer.sol#L44)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#L69)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\t\t- [token.safeTransfer(recipient,amount)](contracts/libraries/Token/LibTransfer.sol#L82)\n\tExternal calls sending eth:\n\t- [amount = receiveToken(token,amount,sender,fromMode)](contracts/libraries/Token/LibTransfer.sol#L43)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\t- [sendToken(token,amount,recipient,toMode)](contracts/libraries/Token/LibTransfer.sol#L44)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\tEvent emitted after the call(s):\n\t- [InternalBalanceChanged(account,token,delta)](contracts/libraries/Token/LibBalance.sol#L102)\n\t\t- [sendToken(token,amount,recipient,toMode)](contracts/libraries/Token/LibTransfer.sol#L44)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibTransfer.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "52a0fd79064869998e5047efa193d6ab5d0f294d993f8401005f76437dfa141b"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MockUniswapV3Pool.flash(address,uint256,uint256,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#800-843):\n\tExternal calls:\n\t- TransferHelper.safeTransfer(token0,recipient,amount0) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#814)\n\t- TransferHelper.safeTransfer(token1,recipient,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#815)\n\t- IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0,fee1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#817)\n\tEvent emitted after the call(s):\n\t- Flash(msg.sender,recipient,amount0,amount1,paid0,paid1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#842)\n",
            "markdown": "Reentrancy in [MockUniswapV3Pool.flash(address,uint256,uint256,bytes)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L800-L843):\n\tExternal calls:\n\t- [TransferHelper.safeTransfer(token0,recipient,amount0)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L814)\n\t- [TransferHelper.safeTransfer(token1,recipient,amount1)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L815)\n\t- [IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0,fee1,data)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L817)\n\tEvent emitted after the call(s):\n\t- [Flash(msg.sender,recipient,amount0,amount1,paid0,paid1)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L842)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 800,
                  "endLine": 843
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "54a681f6409877eacc7632c9d59f0aed8d85537a13295e3bebce3fb460a2ee8d"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150):\n\tExternal calls:\n\t- LibTransfer.mintToken(C.bean(),incentiveAmount,account,mode) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#146)\n\tEvent emitted after the call(s):\n\t- Incentivization(account,incentiveAmount) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#148)\n",
            "markdown": "Reentrancy in [SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L131-L150):\n\tExternal calls:\n\t- [LibTransfer.mintToken(C.bean(),incentiveAmount,account,mode)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L146)\n\tEvent emitted after the call(s):\n\t- [Incentivization(account,incentiveAmount)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L148)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol"
                },
                "region": {
                  "startLine": 131,
                  "endLine": 150
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5a02d64c61b7ce35735bf3b9af6b9091ca1cfb824358d94e8d8f3cfa27f20152"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in LibFertilizer.addFertilizer(uint128,uint128,uint256) (contracts/libraries/LibFertilizer.sol#32-56):\n\tExternal calls:\n\t- addUnderlying(_amount.mul(DECIMALS),minLP) (contracts/libraries/LibFertilizer.sol#50)\n\t\t- C.bean().mint(address(this),newDepositedBeans.add(newDepositedLPBeans)) (contracts/libraries/LibFertilizer.sol#90-93)\n\t\t- newLP = C.curveZap().add_liquidity(C.CURVE_BEAN_METAPOOL,(newDepositedLPBeans,0,amount,0),minAmountOut) (contracts/libraries/LibFertilizer.sol#95-99)\n\tEvent emitted after the call(s):\n\t- SetFertilizer(id,bpf) (contracts/libraries/LibFertilizer.sol#55)\n",
            "markdown": "Reentrancy in [LibFertilizer.addFertilizer(uint128,uint128,uint256)](contracts/libraries/LibFertilizer.sol#L32-L56):\n\tExternal calls:\n\t- [addUnderlying(_amount.mul(DECIMALS),minLP)](contracts/libraries/LibFertilizer.sol#L50)\n\t\t- [C.bean().mint(address(this),newDepositedBeans.add(newDepositedLPBeans))](contracts/libraries/LibFertilizer.sol#L90-L93)\n\t\t- [newLP = C.curveZap().add_liquidity(C.CURVE_BEAN_METAPOOL,(newDepositedLPBeans,0,amount,0),minAmountOut)](contracts/libraries/LibFertilizer.sol#L95-L99)\n\tEvent emitted after the call(s):\n\t- [SetFertilizer(id,bpf)](contracts/libraries/LibFertilizer.sol#L55)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibFertilizer.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 56
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5a7a6adcaac40da58d19e601f3d3dd1f067bd78dc8d20bf422494ad145259379"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MockUniswapV3Pool.collectProtocol(address,uint128,uint128) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#857-877):\n\tExternal calls:\n\t- TransferHelper.safeTransfer(token0,recipient,amount0) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#868)\n\t- TransferHelper.safeTransfer(token1,recipient,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#873)\n\tEvent emitted after the call(s):\n\t- CollectProtocol(msg.sender,recipient,amount0,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#876)\n",
            "markdown": "Reentrancy in [MockUniswapV3Pool.collectProtocol(address,uint128,uint128)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L857-L877):\n\tExternal calls:\n\t- [TransferHelper.safeTransfer(token0,recipient,amount0)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L868)\n\t- [TransferHelper.safeTransfer(token1,recipient,amount1)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L873)\n\tEvent emitted after the call(s):\n\t- [CollectProtocol(msg.sender,recipient,amount0,amount1)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L876)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 857,
                  "endLine": 877
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d489601756d7f4329e1ca50695869856be541416a34a7fb7f7c75d201f20ee2"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in FertilizerPreMint.initialize(string) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#37-40):\n\tExternal calls:\n\t- IERC20(WETH).approve(SWAP_ROUTER,type()(uint256).max) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#38)\n\tEvent emitted after the call(s):\n\t- OwnershipTransferred(address(0),msgSender) (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#35)\n\t\t- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)\n",
            "markdown": "Reentrancy in [FertilizerPreMint.initialize(string)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L37-L40):\n\tExternal calls:\n\t- [IERC20(WETH).approve(SWAP_ROUTER,type()(uint256).max)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L38)\n\tEvent emitted after the call(s):\n\t- [OwnershipTransferred(address(0),msgSender)](node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#L35)\n\t\t- [__Internallize_init(_uri)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L39)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/FertilizerPreMint.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6a165309ecb00a72ae733fee764803f3329d6fb03b7f71f7ed25327ae3a8eff3"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#466-496):\n\tExternal calls:\n\t- IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0,amount1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#491)\n\tEvent emitted after the call(s):\n\t- Mint(msg.sender,recipient,tickLower,tickUpper,amount,amount0,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#495)\n",
            "markdown": "Reentrancy in [MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L466-L496):\n\tExternal calls:\n\t- [IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0,amount1,data)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L491)\n\tEvent emitted after the call(s):\n\t- [Mint(msg.sender,recipient,tickLower,tickUpper,amount,amount0,amount1)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L495)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 466,
                  "endLine": 496
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7e93c526614754533708f40c6f47801f6bac01ad5ef156207fde0d430f585707"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in SeasonFacet.gm(address,LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#47-62):\n\tExternal calls:\n\t- caseId = stepWeather(deltaB) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#58)\n\t\t- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)\n\t\t- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)\n\t\t- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)\n\t- stepSun(deltaB,caseId) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#59)\n\t\t- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)\n\t- incentivize(account,initialGasLeft,balances,mode) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#61)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- token.mint(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#110)\n\t\t- LibTransfer.mintToken(C.bean(),incentiveAmount,account,mode) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#146)\n\t\t- token.mint(address(this),amount) (contracts/libraries/Token/LibTransfer.sol#112)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)\n\tExternal calls sending eth:\n\t- incentivize(account,initialGasLeft,balances,mode) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#61)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tEvent emitted after the call(s):\n\t- Incentivization(account,incentiveAmount) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#148)\n\t\t- incentivize(account,initialGasLeft,balances,mode) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#61)\n\t- InternalBalanceChanged(account,token,delta) (contracts/libraries/Token/LibBalance.sol#102)\n\t\t- incentivize(account,initialGasLeft,balances,mode) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#61)\n",
            "markdown": "Reentrancy in [SeasonFacet.gm(address,LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L47-L62):\n\tExternal calls:\n\t- [caseId = stepWeather(deltaB)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L58)\n\t\t- [C.bean().mint(address(this),newHarvestable.add(sopBeans))](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L270)\n\t\t- [C.bean().mint(address(this),sopBeans)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L272)\n\t\t- [amountOut = C.curveMetapool().exchange(0,1,sopBeans,0)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L276)\n\t- [stepSun(deltaB,caseId)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L59)\n\t\t- [C.bean().mint(address(this),newSupply)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L93)\n\t- [incentivize(account,initialGasLeft,balances,mode)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L61)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#L69)\n\t\t- [token.mint(recipient,amount)](contracts/libraries/Token/LibTransfer.sol#L110)\n\t\t- [LibTransfer.mintToken(C.bean(),incentiveAmount,account,mode)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L146)\n\t\t- [token.mint(address(this),amount)](contracts/libraries/Token/LibTransfer.sol#L112)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\t\t- [token.safeTransfer(recipient,amount)](contracts/libraries/Token/LibTransfer.sol#L82)\n\tExternal calls sending eth:\n\t- [incentivize(account,initialGasLeft,balances,mode)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L61)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\tEvent emitted after the call(s):\n\t- [Incentivization(account,incentiveAmount)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L148)\n\t\t- [incentivize(account,initialGasLeft,balances,mode)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L61)\n\t- [InternalBalanceChanged(account,token,delta)](contracts/libraries/Token/LibBalance.sol#L102)\n\t\t- [incentivize(account,initialGasLeft,balances,mode)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L61)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "83a64d92255f62a68dc87ae9bf7fd5ad6d7bbc2a451886f9a070884589d4816b"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797):\n\tExternal calls:\n\t- TransferHelper.safeTransfer(token1,recipient,uint256(- amount1)) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#782)\n\t- IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#785)\n\t- TransferHelper.safeTransfer(token0,recipient,uint256(- amount0)) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#788)\n\t- IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#791)\n\tEvent emitted after the call(s):\n\t- Swap(msg.sender,recipient,amount0,amount1,state.sqrtPriceX96,state.liquidity,state.tick) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#795)\n",
            "markdown": "Reentrancy in [MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L605-L797):\n\tExternal calls:\n\t- [TransferHelper.safeTransfer(token1,recipient,uint256(- amount1))](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L782)\n\t- [IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L785)\n\t- [TransferHelper.safeTransfer(token0,recipient,uint256(- amount0))](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L788)\n\t- [IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L791)\n\tEvent emitted after the call(s):\n\t- [Swap(msg.sender,recipient,amount0,amount1,state.sqrtPriceX96,state.liquidity,state.tick)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L795)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 605,
                  "endLine": 797
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9266d54b43944c1de2465c21bba5ed52960302df9e66f062cfb1c5f8e857962a"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#499-522):\n\tExternal calls:\n\t- TransferHelper.safeTransfer(token0,recipient,amount0) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#514)\n\t- TransferHelper.safeTransfer(token1,recipient,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#518)\n\tEvent emitted after the call(s):\n\t- Collect(msg.sender,recipient,tickLower,tickUpper,amount0,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#521)\n",
            "markdown": "Reentrancy in [MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L499-L522):\n\tExternal calls:\n\t- [TransferHelper.safeTransfer(token0,recipient,amount0)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L514)\n\t- [TransferHelper.safeTransfer(token1,recipient,amount1)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L518)\n\tEvent emitted after the call(s):\n\t- [Collect(msg.sender,recipient,tickLower,tickUpper,amount0,amount1)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L521)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 499,
                  "endLine": 522
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "97a167769ab5bc31545cf272d99685d212e210d3fdba515bf5c4914d86163627"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in SeasonFacet.gm(address,LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#47-62):\n\tExternal calls:\n\t- caseId = stepWeather(deltaB) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#58)\n\t\t- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)\n\t\t- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)\n\t\t- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)\n\t- stepSun(deltaB,caseId) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#59)\n\t\t- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)\n\tEvent emitted after the call(s):\n\t- Reward(s.season.current,newHarvestable,newSupply,newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#110)\n\t\t- stepSun(deltaB,caseId) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#59)\n\t- Soil(s.season.current,amount.toUint128()) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#239)\n\t\t- stepSun(deltaB,caseId) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#59)\n",
            "markdown": "Reentrancy in [SeasonFacet.gm(address,LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L47-L62):\n\tExternal calls:\n\t- [caseId = stepWeather(deltaB)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L58)\n\t\t- [C.bean().mint(address(this),newHarvestable.add(sopBeans))](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L270)\n\t\t- [C.bean().mint(address(this),sopBeans)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L272)\n\t\t- [amountOut = C.curveMetapool().exchange(0,1,sopBeans,0)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L276)\n\t- [stepSun(deltaB,caseId)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L59)\n\t\t- [C.bean().mint(address(this),newSupply)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L93)\n\tEvent emitted after the call(s):\n\t- [Reward(s.season.current,newHarvestable,newSupply,newFertilized)](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L110)\n\t\t- [stepSun(deltaB,caseId)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L59)\n\t- [Soil(s.season.current,amount.toUint128())](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L239)\n\t\t- [stepSun(deltaB,caseId)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L59)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "98196b3f657bd3a9e2eb546b354a8273e6f066555ed0b06870de7a1fc17915cb"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MarketplaceFacet.fillPodListing(Listing.PodListing,uint256,LibTransfer.From) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#65-79):\n\tExternal calls:\n\t- beanAmount = LibTransfer.transferToken(C.bean(),msg.sender,l.account,beanAmount,mode,l.mode) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#70-77)\n\tEvent emitted after the call(s):\n\t- PlotTransfer(from,to,index.add(start),amount) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#63)\n\t\t- _fillListing(l,beanAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#78)\n\t- PodListingFilled(l.account,to,l.index,l.start,amount,beanAmount) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#202)\n\t\t- _fillListing(l,beanAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#78)\n",
            "markdown": "Reentrancy in [MarketplaceFacet.fillPodListing(Listing.PodListing,uint256,LibTransfer.From)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L65-L79):\n\tExternal calls:\n\t- [beanAmount = LibTransfer.transferToken(C.bean(),msg.sender,l.account,beanAmount,mode,l.mode)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L70-L77)\n\tEvent emitted after the call(s):\n\t- [PlotTransfer(from,to,index.add(start),amount)](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L63)\n\t\t- [_fillListing(l,beanAmount)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L78)\n\t- [PodListingFilled(l.account,to,l.index,l.start,amount,beanAmount)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L202)\n\t\t- [_fillListing(l,beanAmount)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L78)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 79
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a556a7ee9406881b21a94b7ddadc1f77386644808aa2eaf742e21de659402da6"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Order._createPodOrderV2(uint256,uint256,uint256,bytes) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#74-86):\n\tExternal calls:\n\t- _cancelPodOrderV2(maxPlaceInLine,minFillAmount,pricingFunction,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#82)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#171)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)\n\tExternal calls sending eth:\n\t- _cancelPodOrderV2(maxPlaceInLine,minFillAmount,pricingFunction,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#82)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tEvent emitted after the call(s):\n\t- PodOrderCreated(msg.sender,id,beanAmount,0,maxPlaceInLine,minFillAmount,pricingFunction,LibPolynomial.PriceType.Dynamic) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#85)\n",
            "markdown": "Reentrancy in [Order._createPodOrderV2(uint256,uint256,uint256,bytes)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L74-L86):\n\tExternal calls:\n\t- [_cancelPodOrderV2(maxPlaceInLine,minFillAmount,pricingFunction,LibTransfer.To.INTERNAL)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L82)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#L69)\n\t\t- [LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L171)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\t\t- [token.safeTransfer(recipient,amount)](contracts/libraries/Token/LibTransfer.sol#L82)\n\tExternal calls sending eth:\n\t- [_cancelPodOrderV2(maxPlaceInLine,minFillAmount,pricingFunction,LibTransfer.To.INTERNAL)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L82)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\tEvent emitted after the call(s):\n\t- [PodOrderCreated(msg.sender,id,beanAmount,0,maxPlaceInLine,minFillAmount,pricingFunction,LibPolynomial.PriceType.Dynamic)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L85)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 86
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c37d3daf2dc9f94e9778610032a74ec63110cb3e48e59746172ffdee306f226a"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280):\n\tExternal calls:\n\t- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)\n\t- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)\n\t- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)\n\tEvent emitted after the call(s):\n\t- SeasonOfPlenty(s.season.current,amountOut,newHarvestable) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#279)\n",
            "markdown": "Reentrancy in [Weather.sop()](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L259-L280):\n\tExternal calls:\n\t- [C.bean().mint(address(this),newHarvestable.add(sopBeans))](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L270)\n\t- [C.bean().mint(address(this),sopBeans)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L272)\n\t- [amountOut = C.curveMetapool().exchange(0,1,sopBeans,0)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L276)\n\tEvent emitted after the call(s):\n\t- [SeasonOfPlenty(s.season.current,amountOut,newHarvestable)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L279)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Weather.sol"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 280
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c59783d8802d4ed90860213f89cad1354d163146bcc8fe77741ad49d429cc61a"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in FundraiserFacet.createFundraiser(address,address,uint256) (contracts/beanstalk/field/FundraiserFacet.sol#66-94):\n\tExternal calls:\n\t- C.bean().mint(address(this),amount) (contracts/beanstalk/field/FundraiserFacet.sol#91)\n\tEvent emitted after the call(s):\n\t- CreateFundraiser(id,payee,token,amount) (contracts/beanstalk/field/FundraiserFacet.sol#93)\n",
            "markdown": "Reentrancy in [FundraiserFacet.createFundraiser(address,address,uint256)](contracts/beanstalk/field/FundraiserFacet.sol#L66-L94):\n\tExternal calls:\n\t- [C.bean().mint(address(this),amount)](contracts/beanstalk/field/FundraiserFacet.sol#L91)\n\tEvent emitted after the call(s):\n\t- [CreateFundraiser(id,payee,token,amount)](contracts/beanstalk/field/FundraiserFacet.sol#L93)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/field/FundraiserFacet.sol"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 94
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cbf1d50770ea73571d0f45c863110887254eb3855c89a52b2ee4b276dac7e8ee"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Fertilizer._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes) (contracts/tokens/Fertilizer/Fertilizer.sol#51-62):\n\tExternal calls:\n\t- _update(from,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#60)\n\t\t- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)\n\t- _update(to,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#61)\n\t\t- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)\n\tEvent emitted after the call(s):\n\t- ClaimFertilizer(ids,beans) (contracts/tokens/Fertilizer/Fertilizer.sol#86)\n\t\t- _update(to,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#61)\n",
            "markdown": "Reentrancy in [Fertilizer._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)](contracts/tokens/Fertilizer/Fertilizer.sol#L51-L62):\n\tExternal calls:\n\t- [_update(from,ids,bpf)](contracts/tokens/Fertilizer/Fertilizer.sol#L60)\n\t\t- [IBS(owner()).payFertilizer(account,amount)](contracts/tokens/Fertilizer/Fertilizer.sol#L70)\n\t- [_update(to,ids,bpf)](contracts/tokens/Fertilizer/Fertilizer.sol#L61)\n\t\t- [IBS(owner()).payFertilizer(account,amount)](contracts/tokens/Fertilizer/Fertilizer.sol#L70)\n\tEvent emitted after the call(s):\n\t- [ClaimFertilizer(ids,beans)](contracts/tokens/Fertilizer/Fertilizer.sol#L86)\n\t\t- [_update(to,ids,bpf)](contracts/tokens/Fertilizer/Fertilizer.sol#L61)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4bfe9bef8858915b828b02e1117e41a3b7a1aea6d492660fe0d6bda855b3f9c"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in LibTransfer.mintToken(IBean,uint256,address,LibTransfer.To) (contracts/libraries/Token/LibTransfer.sol#103-115):\n\tExternal calls:\n\t- token.mint(address(this),amount) (contracts/libraries/Token/LibTransfer.sol#112)\n\t- LibTransfer.sendToken(token,amount,recipient,mode) (contracts/libraries/Token/LibTransfer.sol#113)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)\n\tExternal calls sending eth:\n\t- LibTransfer.sendToken(token,amount,recipient,mode) (contracts/libraries/Token/LibTransfer.sol#113)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tEvent emitted after the call(s):\n\t- InternalBalanceChanged(account,token,delta) (contracts/libraries/Token/LibBalance.sol#102)\n\t\t- LibTransfer.sendToken(token,amount,recipient,mode) (contracts/libraries/Token/LibTransfer.sol#113)\n",
            "markdown": "Reentrancy in [LibTransfer.mintToken(IBean,uint256,address,LibTransfer.To)](contracts/libraries/Token/LibTransfer.sol#L103-L115):\n\tExternal calls:\n\t- [token.mint(address(this),amount)](contracts/libraries/Token/LibTransfer.sol#L112)\n\t- [LibTransfer.sendToken(token,amount,recipient,mode)](contracts/libraries/Token/LibTransfer.sol#L113)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#L69)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\t\t- [token.safeTransfer(recipient,amount)](contracts/libraries/Token/LibTransfer.sol#L82)\n\tExternal calls sending eth:\n\t- [LibTransfer.sendToken(token,amount,recipient,mode)](contracts/libraries/Token/LibTransfer.sol#L113)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\tEvent emitted after the call(s):\n\t- [InternalBalanceChanged(account,token,delta)](contracts/libraries/Token/LibBalance.sol#L102)\n\t\t- [LibTransfer.sendToken(token,amount,recipient,mode)](contracts/libraries/Token/LibTransfer.sol#L113)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibTransfer.sol"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 115
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ea5774acce9a85b557ca99379f8d1534751ca62e009c6ea929574ed5cd5546fc"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MarketplaceFacet.createPodOrderV2(uint256,uint256,uint256,bytes,LibTransfer.From) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#124-133):\n\tExternal calls:\n\t- beanAmount = LibTransfer.receiveToken(C.bean(),beanAmount,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#131)\n\t- _createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#132)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#171)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)\n\tExternal calls sending eth:\n\t- _createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#132)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tEvent emitted after the call(s):\n\t- InternalBalanceChanged(account,token,delta) (contracts/libraries/Token/LibBalance.sol#102)\n\t\t- _createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#132)\n\t- PodOrderCancelled(msg.sender,id) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#174)\n\t\t- _createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#132)\n\t- PodOrderCreated(msg.sender,id,beanAmount,0,maxPlaceInLine,minFillAmount,pricingFunction,LibPolynomial.PriceType.Dynamic) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#85)\n\t\t- _createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#132)\n",
            "markdown": "Reentrancy in [MarketplaceFacet.createPodOrderV2(uint256,uint256,uint256,bytes,LibTransfer.From)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L124-L133):\n\tExternal calls:\n\t- [beanAmount = LibTransfer.receiveToken(C.bean(),beanAmount,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L131)\n\t- [_createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L132)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#L69)\n\t\t- [LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L171)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\t\t- [token.safeTransfer(recipient,amount)](contracts/libraries/Token/LibTransfer.sol#L82)\n\tExternal calls sending eth:\n\t- [_createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L132)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\tEvent emitted after the call(s):\n\t- [InternalBalanceChanged(account,token,delta)](contracts/libraries/Token/LibBalance.sol#L102)\n\t\t- [_createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L132)\n\t- [PodOrderCancelled(msg.sender,id)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L174)\n\t\t- [_createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L132)\n\t- [PodOrderCreated(msg.sender,id,beanAmount,0,maxPlaceInLine,minFillAmount,pricingFunction,LibPolynomial.PriceType.Dynamic)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L85)\n\t\t- [_createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L132)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol"
                },
                "region": {
                  "startLine": 124,
                  "endLine": 133
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eaeb141f4dc634daa86ba4275a0e5e773a5450cb877d0c6c871a99df654dace5"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in MarketplaceFacet.createPodOrder(uint256,uint24,uint256,uint256,LibTransfer.From) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#113-122):\n\tExternal calls:\n\t- beanAmount = LibTransfer.receiveToken(C.bean(),beanAmount,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#120)\n\t- _createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#121)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)\n\t\t- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#158)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)\n\tExternal calls sending eth:\n\t- _createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#121)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tEvent emitted after the call(s):\n\t- InternalBalanceChanged(account,token,delta) (contracts/libraries/Token/LibBalance.sol#102)\n\t\t- _createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#121)\n\t- PodOrderCancelled(msg.sender,id) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#160)\n\t\t- _createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#121)\n\t- PodOrderCreated(msg.sender,id,beanAmount,pricePerPod,maxPlaceInLine,minFillAmount,emptyPricingFunction,LibPolynomial.PriceType.Fixed) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#71)\n\t\t- _createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#121)\n",
            "markdown": "Reentrancy in [MarketplaceFacet.createPodOrder(uint256,uint24,uint256,uint256,LibTransfer.From)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L113-L122):\n\tExternal calls:\n\t- [beanAmount = LibTransfer.receiveToken(C.bean(),beanAmount,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L120)\n\t- [_createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L121)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#L69)\n\t\t- [LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L158)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\t\t- [token.safeTransfer(recipient,amount)](contracts/libraries/Token/LibTransfer.sol#L82)\n\tExternal calls sending eth:\n\t- [_createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L121)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n\tEvent emitted after the call(s):\n\t- [InternalBalanceChanged(account,token,delta)](contracts/libraries/Token/LibBalance.sol#L102)\n\t\t- [_createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L121)\n\t- [PodOrderCancelled(msg.sender,id)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L160)\n\t\t- [_createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L121)\n\t- [PodOrderCreated(msg.sender,id,beanAmount,pricePerPod,maxPlaceInLine,minFillAmount,emptyPricingFunction,LibPolynomial.PriceType.Fixed)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L71)\n\t\t- [_createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount)](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L121)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 122
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fa292b1e57afef07b42f7b0371343eaa9006a3b7e8a7d47b5be8e948f82c6256"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < s.season.start (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#106)\n",
            "markdown": "[SeasonFacet.seasonTime()](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L105-L109) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp < s.season.start](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L106)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 109
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "02824707661528f3de49823e1b718fc3f7127c4c8453c3109961910b9992e818"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "LibTokenPermit.permit(address,address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/libraries/Token/LibTokenPermit.sol#24-39) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp <= deadline,Token: permit expired deadline) (contracts/libraries/Token/LibTokenPermit.sol#34)\n",
            "markdown": "[LibTokenPermit.permit(address,address,address,uint256,uint256,uint8,bytes32,bytes32)](contracts/libraries/Token/LibTokenPermit.sol#L24-L39) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(block.timestamp <= deadline,Token: permit expired deadline)](contracts/libraries/Token/LibTokenPermit.sol#L34)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibTokenPermit.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "27f3d814ccfb7441f0210929e5601d793a00dc905656d0836dfee25998603af8"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "LibSiloPermit.permits(address,address,address[],uint256[],uint256,uint8,bytes32,bytes32) (contracts/libraries/Silo/LibSiloPermit.sol#93-118) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp <= deadline,Silo: permit expired deadline) (contracts/libraries/Silo/LibSiloPermit.sol#103)\n",
            "markdown": "[LibSiloPermit.permits(address,address,address[],uint256[],uint256,uint8,bytes32,bytes32)](contracts/libraries/Silo/LibSiloPermit.sol#L93-L118) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(block.timestamp <= deadline,Silo: permit expired deadline)](contracts/libraries/Silo/LibSiloPermit.sol#L103)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibSiloPermit.sol"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 118
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "391b59a2bd3d3fbe23a4a4e587e62c691ab065894a3129e89502e3df8d9545e1"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PauseFacet.pause() (contracts/beanstalk/diamond/PauseFacet.sol#28-35) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(! s.paused,Pause: already paused.) (contracts/beanstalk/diamond/PauseFacet.sol#30)\n",
            "markdown": "[PauseFacet.pause()](contracts/beanstalk/diamond/PauseFacet.sol#L28-L35) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(! s.paused,Pause: already paused.)](contracts/beanstalk/diamond/PauseFacet.sol#L30)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/PauseFacet.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3efcf1c4cfad17ea4bd9a12882b8bc1f916fa80de7e386d20b821923b2f08513"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "LibSiloPermit.permit(address,address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/libraries/Silo/LibSiloPermit.sol#57-82) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp <= deadline,Silo: permit expired deadline) (contracts/libraries/Silo/LibSiloPermit.sol#67)\n",
            "markdown": "[LibSiloPermit.permit(address,address,address,uint256,uint256,uint8,bytes32,bytes32)](contracts/libraries/Silo/LibSiloPermit.sol#L57-L82) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(block.timestamp <= deadline,Silo: permit expired deadline)](contracts/libraries/Silo/LibSiloPermit.sol#L67)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibSiloPermit.sol"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 82
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "42149f4414ce395f21de92f29dc3cfc800b882b36f661e9eb5342636e565efd6"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "OracleLibrary.getBlockStartingTickAndLiquidity(address) (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#93-126) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- observationTimestamp != uint32(block.timestamp) (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#104)\n",
            "markdown": "[OracleLibrary.getBlockStartingTickAndLiquidity(address)](node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#L93-L126) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [observationTimestamp != uint32(block.timestamp)](node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#L104)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 126
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "491b3d08afc27f8dc9dd33e709c6159041999f6f21c0a7d4d1d6f578de3d9796"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "SeasonFacet.gm(address,LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#47-62) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(seasonTime() > season(),Season: Still current Season.) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#54)\n",
            "markdown": "[SeasonFacet.gm(address,LibTransfer.To)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L47-L62) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(seasonTime() > season(),Season: Still current Season.)](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L54)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "60697d57f1742aa53818679fcc5a51543f6db615e8046846c96ce0f9072a528e"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "FertilizerPreMint.started() (contracts/tokens/Fertilizer/FertilizerPreMint.sol#67-69) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= start() (contracts/tokens/Fertilizer/FertilizerPreMint.sol#68)\n",
            "markdown": "[FertilizerPreMint.started()](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L67-L69) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [block.timestamp >= start()](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L68)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/FertilizerPreMint.sol"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "740607d43274b0405a3361ff85016fe897fb550148684eb715259460786618f8"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "MockUniswapV3Pool.initialize(uint160) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#280-298) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(slot0.sqrtPriceX96 == 0,AI) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#281)\n",
            "markdown": "[MockUniswapV3Pool.initialize(uint160)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L280-L298) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(slot0.sqrtPriceX96 == 0,AI)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L281)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 298
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a76c9aa9cc2c186a2d6f5580879c9e96a3d10cf677e230cd9599a19b80824f24"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "PauseFacet.unpause() (contracts/beanstalk/diamond/PauseFacet.sol#37-45) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(s.paused,Pause: not paused.) (contracts/beanstalk/diamond/PauseFacet.sol#39)\n",
            "markdown": "[PauseFacet.unpause()](contracts/beanstalk/diamond/PauseFacet.sol#L37-L45) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(s.paused,Pause: not paused.)](contracts/beanstalk/diamond/PauseFacet.sol#L39)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/PauseFacet.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c7fb50339fc3ad3a53ccf6df115cb51dfde9e2bc489842d4bdd3acdf68d1405f"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/tokens/ERC20/ERC20Permit.sol#44-63) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp <= deadline,ERC20Permit: expired deadline) (contracts/tokens/ERC20/ERC20Permit.sol#53)\n",
            "markdown": "[ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32)](contracts/tokens/ERC20/ERC20Permit.sol#L44-L63) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(block.timestamp <= deadline,ERC20Permit: expired deadline)](contracts/tokens/ERC20/ERC20Permit.sol#L53)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/ERC20/ERC20Permit.sol"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 63
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cf1d4f2bcf5d5f29612b6e78d24a7099286cfc5da771091aeb6315c2e411658f"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#650)\n\t- step.tickNext < TickMath.MIN_TICK (contracts/mocks/uniswap/MockUniswapV3Pool.sol#662)\n\t- step.tickNext > TickMath.MAX_TICK (contracts/mocks/uniswap/MockUniswapV3Pool.sol#664)\n\t- cache.feeProtocol > 0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#691)\n\t- state.liquidity > 0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#698)\n\t- state.sqrtPriceX96 == step.sqrtPriceNextX96 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#702)\n\t- state.sqrtPriceX96 != step.sqrtPriceStartX96 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#735)\n\t- state.tick != slot0Start.tick (contracts/mocks/uniswap/MockUniswapV3Pool.sol#742)\n\t- cache.liquidityStart != state.liquidity (contracts/mocks/uniswap/MockUniswapV3Pool.sol#764)\n\t- state.protocolFee > 0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#770)\n\t- state.protocolFee > 0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#773)\n\t- amount1 < 0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#782)\n\t- require(bool,string)(balance0Before.add(uint256(amount0)) <= balance0(),IIA) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#786)\n\t- amount0 < 0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#788)\n\t- require(bool,string)(balance1Before.add(uint256(amount1)) <= balance1(),IIA) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#792)\n\t- (step.sqrtPriceNextX96 < sqrtPriceLimitX96) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#672-680)\n\t- (step.sqrtPriceNextX96 > sqrtPriceLimitX96) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#672-680)\n",
            "markdown": "[MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L605-L797) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L650)\n\t- [step.tickNext < TickMath.MIN_TICK](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L662)\n\t- [step.tickNext > TickMath.MAX_TICK](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L664)\n\t- [cache.feeProtocol > 0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L691)\n\t- [state.liquidity > 0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L698)\n\t- [state.sqrtPriceX96 == step.sqrtPriceNextX96](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L702)\n\t- [state.sqrtPriceX96 != step.sqrtPriceStartX96](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L735)\n\t- [state.tick != slot0Start.tick](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L742)\n\t- [cache.liquidityStart != state.liquidity](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L764)\n\t- [state.protocolFee > 0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L770)\n\t- [state.protocolFee > 0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L773)\n\t- [amount1 < 0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L782)\n\t- [require(bool,string)(balance0Before.add(uint256(amount0)) <= balance0(),IIA)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L786)\n\t- [amount0 < 0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L788)\n\t- [require(bool,string)(balance1Before.add(uint256(amount1)) <= balance1(),IIA)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L792)\n\t- [(step.sqrtPriceNextX96 < sqrtPriceLimitX96)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L672-L680)\n\t- [(step.sqrtPriceNextX96 > sqrtPriceLimitX96)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L672-L680)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 605,
                  "endLine": 797
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f568033da9a89434b1227d7de60505d762a3a219a97ba2f33200c5e4631d46af"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "FundraiserFacet._completeFundraiser(uint32) (contracts/beanstalk/field/FundraiserFacet.sol#150-164) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp != s.fundraisers[id].start,Fundraiser: start block) (contracts/beanstalk/field/FundraiserFacet.sol#153-156)\n",
            "markdown": "[FundraiserFacet._completeFundraiser(uint32)](contracts/beanstalk/field/FundraiserFacet.sol#L150-L164) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(block.timestamp != s.fundraisers[id].start,Fundraiser: start block)](contracts/beanstalk/field/FundraiserFacet.sol#L153-L156)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/field/FundraiserFacet.sol"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 164
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f94e69f18806494be9e5651a840079be74f0e55bf50ab22140e9b348a7af7cc7"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "UnsafeMath.divRoundingUp(uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#12-16) uses assembly\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#13-15)\n",
            "markdown": "[UnsafeMath.divRoundingUp(uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#L12-L16) uses assembly\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#L13-L15)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0b3bc42046e1facb42d17eaae82208fc20e575f7ef4ee98881b4921e2adcb77e"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "LibDiamond.diamondStorage() (contracts/libraries/LibDiamond.sol#44-49) uses assembly\n\t- INLINE ASM (contracts/libraries/LibDiamond.sol#46-48)\n",
            "markdown": "[LibDiamond.diamondStorage()](contracts/libraries/LibDiamond.sol#L44-L49) uses assembly\n\t- [INLINE ASM](contracts/libraries/LibDiamond.sol#L46-L48)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "013d9c47eca8708a14df54945ea1d51e3ba536f5d9aec755bf158f080cea42a9"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "InitBipSunriseImprovements.init() (contracts/beanstalk/init/InitBipSunriseImprovements.sol#35-47) uses assembly\n\t- INLINE ASM (contracts/beanstalk/init/InitBipSunriseImprovements.sol#39-41)\n",
            "markdown": "[InitBipSunriseImprovements.init()](contracts/beanstalk/init/InitBipSunriseImprovements.sol#L35-L47) uses assembly\n\t- [INLINE ASM](contracts/beanstalk/init/InitBipSunriseImprovements.sol#L39-L41)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBipSunriseImprovements.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "026a6462715e67e08f69e6d95d0945d6eb87121099fc06f32f5325961e2d6ee6"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "LibTokenSilo.beanDenominatedValue(address,uint256) (contracts/libraries/Silo/LibTokenSilo.sol#279-306) uses assembly\n\t- INLINE ASM (contracts/libraries/Silo/LibTokenSilo.sol#298-300)\n\t- INLINE ASM (contracts/libraries/Silo/LibTokenSilo.sol#303-305)\n",
            "markdown": "[LibTokenSilo.beanDenominatedValue(address,uint256)](contracts/libraries/Silo/LibTokenSilo.sol#L279-L306) uses assembly\n\t- [INLINE ASM](contracts/libraries/Silo/LibTokenSilo.sol#L298-L300)\n\t- [INLINE ASM](contracts/libraries/Silo/LibTokenSilo.sol#L303-L305)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibTokenSilo.sol"
                },
                "region": {
                  "startLine": 279,
                  "endLine": 306
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0698c369ae455bfbff06575c9b4d8fc09582a8dda7d47f8f49de6d709a3571f1"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ECDSA.recover(bytes32,bytes) (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#26-47) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#40-44)\n",
            "markdown": "[ECDSA.recover(bytes32,bytes)](node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#L26-L47) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#L40-L44)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "08a80f415cbb863ba241ab635b1230e4d7becaeb187d93f6ab26e0fc4f55a5c3"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "AddressUpgradeable.isContract(address) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#26-35) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#33)\n",
            "markdown": "[AddressUpgradeable.isContract(address)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L26-L35) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L33)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "130fe2d3e38cfcf2d4b0531ec9839e5f4e2773a668f3afbe19efa363fd4f0718"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "LibDiamond.enforceHasContractCode(address,string) (contracts/libraries/LibDiamond.sol#234-240) uses assembly\n\t- INLINE ASM (contracts/libraries/LibDiamond.sol#236-238)\n",
            "markdown": "[LibDiamond.enforceHasContractCode(address,string)](contracts/libraries/LibDiamond.sol#L234-L240) uses assembly\n\t- [INLINE ASM](contracts/libraries/LibDiamond.sol#L236-L238)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 240
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "14206309ddf03ba9f4b566b46bf8c61b9c85703eced42b18ba6a003eb513f036"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Address._verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#171-188) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#180-183)\n",
            "markdown": "[Address._verifyCallResult(bool,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L171-L188) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Address.sol#L180-L183)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 188
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1668c58293f913a8f1db28d30f3585e9e39b355b94fed34dbfd35929fac5cd1d"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "LibAppStorage.diamondStorage() (contracts/libraries/LibAppStorage.sol#15-19) uses assembly\n\t- INLINE ASM (contracts/libraries/LibAppStorage.sol#16-18)\n",
            "markdown": "[LibAppStorage.diamondStorage()](contracts/libraries/LibAppStorage.sol#L15-L19) uses assembly\n\t- [INLINE ASM](contracts/libraries/LibAppStorage.sol#L16-L18)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibAppStorage.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1bd071d115dd6ec3994bdaec681c71bc48b80e8442d4cc2eb9d6fb4c45b58dc8"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "LibFunction.checkReturn(bool,bytes) (contracts/libraries/LibFunction.sol#21-31) uses assembly\n\t- INLINE ASM (contracts/libraries/LibFunction.sol#26-28)\n",
            "markdown": "[LibFunction.checkReturn(bool,bytes)](contracts/libraries/LibFunction.sol#L21-L31) uses assembly\n\t- [INLINE ASM](contracts/libraries/LibFunction.sol#L26-L28)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibFunction.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3e71f1bcbc8d994320b2fadf7bdc5282e6a612a10e9fdc715c68449a500fac13"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Address.isContract(address) (node_modules/@openzeppelin/contracts/utils/Address.sol#26-35) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#33)\n",
            "markdown": "[Address.isContract(address)](node_modules/@openzeppelin/contracts/utils/Address.sol#L26-L35) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Address.sol#L33)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "43b558a885740a2cc9eb4cf64f8945f32600cc20465c4f17bd2a39aa5151c389"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "MockSiloFacet.beanDenominatedValueLegacy(address,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#280-307) uses assembly\n\t- INLINE ASM (contracts/mocks/mockFacets/MockSiloFacet.sol#299-301)\n\t- INLINE ASM (contracts/mocks/mockFacets/MockSiloFacet.sol#304-306)\n",
            "markdown": "[MockSiloFacet.beanDenominatedValueLegacy(address,uint256)](contracts/mocks/mockFacets/MockSiloFacet.sol#L280-L307) uses assembly\n\t- [INLINE ASM](contracts/mocks/mockFacets/MockSiloFacet.sol#L299-L301)\n\t- [INLINE ASM](contracts/mocks/mockFacets/MockSiloFacet.sol#L304-L306)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 307
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5b4d7e6a5047c78e2e49860c15843ede55183906f041852996f8edb11a0358dd"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Diamond.fallback() (contracts/beanstalk/Diamond.sol#35-55) uses assembly\n\t- INLINE ASM (contracts/beanstalk/Diamond.sol#38-40)\n\t- INLINE ASM (contracts/beanstalk/Diamond.sol#43-54)\n",
            "markdown": "[Diamond.fallback()](contracts/beanstalk/Diamond.sol#L35-L55) uses assembly\n\t- [INLINE ASM](contracts/beanstalk/Diamond.sol#L38-L40)\n\t- [INLINE ASM](contracts/beanstalk/Diamond.sol#L43-L54)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/Diamond.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5eaf80615336da706b95bdbe77df5df6d936b21a0c304ed9706fbbc75b9e0edf"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "LibFunction.paste32Bytes(bytes,bytes,uint256,uint256) (contracts/libraries/LibFunction.sol#130-140) uses assembly\n\t- INLINE ASM (contracts/libraries/LibFunction.sol#136-138)\n",
            "markdown": "[LibFunction.paste32Bytes(bytes,bytes,uint256,uint256)](contracts/libraries/LibFunction.sol#L130-L140) uses assembly\n\t- [INLINE ASM](contracts/libraries/LibFunction.sol#L136-L138)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibFunction.sol"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 140
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "696360eab90f2c9c46b3f17a4c5865fc10410ada08303fc3d5f53ad2debb848f"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "InitBip0.diamondStorageOld() (contracts/beanstalk/init/InitBip0.sol#23-27) uses assembly\n\t- INLINE ASM (contracts/beanstalk/init/InitBip0.sol#24-26)\n",
            "markdown": "[InitBip0.diamondStorageOld()](contracts/beanstalk/init/InitBip0.sol#L23-L27) uses assembly\n\t- [INLINE ASM](contracts/beanstalk/init/InitBip0.sol#L24-L26)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip0.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7d9f1a7d91601749e2523a5e53969fed2080cc7385fc3eddb91f2e3c87012ced"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "MockDiamond.fallback() (contracts/mocks/MockDiamond.sol#34-54) uses assembly\n\t- INLINE ASM (contracts/mocks/MockDiamond.sol#37-39)\n\t- INLINE ASM (contracts/mocks/MockDiamond.sol#42-53)\n",
            "markdown": "[MockDiamond.fallback()](contracts/mocks/MockDiamond.sol#L34-L54) uses assembly\n\t- [INLINE ASM](contracts/mocks/MockDiamond.sol#L37-L39)\n\t- [INLINE ASM](contracts/mocks/MockDiamond.sol#L42-L53)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockDiamond.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "860ef65e25d41f86f2de5c5b36941632e7c49bd0645f22c3f7231eaaf1f293b9"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "LibBytes.toUint32(bytes,uint256) (contracts/libraries/LibBytes.sol#34-44) uses assembly\n\t- INLINE ASM (contracts/libraries/LibBytes.sol#39-41)\n",
            "markdown": "[LibBytes.toUint32(bytes,uint256)](contracts/libraries/LibBytes.sol#L34-L44) uses assembly\n\t- [INLINE ASM](contracts/libraries/LibBytes.sol#L39-L41)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9ef4dab17412936970169e210675ecfab273415a1641d64ff989fec3314ac712"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "LibPRBMath.mulDivFixedPoint(uint256,uint256) (contracts/libraries/LibPRBMath.sol#59-96) uses assembly\n\t- INLINE ASM (contracts/libraries/LibPRBMath.sol#62-66)\n\t- INLINE ASM (contracts/libraries/LibPRBMath.sol#74-77)\n\t- INLINE ASM (contracts/libraries/LibPRBMath.sol#84-95)\n",
            "markdown": "[LibPRBMath.mulDivFixedPoint(uint256,uint256)](contracts/libraries/LibPRBMath.sol#L59-L96) uses assembly\n\t- [INLINE ASM](contracts/libraries/LibPRBMath.sol#L62-L66)\n\t- [INLINE ASM](contracts/libraries/LibPRBMath.sol#L74-L77)\n\t- [INLINE ASM](contracts/libraries/LibPRBMath.sol#L84-L95)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a1afbb1f7d48bd4714b802b69f3ff06903713761f1223cf29609ba542654502f"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "AddressUpgradeable._verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#147-164) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#156-159)\n",
            "markdown": "[AddressUpgradeable._verifyCallResult(bool,bytes,string)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L147-L164) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L156-L159)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 164
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a5de6ff8432903aab49ca42f98c36db02c81bcc8072fbc2b7aec34b16c1dd9dd"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "TickMath.getTickAtSqrtRatio(uint160) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#61-204) uses assembly\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#69-73)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#74-78)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#79-83)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#84-88)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#89-93)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#94-98)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#99-103)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#104-107)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#114-119)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#120-125)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#126-131)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#132-137)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#138-143)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#144-149)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#150-155)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#156-161)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#162-167)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#168-173)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#174-179)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#180-185)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#186-191)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#192-196)\n",
            "markdown": "[TickMath.getTickAtSqrtRatio(uint160)](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L61-L204) uses assembly\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L69-L73)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L74-L78)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L79-L83)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L84-L88)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L89-L93)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L94-L98)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L99-L103)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L104-L107)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L114-L119)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L120-L125)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L126-L131)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L132-L137)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L138-L143)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L144-L149)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L150-L155)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L156-L161)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L162-L167)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L168-L173)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L174-L179)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L180-L185)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L186-L191)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L192-L196)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 204
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cbdfff54d89f2fb1947526993ae8b99cc5307b342f8ec9395e2f842f1a43e0a9"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "FarmFacet._farm(bytes) (contracts/beanstalk/farm/FarmFacet.sol#81-87) uses assembly\n\t- INLINE ASM (contracts/beanstalk/farm/FarmFacet.sol#83)\n",
            "markdown": "[FarmFacet._farm(bytes)](contracts/beanstalk/farm/FarmFacet.sol#L81-L87) uses assembly\n\t- [INLINE ASM](contracts/beanstalk/farm/FarmFacet.sol#L83)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/FarmFacet.sol"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d1eb143b19607b2f27de637eefa68cace86bd7eb6a9da18879d76560712e8ae4"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Pipeline.getEthValue(bytes) (contracts/pipeline/Pipeline.sol#110-113) uses assembly\n\t- INLINE ASM (contracts/pipeline/Pipeline.sol#112)\n",
            "markdown": "[Pipeline.getEthValue(bytes)](contracts/pipeline/Pipeline.sol#L110-L113) uses assembly\n\t- [INLINE ASM](contracts/pipeline/Pipeline.sol#L112)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/pipeline/Pipeline.sol"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 113
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d6f3e56944700adbba40458afc3286cdbeb2b09e772bcba3abb2a41136a5fe2d"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) uses assembly\n\t- INLINE ASM (contracts/libraries/LibPRBMath.sol#195-199)\n\t- INLINE ASM (contracts/libraries/LibPRBMath.sol#215-222)\n\t- INLINE ASM (contracts/libraries/LibPRBMath.sol#229-238)\n",
            "markdown": "[LibPRBMath.mulDiv(uint256,uint256,uint256)](contracts/libraries/LibPRBMath.sol#L185-L263) uses assembly\n\t- [INLINE ASM](contracts/libraries/LibPRBMath.sol#L195-L199)\n\t- [INLINE ASM](contracts/libraries/LibPRBMath.sol#L215-L222)\n\t- [INLINE ASM](contracts/libraries/LibPRBMath.sol#L229-L238)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 185,
                  "endLine": 263
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "de9553e5f109a0cfbe9602f8246d7b335979eb090ceb57279c69beedf12302f9"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) uses assembly\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#26-30)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#35-37)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#52-54)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#56-59)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#66-68)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#71-73)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#77-79)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) uses assembly\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L26-L30)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L35-L37)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L52-L54)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L56-L59)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L66-L68)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L71-L73)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L77-L79)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e49a4b21f527cf9438757ea4e36bf37f600d2bb86346c5fb0cd966310785552d"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "FarmFacet._farmMem(bytes) (contracts/beanstalk/farm/FarmFacet.sol#90-96) uses assembly\n\t- INLINE ASM (contracts/beanstalk/farm/FarmFacet.sol#92)\n",
            "markdown": "[FarmFacet._farmMem(bytes)](contracts/beanstalk/farm/FarmFacet.sol#L90-L96) uses assembly\n\t- [INLINE ASM](contracts/beanstalk/farm/FarmFacet.sol#L92)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/FarmFacet.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e58a60a9e792baf73ab3476b179a044d9f530c4ef0eda2bcd4479595911d95ab"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "LibBytes64.encode(bytes) (contracts/libraries/LibBytes64.sol#20-90) uses assembly\n\t- INLINE ASM (contracts/libraries/LibBytes64.sol#38-87)\n",
            "markdown": "[LibBytes64.encode(bytes)](contracts/libraries/LibBytes64.sol#L20-L90) uses assembly\n\t- [INLINE ASM](contracts/libraries/LibBytes64.sol#L38-L87)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes64.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f131ff0b0a3ea749a863c72c27db632192cc4b7c0235babc3f035ac0d3e9dae7"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "LibBytes.toUint8(bytes,uint256) (contracts/libraries/LibBytes.sol#18-28) uses assembly\n\t- INLINE ASM (contracts/libraries/LibBytes.sol#23-25)\n",
            "markdown": "[LibBytes.toUint8(bytes,uint256)](contracts/libraries/LibBytes.sol#L18-L28) uses assembly\n\t- [INLINE ASM](contracts/libraries/LibBytes.sol#L23-L25)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f3abbb5995fb178e56e729703fd8cfbca4c38e56166a2107d1dea641b0e5d6c3"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "LibBytes.toUint256(bytes,uint256) (contracts/libraries/LibBytes.sol#50-60) uses assembly\n\t- INLINE ASM (contracts/libraries/LibBytes.sol#55-57)\n",
            "markdown": "[LibBytes.toUint256(bytes,uint256)](contracts/libraries/LibBytes.sol#L50-L60) uses assembly\n\t- [INLINE ASM](contracts/libraries/LibBytes.sol#L55-L57)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 60
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f42ef04c6e88297dfdd1398b17fbaebe69c2a3bcfea91f9b41dcee10e99dddfb"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "EIP712._getChainId() (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#101-107) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#104-106)\n",
            "markdown": "[EIP712._getChainId()](node_modules/@openzeppelin/contracts/drafts/EIP712.sol#L101-L107) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/drafts/EIP712.sol#L104-L106)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/drafts/EIP712.sol"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 107
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f8e6c18627146d46860b4f5007049e3cca97296361914ab4f6eeb92c058364a5"
          }
        },
        {
          "ruleId": "3-0-pragma",
          "message": {
            "text": "Different versions of Solidity are used:\n\t- Version used: ['>=0.4.0', '>=0.5.0', '>=0.6.0', '>=0.7.0', '>=0.7.5', '^0.8.0', '^0.8.17']\n\t- >=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#2)\n\t- >=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3PoolDeployer.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/LiquidityMath.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#2)\n\t- >=0.6.0 (node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#2)\n\t- >=0.7.0 (node_modules/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol#2)\n\t- >=0.7.5 (contracts/interfaces/IQuoter.sol#2)\n\t- >=0.7.5 (contracts/interfaces/ISwapRouter.sol#2)\n\t- ABIEncoderV2 (contracts/interfaces/IBeanstalk.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/IDelegation.sol#3)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable-8/token/ERC20/IERC20Upgradeable.sol#4)\n\t- ^0.8.17 (contracts/interfaces/IBeanstalk.sol#2)\n\t- ^0.8.17 (contracts/interfaces/IDelegation.sol#2)\n\t- v2 (contracts/interfaces/IQuoter.sol#3)\n\t- v2 (contracts/interfaces/ISwapRouter.sol#3)\n",
            "markdown": "Different versions of Solidity are used:\n\t- Version used: ['>=0.4.0', '>=0.5.0', '>=0.6.0', '>=0.7.0', '>=0.7.5', '^0.8.0', '^0.8.17']\n\t- [>=0.4.0](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#L2)\n\t- [>=0.4.0](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3PoolDeployer.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/LiquidityMath.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#L2)\n\t- [>=0.6.0](node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#L2)\n\t- [>=0.7.0](node_modules/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol#L2)\n\t- [>=0.7.5](contracts/interfaces/IQuoter.sol#L2)\n\t- [>=0.7.5](contracts/interfaces/ISwapRouter.sol#L2)\n\t- [ABIEncoderV2](contracts/interfaces/IBeanstalk.sol#L3)\n\t- [ABIEncoderV2](contracts/interfaces/IDelegation.sol#L3)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable-8/token/ERC20/IERC20Upgradeable.sol#L4)\n\t- [^0.8.17](contracts/interfaces/IBeanstalk.sol#L2)\n\t- [^0.8.17](contracts/interfaces/IDelegation.sol#L2)\n\t- [v2](contracts/interfaces/IQuoter.sol#L3)\n\t- [v2](contracts/interfaces/ISwapRouter.sol#L3)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "529ad8ca9e3741ccc6835f21385fab03c8c8ac75c415b00b997ebc758ab6df4f"
          }
        },
        {
          "ruleId": "3-0-pragma",
          "message": {
            "text": "Different versions of Solidity are used:\n\t- Version used: ['0.7.6', '=0.7.6', '>=0.4.0', '>=0.4.0<0.8.0', '>=0.4.24<0.8.0', '>=0.5.0', '>=0.5.0<0.8.0', '>=0.6.0', '>=0.6.0<0.8.0', '>=0.6.2<0.8.0', '>=0.7.0', '>=0.7.5', '^0.7.6']\n\t- 0.7.6 (contracts/beanstalk/barn/UnripeFacet.sol#5)\n\t- 0.7.6 (contracts/tokens/ERC20/BeanstalkERC20.sol#3)\n\t- =0.7.6 (contracts/C.sol#3)\n\t- =0.7.6 (contracts/beanstalk/AppStorage.sol#3)\n\t- =0.7.6 (contracts/beanstalk/AppStorageOld.sol#5)\n\t- =0.7.6 (contracts/beanstalk/Diamond.sol#2)\n\t- =0.7.6 (contracts/beanstalk/ReentrancyGuard.sol#4)\n\t- =0.7.6 (contracts/beanstalk/diamond/DiamondCutFacet.sol#6)\n\t- =0.7.6 (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#6)\n\t- =0.7.6 (contracts/beanstalk/diamond/OwnershipFacet.sol#3)\n\t- =0.7.6 (contracts/beanstalk/farm/CurveFacet.sol#5)\n\t- =0.7.6 (contracts/beanstalk/farm/TokenFacet.sol#5)\n\t- =0.7.6 (contracts/beanstalk/farm/TokenSupportFacet.sol#5)\n\t- =0.7.6 (contracts/beanstalk/field/FieldFacet.sol#5)\n\t- =0.7.6 (contracts/beanstalk/field/FundraiserFacet.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip0.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip1.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip11.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip12.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip13.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip14.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip16.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip2.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip22.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip23.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip24.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip5.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip7.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip8.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBip9.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBipNewSilo.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitBipSunriseImprovements.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitDiamond.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitEBip6.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitFundraiser.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitHotFix2.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitHotFix3.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitHotFix4.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitHotFix5.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitMint.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitOmnisciaAudit.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitReplant.sol#5)\n\t- =0.7.6 (contracts/beanstalk/init/InitWhitelist.sol#5)\n\t- =0.7.6 (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#5)\n\t- =0.7.6 (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#5)\n\t- =0.7.6 (contracts/beanstalk/market/MarketplaceFacet/Order.sol#5)\n\t- =0.7.6 (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#5)\n\t- =0.7.6 (contracts/beanstalk/silo/ApprovalFacet.sol#5)\n\t- =0.7.6 (contracts/beanstalk/silo/BDVFacet.sol#5)\n\t- =0.7.6 (contracts/beanstalk/silo/ConvertFacet.sol#5)\n\t- =0.7.6 (contracts/beanstalk/silo/MigrationFacet.sol#5)\n\t- =0.7.6 (contracts/beanstalk/silo/SiloFacet/Silo.sol#5)\n\t- =0.7.6 (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#6)\n\t- =0.7.6 (contracts/beanstalk/silo/SiloFacet/TokenSilo.sol#5)\n\t- =0.7.6 (contracts/beanstalk/sun/SeasonFacet/Oracle.sol#3)\n\t- =0.7.6 (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#3)\n\t- =0.7.6 (contracts/beanstalk/sun/SeasonFacet/Weather.sol#3)\n\t- =0.7.6 (contracts/ecosystem/price/BeanstalkPrice.sol#2)\n\t- =0.7.6 (contracts/ecosystem/price/CurvePrice.sol#2)\n\t- =0.7.6 (contracts/ecosystem/price/P.sol#2)\n\t- =0.7.6 (contracts/interfaces/IBean.sol#3)\n\t- =0.7.6 (contracts/interfaces/IBeanstalkTransfer.sol#3)\n\t- =0.7.6 (contracts/interfaces/IBlockBasefee.sol#3)\n\t- =0.7.6 (contracts/interfaces/ICurve.sol#3)\n\t- =0.7.6 (contracts/interfaces/IDiamondCut.sol#3)\n\t- =0.7.6 (contracts/interfaces/IDiamondLoupe.sol#3)\n\t- =0.7.6 (contracts/interfaces/IERC165.sol#3)\n\t- =0.7.6 (contracts/interfaces/IFertilizer.sol#3)\n\t- =0.7.6 (contracts/interfaces/IPipeline.sol#2)\n\t- =0.7.6 (contracts/interfaces/IProxyAdmin.sol#3)\n\t- =0.7.6 (contracts/libraries/Convert/LibConvert.sol#3)\n\t- =0.7.6 (contracts/libraries/Convert/LibConvertData.sol#3)\n\t- =0.7.6 (contracts/libraries/Convert/LibCurveConvert.sol#3)\n\t- =0.7.6 (contracts/libraries/Convert/LibLambdaConvert.sol#3)\n\t- =0.7.6 (contracts/libraries/Convert/LibMetaCurveConvert.sol#3)\n\t- =0.7.6 (contracts/libraries/Convert/LibUnripeConvert.sol#3)\n\t- =0.7.6 (contracts/libraries/Curve/LibBeanMetaCurve.sol#3)\n\t- =0.7.6 (contracts/libraries/Curve/LibCurve.sol#3)\n\t- =0.7.6 (contracts/libraries/Curve/LibMetaCurve.sol#3)\n\t- =0.7.6 (contracts/libraries/Decimal.sol#5)\n\t- =0.7.6 (contracts/libraries/LibAppStorage.sol#3)\n\t- =0.7.6 (contracts/libraries/LibBytes.sol#5)\n\t- =0.7.6 (contracts/libraries/LibBytes64.sol#3)\n\t- =0.7.6 (contracts/libraries/LibDiamond.sol#6)\n\t- =0.7.6 (contracts/libraries/LibDibbler.sol#3)\n\t- =0.7.6 (contracts/libraries/LibFertilizer.sol#5)\n\t- =0.7.6 (contracts/libraries/LibFunction.sol#5)\n\t- =0.7.6 (contracts/libraries/LibIncentive.sol#3)\n\t- =0.7.6 (contracts/libraries/LibPRBMath.sol#3)\n\t- =0.7.6 (contracts/libraries/LibPolynomial.sol#5)\n\t- =0.7.6 (contracts/libraries/LibUnripe.sol#3)\n\t- =0.7.6 (contracts/libraries/Oracle/LibCurveOracle.sol#3)\n\t- =0.7.6 (contracts/libraries/Silo/LibLegacyTokenSilo.sol#5)\n\t- =0.7.6 (contracts/libraries/Silo/LibLegacyWhitelist.sol#5)\n\t- =0.7.6 (contracts/libraries/Silo/LibSilo.sol#5)\n\t- =0.7.6 (contracts/libraries/Silo/LibSiloPermit.sol#5)\n\t- =0.7.6 (contracts/libraries/Silo/LibTokenSilo.sol#5)\n\t- =0.7.6 (contracts/libraries/Silo/LibUnripeSilo.sol#3)\n\t- =0.7.6 (contracts/libraries/Silo/LibWhitelist.sol#5)\n\t- =0.7.6 (contracts/libraries/Token/LibApprove.sol#6)\n\t- =0.7.6 (contracts/libraries/Token/LibTokenApprove.sol#3)\n\t- =0.7.6 (contracts/libraries/Token/LibTokenPermit.sol#5)\n\t- =0.7.6 (contracts/libraries/Token/LibTransfer.sol#3)\n\t- =0.7.6 (contracts/libraries/Token/LibWeth.sol#6)\n\t- =0.7.6 (contracts/mocks/MockBlockBasefee.sol#5)\n\t- =0.7.6 (contracts/mocks/MockDiamond.sol#2)\n\t- =0.7.6 (contracts/mocks/MockERC1155.sol#2)\n\t- =0.7.6 (contracts/mocks/MockERC721.sol#2)\n\t- =0.7.6 (contracts/mocks/MockFertilizer.sol#5)\n\t- =0.7.6 (contracts/mocks/MockInitDiamond.sol#5)\n\t- =0.7.6 (contracts/mocks/MockSiloToken.sol#5)\n\t- =0.7.6 (contracts/mocks/MockToken.sol#5)\n\t- =0.7.6 (contracts/mocks/MockWETH.sol#5)\n\t- =0.7.6 (contracts/mocks/mockFacets/MockAdminFacet.sol#4)\n\t- =0.7.6 (contracts/mocks/mockFacets/MockFertilizerFacet.sol#5)\n\t- =0.7.6 (contracts/mocks/mockFacets/MockFieldFacet.sol#5)\n\t- =0.7.6 (contracts/mocks/mockFacets/MockFundraiserFacet.sol#5)\n\t- =0.7.6 (contracts/mocks/mockFacets/MockMarketplaceFacet.sol#5)\n\t- =0.7.6 (contracts/mocks/mockFacets/MockSiloFacet.sol#5)\n\t- =0.7.6 (contracts/mocks/uniswap/MockUniswapV3Deployer.sol#2)\n\t- =0.7.6 (contracts/mocks/uniswap/MockUniswapV3Factory.sol#2)\n\t- =0.7.6 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#2)\n\t- =0.7.6 (contracts/mocks/uniswap/NoDelegateCall.sol#2)\n\t- =0.7.6 (contracts/pipeline/Pipeline.sol#2)\n\t- =0.7.6 (contracts/tokens/Bean.sol#5)\n\t- =0.7.6 (contracts/tokens/UnripeBean.sol#5)\n\t- =0.7.6 (contracts/tokens/UnripeBean3Crv.sol#5)\n\t- >=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#2)\n\t- >=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#2)\n\t- >=0.4.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#2)\n\t- >=0.4.24<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#4)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3PoolDeployer.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/LiquidityMath.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SwapMath.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#2)\n\t- >=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#2)\n\t- >=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#2)\n\t- >=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#2)\n\t- >=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#2)\n\t- >=0.5.0<0.8.0 (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#2)\n\t- >=0.6.0 (node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#2)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/MerkleProof.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/introspection/ERC165.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/introspection/IERC165.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/Math.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721Holder.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/EnumerableMap.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/SafeCast.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#3)\n\t- >=0.6.0<0.8.0 (contracts/interfaces/IERC1155Receiver.sol#3)\n\t- >=0.6.0<0.8.0 (contracts/libraries/LibSafeMath128.sol#3)\n\t- >=0.6.0<0.8.0 (contracts/libraries/LibSafeMath32.sol#3)\n\t- >=0.6.0<0.8.0 (contracts/libraries/LibSafeMathSigned128.sol#3)\n\t- >=0.6.0<0.8.0 (contracts/libraries/LibSafeMathSigned96.sol#3)\n\t- >=0.6.0<0.8.0 (contracts/libraries/LibStrings.sol#3)\n\t- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol#3)\n\t- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol#3)\n\t- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#3)\n\t- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#3)\n\t- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol#3)\n\t- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#3)\n\t- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol#3)\n\t- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol#3)\n\t- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)\n\t- >=0.7.0 (node_modules/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol#2)\n\t- >=0.7.5 (contracts/interfaces/IQuoter.sol#2)\n\t- >=0.7.5 (contracts/interfaces/ISwapRouter.sol#2)\n\t- ABIEncoderV2 (contracts/C.sol#4)\n\t- ABIEncoderV2 (contracts/beanstalk/AppStorage.sol#4)\n\t- ABIEncoderV2 (contracts/beanstalk/AppStorageOld.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/Diamond.sol#3)\n\t- ABIEncoderV2 (contracts/beanstalk/ReentrancyGuard.sol#5)\n\t- ABIEncoderV2 (contracts/beanstalk/barn/FertilizerFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/barn/UnripeFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/diamond/DiamondCutFacet.sol#5)\n\t- ABIEncoderV2 (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#5)\n\t- ABIEncoderV2 (contracts/beanstalk/diamond/OwnershipFacet.sol#4)\n\t- ABIEncoderV2 (contracts/beanstalk/diamond/PauseFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/farm/CurveFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/farm/DepotFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/farm/FarmFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/farm/TokenFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/farm/TokenSupportFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/field/FieldFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/field/FundraiserFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip0.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip1.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip11.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip12.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip13.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip14.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip16.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip2.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip22.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip23.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip24.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip5.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip7.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip8.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBip9.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBipNewSilo.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitBipSunriseImprovements.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitDiamond.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitEBip6.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitFundraiser.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitHotFix2.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitHotFix3.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitHotFix4.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitHotFix5.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitMint.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitOmnisciaAudit.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitReplant.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/init/InitWhitelist.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/market/MarketplaceFacet/Order.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/metadata/MetadataFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/silo/ApprovalFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/silo/BDVFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/silo/ConvertFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/silo/MigrationFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/silo/SiloFacet/Silo.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#7)\n\t- ABIEncoderV2 (contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/silo/SiloFacet/TokenSilo.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/silo/WhitelistFacet.sol#6)\n\t- ABIEncoderV2 (contracts/beanstalk/sun/SeasonFacet/Oracle.sol#4)\n\t- ABIEncoderV2 (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#4)\n\t- ABIEncoderV2 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#4)\n\t- ABIEncoderV2 (contracts/beanstalk/sun/SeasonFacet/Weather.sol#4)\n\t- ABIEncoderV2 (contracts/depot/Depot.sol#4)\n\t- ABIEncoderV2 (contracts/ecosystem/price/BeanstalkPrice.sol#3)\n\t- ABIEncoderV2 (contracts/ecosystem/price/CurvePrice.sol#3)\n\t- ABIEncoderV2 (contracts/ecosystem/price/P.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/IBean.sol#4)\n\t- ABIEncoderV2 (contracts/interfaces/IBeanstalkTransfer.sol#2)\n\t- ABIEncoderV2 (contracts/interfaces/IBlockBasefee.sol#2)\n\t- ABIEncoderV2 (contracts/interfaces/ICurve.sol#2)\n\t- ABIEncoderV2 (contracts/interfaces/IDiamondCut.sol#2)\n\t- ABIEncoderV2 (contracts/interfaces/IDiamondLoupe.sol#2)\n\t- ABIEncoderV2 (contracts/interfaces/IERC165.sol#2)\n\t- ABIEncoderV2 (contracts/interfaces/IERC4494.sol#4)\n\t- ABIEncoderV2 (contracts/interfaces/IFertilizer.sol#2)\n\t- ABIEncoderV2 (contracts/interfaces/IPipeline.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/IProxyAdmin.sol#2)\n\t- ABIEncoderV2 (contracts/interfaces/IUSDC.sol#6)\n\t- ABIEncoderV2 (contracts/interfaces/IWETH.sol#6)\n\t- ABIEncoderV2 (contracts/libraries/Convert/LibConvert.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Convert/LibConvertData.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Convert/LibCurveConvert.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Convert/LibLambdaConvert.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Convert/LibMetaCurveConvert.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Convert/LibUnripeConvert.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Curve/LibBeanMetaCurve.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Curve/LibCurve.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Curve/LibMetaCurve.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Decimal.sol#6)\n\t- ABIEncoderV2 (contracts/libraries/LibAppStorage.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/LibDiamond.sol#5)\n\t- ABIEncoderV2 (contracts/libraries/LibDibbler.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/LibFertilizer.sol#6)\n\t- ABIEncoderV2 (contracts/libraries/LibFunction.sol#6)\n\t- ABIEncoderV2 (contracts/libraries/LibIncentive.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/LibPRBMath.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/LibUnripe.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Oracle/LibCurveOracle.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Silo/LibLegacyTokenSilo.sol#6)\n\t- ABIEncoderV2 (contracts/libraries/Silo/LibLegacyWhitelist.sol#6)\n\t- ABIEncoderV2 (contracts/libraries/Silo/LibSilo.sol#6)\n\t- ABIEncoderV2 (contracts/libraries/Silo/LibSiloPermit.sol#6)\n\t- ABIEncoderV2 (contracts/libraries/Silo/LibTokenSilo.sol#6)\n\t- ABIEncoderV2 (contracts/libraries/Silo/LibUnripeSilo.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Silo/LibWhitelist.sol#6)\n\t- ABIEncoderV2 (contracts/libraries/Token/LibApprove.sol#5)\n\t- ABIEncoderV2 (contracts/libraries/Token/LibBalance.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Token/LibEth.sol#6)\n\t- ABIEncoderV2 (contracts/libraries/Token/LibTokenApprove.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Token/LibTokenPermit.sol#6)\n\t- ABIEncoderV2 (contracts/libraries/Token/LibTransfer.sol#4)\n\t- ABIEncoderV2 (contracts/libraries/Token/LibWeth.sol#5)\n\t- ABIEncoderV2 (contracts/mocks/MockBlockBasefee.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/MockDiamond.sol#3)\n\t- ABIEncoderV2 (contracts/mocks/MockERC1155.sol#3)\n\t- ABIEncoderV2 (contracts/mocks/MockERC721.sol#3)\n\t- ABIEncoderV2 (contracts/mocks/MockFertilizer.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/MockInitDiamond.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/MockSiloToken.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/MockToken.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/curve/MockCurveFactory.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/curve/MockCurveZap.sol#10)\n\t- ABIEncoderV2 (contracts/mocks/curve/MockMeta3Curve.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/curve/MockPlainCurve.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/mockFacets/MockAdminFacet.sol#5)\n\t- ABIEncoderV2 (contracts/mocks/mockFacets/MockConvertFacet.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/mockFacets/MockFertilizerFacet.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/mockFacets/MockFieldFacet.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/mockFacets/MockFundraiserFacet.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/mockFacets/MockMarketplaceFacet.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/mockFacets/MockSeasonFacet.sol#5)\n\t- ABIEncoderV2 (contracts/mocks/mockFacets/MockSiloFacet.sol#6)\n\t- ABIEncoderV2 (contracts/mocks/mockFacets/MockUnripeFacet.sol#6)\n\t- ABIEncoderV2 (contracts/pipeline/Pipeline.sol#3)\n\t- ABIEncoderV2 (contracts/tokens/Bean.sol#6)\n\t- ABIEncoderV2 (contracts/tokens/ERC20/BeanstalkERC20.sol#4)\n\t- ABIEncoderV2 (contracts/tokens/ERC20/ERC20Permit.sol#5)\n\t- ABIEncoderV2 (contracts/tokens/Fertilizer/Fertilizer.sol#4)\n\t- ABIEncoderV2 (contracts/tokens/Fertilizer/Fertilizer1155.sol#6)\n\t- ABIEncoderV2 (contracts/tokens/Fertilizer/FertilizerPreMint.sol#4)\n\t- ABIEncoderV2 (contracts/tokens/Fertilizer/Internalizer.sol#4)\n\t- ABIEncoderV2 (contracts/tokens/UnripeBean.sol#6)\n\t- ABIEncoderV2 (contracts/tokens/UnripeBean3Crv.sol#6)\n\t- ^0.7.6 (contracts/beanstalk/barn/FertilizerFacet.sol#5)\n\t- ^0.7.6 (contracts/beanstalk/diamond/PauseFacet.sol#5)\n\t- ^0.7.6 (contracts/beanstalk/farm/DepotFacet.sol#5)\n\t- ^0.7.6 (contracts/beanstalk/farm/FarmFacet.sol#5)\n\t- ^0.7.6 (contracts/beanstalk/metadata/MetadataFacet.sol#5)\n\t- ^0.7.6 (contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol#5)\n\t- ^0.7.6 (contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#5)\n\t- ^0.7.6 (contracts/beanstalk/silo/WhitelistFacet.sol#5)\n\t- ^0.7.6 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#3)\n\t- ^0.7.6 (contracts/depot/Depot.sol#3)\n\t- ^0.7.6 (contracts/interfaces/IERC4494.sol#3)\n\t- ^0.7.6 (contracts/interfaces/IUSDC.sol#5)\n\t- ^0.7.6 (contracts/interfaces/IWETH.sol#5)\n\t- ^0.7.6 (contracts/libraries/Token/LibBalance.sol#3)\n\t- ^0.7.6 (contracts/libraries/Token/LibEth.sol#5)\n\t- ^0.7.6 (contracts/mocks/curve/MockCurveFactory.sol#5)\n\t- ^0.7.6 (contracts/mocks/curve/MockCurveZap.sol#9)\n\t- ^0.7.6 (contracts/mocks/curve/MockMeta3Curve.sol#5)\n\t- ^0.7.6 (contracts/mocks/curve/MockPlainCurve.sol#5)\n\t- ^0.7.6 (contracts/mocks/mockFacets/MockConvertFacet.sol#5)\n\t- ^0.7.6 (contracts/mocks/mockFacets/MockSeasonFacet.sol#4)\n\t- ^0.7.6 (contracts/mocks/mockFacets/MockUnripeFacet.sol#5)\n\t- ^0.7.6 (contracts/tokens/ERC20/ERC20Permit.sol#4)\n\t- ^0.7.6 (contracts/tokens/Fertilizer/Fertilizer.sol#3)\n\t- ^0.7.6 (contracts/tokens/Fertilizer/Fertilizer1155.sol#5)\n\t- ^0.7.6 (contracts/tokens/Fertilizer/FertilizerPreMint.sol#3)\n\t- ^0.7.6 (contracts/tokens/Fertilizer/Internalizer.sol#3)\n\t- v2 (contracts/interfaces/IQuoter.sol#3)\n\t- v2 (contracts/interfaces/ISwapRouter.sol#3)\n",
            "markdown": "Different versions of Solidity are used:\n\t- Version used: ['0.7.6', '=0.7.6', '>=0.4.0', '>=0.4.0<0.8.0', '>=0.4.24<0.8.0', '>=0.5.0', '>=0.5.0<0.8.0', '>=0.6.0', '>=0.6.0<0.8.0', '>=0.6.2<0.8.0', '>=0.7.0', '>=0.7.5', '^0.7.6']\n\t- [0.7.6](contracts/beanstalk/barn/UnripeFacet.sol#L5)\n\t- [0.7.6](contracts/tokens/ERC20/BeanstalkERC20.sol#L3)\n\t- [=0.7.6](contracts/C.sol#L3)\n\t- [=0.7.6](contracts/beanstalk/AppStorage.sol#L3)\n\t- [=0.7.6](contracts/beanstalk/AppStorageOld.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/Diamond.sol#L2)\n\t- [=0.7.6](contracts/beanstalk/ReentrancyGuard.sol#L4)\n\t- [=0.7.6](contracts/beanstalk/diamond/DiamondCutFacet.sol#L6)\n\t- [=0.7.6](contracts/beanstalk/diamond/DiamondLoupeFacet.sol#L6)\n\t- [=0.7.6](contracts/beanstalk/diamond/OwnershipFacet.sol#L3)\n\t- [=0.7.6](contracts/beanstalk/farm/CurveFacet.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/farm/TokenFacet.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/farm/TokenSupportFacet.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/field/FieldFacet.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/field/FundraiserFacet.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip0.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip1.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip11.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip12.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip13.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip14.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip16.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip2.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip22.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip23.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip24.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip5.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip7.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip8.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBip9.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBipNewSilo.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitBipSunriseImprovements.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitDiamond.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitEBip6.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitFundraiser.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitHotFix2.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitHotFix3.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitHotFix4.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitHotFix5.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitMint.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitOmnisciaAudit.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitReplant.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/init/InitWhitelist.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/silo/ApprovalFacet.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/silo/BDVFacet.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/silo/ConvertFacet.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/silo/MigrationFacet.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/silo/SiloFacet/Silo.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L6)\n\t- [=0.7.6](contracts/beanstalk/silo/SiloFacet/TokenSilo.sol#L5)\n\t- [=0.7.6](contracts/beanstalk/sun/SeasonFacet/Oracle.sol#L3)\n\t- [=0.7.6](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L3)\n\t- [=0.7.6](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L3)\n\t- [=0.7.6](contracts/ecosystem/price/BeanstalkPrice.sol#L2)\n\t- [=0.7.6](contracts/ecosystem/price/CurvePrice.sol#L2)\n\t- [=0.7.6](contracts/ecosystem/price/P.sol#L2)\n\t- [=0.7.6](contracts/interfaces/IBean.sol#L3)\n\t- [=0.7.6](contracts/interfaces/IBeanstalkTransfer.sol#L3)\n\t- [=0.7.6](contracts/interfaces/IBlockBasefee.sol#L3)\n\t- [=0.7.6](contracts/interfaces/ICurve.sol#L3)\n\t- [=0.7.6](contracts/interfaces/IDiamondCut.sol#L3)\n\t- [=0.7.6](contracts/interfaces/IDiamondLoupe.sol#L3)\n\t- [=0.7.6](contracts/interfaces/IERC165.sol#L3)\n\t- [=0.7.6](contracts/interfaces/IFertilizer.sol#L3)\n\t- [=0.7.6](contracts/interfaces/IPipeline.sol#L2)\n\t- [=0.7.6](contracts/interfaces/IProxyAdmin.sol#L3)\n\t- [=0.7.6](contracts/libraries/Convert/LibConvert.sol#L3)\n\t- [=0.7.6](contracts/libraries/Convert/LibConvertData.sol#L3)\n\t- [=0.7.6](contracts/libraries/Convert/LibCurveConvert.sol#L3)\n\t- [=0.7.6](contracts/libraries/Convert/LibLambdaConvert.sol#L3)\n\t- [=0.7.6](contracts/libraries/Convert/LibMetaCurveConvert.sol#L3)\n\t- [=0.7.6](contracts/libraries/Convert/LibUnripeConvert.sol#L3)\n\t- [=0.7.6](contracts/libraries/Curve/LibBeanMetaCurve.sol#L3)\n\t- [=0.7.6](contracts/libraries/Curve/LibCurve.sol#L3)\n\t- [=0.7.6](contracts/libraries/Curve/LibMetaCurve.sol#L3)\n\t- [=0.7.6](contracts/libraries/Decimal.sol#L5)\n\t- [=0.7.6](contracts/libraries/LibAppStorage.sol#L3)\n\t- [=0.7.6](contracts/libraries/LibBytes.sol#L5)\n\t- [=0.7.6](contracts/libraries/LibBytes64.sol#L3)\n\t- [=0.7.6](contracts/libraries/LibDiamond.sol#L6)\n\t- [=0.7.6](contracts/libraries/LibDibbler.sol#L3)\n\t- [=0.7.6](contracts/libraries/LibFertilizer.sol#L5)\n\t- [=0.7.6](contracts/libraries/LibFunction.sol#L5)\n\t- [=0.7.6](contracts/libraries/LibIncentive.sol#L3)\n\t- [=0.7.6](contracts/libraries/LibPRBMath.sol#L3)\n\t- [=0.7.6](contracts/libraries/LibPolynomial.sol#L5)\n\t- [=0.7.6](contracts/libraries/LibUnripe.sol#L3)\n\t- [=0.7.6](contracts/libraries/Oracle/LibCurveOracle.sol#L3)\n\t- [=0.7.6](contracts/libraries/Silo/LibLegacyTokenSilo.sol#L5)\n\t- [=0.7.6](contracts/libraries/Silo/LibLegacyWhitelist.sol#L5)\n\t- [=0.7.6](contracts/libraries/Silo/LibSilo.sol#L5)\n\t- [=0.7.6](contracts/libraries/Silo/LibSiloPermit.sol#L5)\n\t- [=0.7.6](contracts/libraries/Silo/LibTokenSilo.sol#L5)\n\t- [=0.7.6](contracts/libraries/Silo/LibUnripeSilo.sol#L3)\n\t- [=0.7.6](contracts/libraries/Silo/LibWhitelist.sol#L5)\n\t- [=0.7.6](contracts/libraries/Token/LibApprove.sol#L6)\n\t- [=0.7.6](contracts/libraries/Token/LibTokenApprove.sol#L3)\n\t- [=0.7.6](contracts/libraries/Token/LibTokenPermit.sol#L5)\n\t- [=0.7.6](contracts/libraries/Token/LibTransfer.sol#L3)\n\t- [=0.7.6](contracts/libraries/Token/LibWeth.sol#L6)\n\t- [=0.7.6](contracts/mocks/MockBlockBasefee.sol#L5)\n\t- [=0.7.6](contracts/mocks/MockDiamond.sol#L2)\n\t- [=0.7.6](contracts/mocks/MockERC1155.sol#L2)\n\t- [=0.7.6](contracts/mocks/MockERC721.sol#L2)\n\t- [=0.7.6](contracts/mocks/MockFertilizer.sol#L5)\n\t- [=0.7.6](contracts/mocks/MockInitDiamond.sol#L5)\n\t- [=0.7.6](contracts/mocks/MockSiloToken.sol#L5)\n\t- [=0.7.6](contracts/mocks/MockToken.sol#L5)\n\t- [=0.7.6](contracts/mocks/MockWETH.sol#L5)\n\t- [=0.7.6](contracts/mocks/mockFacets/MockAdminFacet.sol#L4)\n\t- [=0.7.6](contracts/mocks/mockFacets/MockFertilizerFacet.sol#L5)\n\t- [=0.7.6](contracts/mocks/mockFacets/MockFieldFacet.sol#L5)\n\t- [=0.7.6](contracts/mocks/mockFacets/MockFundraiserFacet.sol#L5)\n\t- [=0.7.6](contracts/mocks/mockFacets/MockMarketplaceFacet.sol#L5)\n\t- [=0.7.6](contracts/mocks/mockFacets/MockSiloFacet.sol#L5)\n\t- [=0.7.6](contracts/mocks/uniswap/MockUniswapV3Deployer.sol#L2)\n\t- [=0.7.6](contracts/mocks/uniswap/MockUniswapV3Factory.sol#L2)\n\t- [=0.7.6](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L2)\n\t- [=0.7.6](contracts/mocks/uniswap/NoDelegateCall.sol#L2)\n\t- [=0.7.6](contracts/pipeline/Pipeline.sol#L2)\n\t- [=0.7.6](contracts/tokens/Bean.sol#L5)\n\t- [=0.7.6](contracts/tokens/UnripeBean.sol#L5)\n\t- [=0.7.6](contracts/tokens/UnripeBean3Crv.sol#L5)\n\t- [>=0.4.0](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#L2)\n\t- [>=0.4.0](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#L2)\n\t- [>=0.4.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L2)\n\t- [>=0.4.24<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#L4)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3PoolDeployer.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/LiquidityMath.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/SwapMath.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#L2)\n\t- [>=0.5.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#L2)\n\t- [>=0.5.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#L2)\n\t- [>=0.5.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L2)\n\t- [>=0.5.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L2)\n\t- [>=0.5.0<0.8.0](node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#L2)\n\t- [>=0.6.0](node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#L2)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/access/AccessControl.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/access/Ownable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/cryptography/MerkleProof.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/drafts/EIP712.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/introspection/ERC165.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/introspection/IERC165.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/math/Math.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/math/SafeMath.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/ERC721Holder.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/utils/Context.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/utils/Counters.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/utils/EnumerableMap.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/utils/SafeCast.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/utils/Strings.sol#L3)\n\t- [>=0.6.0<0.8.0](contracts/interfaces/IERC1155Receiver.sol#L3)\n\t- [>=0.6.0<0.8.0](contracts/libraries/LibSafeMath128.sol#L3)\n\t- [>=0.6.0<0.8.0](contracts/libraries/LibSafeMath32.sol#L3)\n\t- [>=0.6.0<0.8.0](contracts/libraries/LibSafeMathSigned128.sol#L3)\n\t- [>=0.6.0<0.8.0](contracts/libraries/LibSafeMathSigned96.sol#L3)\n\t- [>=0.6.0<0.8.0](contracts/libraries/LibStrings.sol#L3)\n\t- [>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol#L3)\n\t- [>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol#L3)\n\t- [>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L3)\n\t- [>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#L3)\n\t- [>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol#L3)\n\t- [>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#L3)\n\t- [>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol#L3)\n\t- [>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol#L3)\n\t- [>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts/utils/Address.sol#L3)\n\t- [>=0.7.0](node_modules/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol#L2)\n\t- [>=0.7.5](contracts/interfaces/IQuoter.sol#L2)\n\t- [>=0.7.5](contracts/interfaces/ISwapRouter.sol#L2)\n\t- [ABIEncoderV2](contracts/C.sol#L4)\n\t- [ABIEncoderV2](contracts/beanstalk/AppStorage.sol#L4)\n\t- [ABIEncoderV2](contracts/beanstalk/AppStorageOld.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/Diamond.sol#L3)\n\t- [ABIEncoderV2](contracts/beanstalk/ReentrancyGuard.sol#L5)\n\t- [ABIEncoderV2](contracts/beanstalk/barn/FertilizerFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/barn/UnripeFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/diamond/DiamondCutFacet.sol#L5)\n\t- [ABIEncoderV2](contracts/beanstalk/diamond/DiamondLoupeFacet.sol#L5)\n\t- [ABIEncoderV2](contracts/beanstalk/diamond/OwnershipFacet.sol#L4)\n\t- [ABIEncoderV2](contracts/beanstalk/diamond/PauseFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/farm/CurveFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/farm/DepotFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/farm/FarmFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/farm/TokenFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/farm/TokenSupportFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/field/FieldFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/field/FundraiserFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip0.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip1.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip11.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip12.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip13.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip14.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip16.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip2.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip22.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip23.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip24.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip5.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip7.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip8.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBip9.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBipNewSilo.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitBipSunriseImprovements.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitDiamond.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitEBip6.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitFundraiser.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitHotFix2.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitHotFix3.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitHotFix4.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitHotFix5.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitMint.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitOmnisciaAudit.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitReplant.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/init/InitWhitelist.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/metadata/MetadataFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/silo/ApprovalFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/silo/BDVFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/silo/ConvertFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/silo/MigrationFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/silo/SiloFacet/Silo.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L7)\n\t- [ABIEncoderV2](contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/silo/SiloFacet/TokenSilo.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/silo/WhitelistFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/beanstalk/sun/SeasonFacet/Oracle.sol#L4)\n\t- [ABIEncoderV2](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L4)\n\t- [ABIEncoderV2](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L4)\n\t- [ABIEncoderV2](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L4)\n\t- [ABIEncoderV2](contracts/depot/Depot.sol#L4)\n\t- [ABIEncoderV2](contracts/ecosystem/price/BeanstalkPrice.sol#L3)\n\t- [ABIEncoderV2](contracts/ecosystem/price/CurvePrice.sol#L3)\n\t- [ABIEncoderV2](contracts/ecosystem/price/P.sol#L3)\n\t- [ABIEncoderV2](contracts/interfaces/IBean.sol#L4)\n\t- [ABIEncoderV2](contracts/interfaces/IBeanstalkTransfer.sol#L2)\n\t- [ABIEncoderV2](contracts/interfaces/IBlockBasefee.sol#L2)\n\t- [ABIEncoderV2](contracts/interfaces/ICurve.sol#L2)\n\t- [ABIEncoderV2](contracts/interfaces/IDiamondCut.sol#L2)\n\t- [ABIEncoderV2](contracts/interfaces/IDiamondLoupe.sol#L2)\n\t- [ABIEncoderV2](contracts/interfaces/IERC165.sol#L2)\n\t- [ABIEncoderV2](contracts/interfaces/IERC4494.sol#L4)\n\t- [ABIEncoderV2](contracts/interfaces/IFertilizer.sol#L2)\n\t- [ABIEncoderV2](contracts/interfaces/IPipeline.sol#L3)\n\t- [ABIEncoderV2](contracts/interfaces/IProxyAdmin.sol#L2)\n\t- [ABIEncoderV2](contracts/interfaces/IUSDC.sol#L6)\n\t- [ABIEncoderV2](contracts/interfaces/IWETH.sol#L6)\n\t- [ABIEncoderV2](contracts/libraries/Convert/LibConvert.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Convert/LibConvertData.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Convert/LibCurveConvert.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Convert/LibLambdaConvert.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Convert/LibMetaCurveConvert.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Convert/LibUnripeConvert.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Curve/LibBeanMetaCurve.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Curve/LibCurve.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Curve/LibMetaCurve.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Decimal.sol#L6)\n\t- [ABIEncoderV2](contracts/libraries/LibAppStorage.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/LibDiamond.sol#L5)\n\t- [ABIEncoderV2](contracts/libraries/LibDibbler.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/LibFertilizer.sol#L6)\n\t- [ABIEncoderV2](contracts/libraries/LibFunction.sol#L6)\n\t- [ABIEncoderV2](contracts/libraries/LibIncentive.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/LibPRBMath.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/LibUnripe.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Oracle/LibCurveOracle.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Silo/LibLegacyTokenSilo.sol#L6)\n\t- [ABIEncoderV2](contracts/libraries/Silo/LibLegacyWhitelist.sol#L6)\n\t- [ABIEncoderV2](contracts/libraries/Silo/LibSilo.sol#L6)\n\t- [ABIEncoderV2](contracts/libraries/Silo/LibSiloPermit.sol#L6)\n\t- [ABIEncoderV2](contracts/libraries/Silo/LibTokenSilo.sol#L6)\n\t- [ABIEncoderV2](contracts/libraries/Silo/LibUnripeSilo.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Silo/LibWhitelist.sol#L6)\n\t- [ABIEncoderV2](contracts/libraries/Token/LibApprove.sol#L5)\n\t- [ABIEncoderV2](contracts/libraries/Token/LibBalance.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Token/LibEth.sol#L6)\n\t- [ABIEncoderV2](contracts/libraries/Token/LibTokenApprove.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Token/LibTokenPermit.sol#L6)\n\t- [ABIEncoderV2](contracts/libraries/Token/LibTransfer.sol#L4)\n\t- [ABIEncoderV2](contracts/libraries/Token/LibWeth.sol#L5)\n\t- [ABIEncoderV2](contracts/mocks/MockBlockBasefee.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/MockDiamond.sol#L3)\n\t- [ABIEncoderV2](contracts/mocks/MockERC1155.sol#L3)\n\t- [ABIEncoderV2](contracts/mocks/MockERC721.sol#L3)\n\t- [ABIEncoderV2](contracts/mocks/MockFertilizer.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/MockInitDiamond.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/MockSiloToken.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/MockToken.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/curve/MockCurveFactory.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/curve/MockCurveZap.sol#L10)\n\t- [ABIEncoderV2](contracts/mocks/curve/MockMeta3Curve.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/curve/MockPlainCurve.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/mockFacets/MockAdminFacet.sol#L5)\n\t- [ABIEncoderV2](contracts/mocks/mockFacets/MockConvertFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/mockFacets/MockFertilizerFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/mockFacets/MockFieldFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/mockFacets/MockFundraiserFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/mockFacets/MockMarketplaceFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/mockFacets/MockSeasonFacet.sol#L5)\n\t- [ABIEncoderV2](contracts/mocks/mockFacets/MockSiloFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/mocks/mockFacets/MockUnripeFacet.sol#L6)\n\t- [ABIEncoderV2](contracts/pipeline/Pipeline.sol#L3)\n\t- [ABIEncoderV2](contracts/tokens/Bean.sol#L6)\n\t- [ABIEncoderV2](contracts/tokens/ERC20/BeanstalkERC20.sol#L4)\n\t- [ABIEncoderV2](contracts/tokens/ERC20/ERC20Permit.sol#L5)\n\t- [ABIEncoderV2](contracts/tokens/Fertilizer/Fertilizer.sol#L4)\n\t- [ABIEncoderV2](contracts/tokens/Fertilizer/Fertilizer1155.sol#L6)\n\t- [ABIEncoderV2](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L4)\n\t- [ABIEncoderV2](contracts/tokens/Fertilizer/Internalizer.sol#L4)\n\t- [ABIEncoderV2](contracts/tokens/UnripeBean.sol#L6)\n\t- [ABIEncoderV2](contracts/tokens/UnripeBean3Crv.sol#L6)\n\t- [^0.7.6](contracts/beanstalk/barn/FertilizerFacet.sol#L5)\n\t- [^0.7.6](contracts/beanstalk/diamond/PauseFacet.sol#L5)\n\t- [^0.7.6](contracts/beanstalk/farm/DepotFacet.sol#L5)\n\t- [^0.7.6](contracts/beanstalk/farm/FarmFacet.sol#L5)\n\t- [^0.7.6](contracts/beanstalk/metadata/MetadataFacet.sol#L5)\n\t- [^0.7.6](contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol#L5)\n\t- [^0.7.6](contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#L5)\n\t- [^0.7.6](contracts/beanstalk/silo/WhitelistFacet.sol#L5)\n\t- [^0.7.6](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L3)\n\t- [^0.7.6](contracts/depot/Depot.sol#L3)\n\t- [^0.7.6](contracts/interfaces/IERC4494.sol#L3)\n\t- [^0.7.6](contracts/interfaces/IUSDC.sol#L5)\n\t- [^0.7.6](contracts/interfaces/IWETH.sol#L5)\n\t- [^0.7.6](contracts/libraries/Token/LibBalance.sol#L3)\n\t- [^0.7.6](contracts/libraries/Token/LibEth.sol#L5)\n\t- [^0.7.6](contracts/mocks/curve/MockCurveFactory.sol#L5)\n\t- [^0.7.6](contracts/mocks/curve/MockCurveZap.sol#L9)\n\t- [^0.7.6](contracts/mocks/curve/MockMeta3Curve.sol#L5)\n\t- [^0.7.6](contracts/mocks/curve/MockPlainCurve.sol#L5)\n\t- [^0.7.6](contracts/mocks/mockFacets/MockConvertFacet.sol#L5)\n\t- [^0.7.6](contracts/mocks/mockFacets/MockSeasonFacet.sol#L4)\n\t- [^0.7.6](contracts/mocks/mockFacets/MockUnripeFacet.sol#L5)\n\t- [^0.7.6](contracts/tokens/ERC20/ERC20Permit.sol#L4)\n\t- [^0.7.6](contracts/tokens/Fertilizer/Fertilizer.sol#L3)\n\t- [^0.7.6](contracts/tokens/Fertilizer/Fertilizer1155.sol#L5)\n\t- [^0.7.6](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L3)\n\t- [^0.7.6](contracts/tokens/Fertilizer/Internalizer.sol#L3)\n\t- [v2](contracts/interfaces/IQuoter.sol#L3)\n\t- [v2](contracts/interfaces/ISwapRouter.sol#L3)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/barn/UnripeFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6dc3fbee2b52cae985a2bc76caccf01777fa03c338e26446561e9ffaff1c3409"
          }
        },
        {
          "ruleId": "3-0-cyclomatic-complexity",
          "message": {
            "text": "CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/CurveFacet.sol#159-234) has a high cyclomatic complexity (13).\n",
            "markdown": "[CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To)](contracts/beanstalk/farm/CurveFacet.sol#L159-L234) has a high cyclomatic complexity (13).\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 234
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "11c3ae9542322c2df83751060c3891f1fd581482710e685f43d8e174e44ae392"
          }
        },
        {
          "ruleId": "3-0-cyclomatic-complexity",
          "message": {
            "text": "Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193) has a high cyclomatic complexity (13).\n",
            "markdown": "[Weather.stepWeather(int256)](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L100-L193) has a high cyclomatic complexity (13).\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Weather.sol"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "131809b5f0e4800aa72745f8a966f91f193709b650e3f6fb949c35775f13b71f"
          }
        },
        {
          "ruleId": "3-0-cyclomatic-complexity",
          "message": {
            "text": "TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) has a high cyclomatic complexity (24).\n",
            "markdown": "[TickMath.getSqrtRatioAtTick(int24)](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L23-L54) has a high cyclomatic complexity (24).\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "299db849fa7b8fd3931fc6d0ed62d57ec8a93eb237f23adbdd487c9a70222e33"
          }
        },
        {
          "ruleId": "3-0-cyclomatic-complexity",
          "message": {
            "text": "MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797) has a high cyclomatic complexity (28).\n",
            "markdown": "[MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes)](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L605-L797) has a high cyclomatic complexity (28).\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 605,
                  "endLine": 797
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3a70050bcb36b68325b706d177e917f39c87e2fbac33feca0b8868535e1d8f38"
          }
        },
        {
          "ruleId": "3-0-cyclomatic-complexity",
          "message": {
            "text": "SwapMath.computeSwapStep(uint160,uint160,uint128,int256,uint24) (node_modules/@uniswap/v3-core/contracts/libraries/SwapMath.sol#21-97) has a high cyclomatic complexity (13).\n",
            "markdown": "[SwapMath.computeSwapStep(uint160,uint160,uint128,int256,uint24)](node_modules/@uniswap/v3-core/contracts/libraries/SwapMath.sol#L21-L97) has a high cyclomatic complexity (13).\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SwapMath.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "80de010232fa42ef689c10af9f088f8019e0c558fcce42e663471eb73351654e"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath128.div(uint128,uint128) (contracts/libraries/LibSafeMath128.sol#126-129) is never used and should be removed\n",
            "markdown": "[LibSafeMath128.div(uint128,uint128)](contracts/libraries/LibSafeMath128.sol#L126-L129) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath128.sol"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 129
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "008b741cfca2f1e59509ecc540f80b786bff23ac2b4528c4a4ec1e502897ff2f"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath32.mod(uint32,uint32,string) (contracts/libraries/LibSafeMath32.sol#201-204) is never used and should be removed\n",
            "markdown": "[LibSafeMath32.mod(uint32,uint32,string)](contracts/libraries/LibSafeMath32.sol#L201-L204) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath32.sol"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 204
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0cc6124fccd98f6473bdb3dc083c338cb21ac91939c4549d50928db44ced10b5"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath128.tryMod(uint128,uint128) (contracts/libraries/LibSafeMath128.sol#61-64) is never used and should be removed\n",
            "markdown": "[LibSafeMath128.tryMod(uint128,uint128)](contracts/libraries/LibSafeMath128.sol#L61-L64) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath128.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 64
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e9fb2da0fb86b4c07256b4b6d9e37b207166f523eb114bb85f19d17bb97f53b"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibStrings.toHexString(address) (contracts/libraries/LibStrings.sol#51-53) is never used and should be removed\n",
            "markdown": "[LibStrings.toHexString(address)](contracts/libraries/LibStrings.sol#L51-L53) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibStrings.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1059ed67cab63ff94fc20bd478b608ab16c0223795034d3fdf418ed13d6a5de5"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "C.getBlockLengthSeconds() (contracts/C.sol#79-81) is never used and should be removed\n",
            "markdown": "[C.getBlockLengthSeconds()](contracts/C.sol#L79-L81) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/C.sol"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 81
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "10f814c5f77f306866499bb6962320a91011c6df5e61e50617d58b5125cc12fd"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "C.UniV3EthUsdc() (contracts/C.sol#153-155) is never used and should be removed\n",
            "markdown": "[C.UniV3EthUsdc()](contracts/C.sol#L153-L155) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/C.sol"
                },
                "region": {
                  "startLine": 153,
                  "endLine": 155
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "121404483d38648234a3e86546cf2c1c3eb62bd7593cb14f9e6fc80b6cc7ad1a"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath32.tryDiv(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#51-54) is never used and should be removed\n",
            "markdown": "[LibSafeMath32.tryDiv(uint32,uint32)](contracts/libraries/LibSafeMath32.sol#L51-L54) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath32.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "138bf7093e8c7fc0b9587feb4a4561956324e448c4ac435ee3e5eb0188b04603"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMathSigned128.add(int128,int128) (contracts/libraries/LibSafeMathSigned128.sol#86-91) is never used and should be removed\n",
            "markdown": "[LibSafeMathSigned128.add(int128,int128)](contracts/libraries/LibSafeMathSigned128.sol#L86-L91) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMathSigned128.sol"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "20634546a42deedb1be118d52e3a5dcffa7572b790365705a84a255357d49398"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.sub(Decimal.D256,Decimal.D256,string) (contracts/libraries/Decimal.sol#169-179) is never used and should be removed\n",
            "markdown": "[Decimal.sub(Decimal.D256,Decimal.D256,string)](contracts/libraries/Decimal.sol#L169-L179) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 169,
                  "endLine": 179
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "221aa48dd2afe9e25d5fd2da0f19ba20b0471677f60107d2611f3f94a8335c52"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibPRBMath.mulDivFixedPoint(uint256,uint256) (contracts/libraries/LibPRBMath.sol#59-96) is never used and should be removed\n",
            "markdown": "[LibPRBMath.mulDivFixedPoint(uint256,uint256)](contracts/libraries/LibPRBMath.sol#L59-L96) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "25d331687d9a481f0e1c704bf0e1d7e0cd1479776692adde62b0b0a5c2b88e6f"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath128.mod(uint128,uint128) (contracts/libraries/LibSafeMath128.sol#143-146) is never used and should be removed\n",
            "markdown": "[LibSafeMath128.mod(uint128,uint128)](contracts/libraries/LibSafeMath128.sol#L143-L146) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath128.sol"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 146
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2a1b821493d414d8069bebee9306bcbbfc29169ce23b5b63a68eed87c574c717"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.pow(Decimal.D256,uint256) (contracts/libraries/Decimal.sol#127-145) is never used and should be removed\n",
            "markdown": "[Decimal.pow(Decimal.D256,uint256)](contracts/libraries/Decimal.sol#L127-L145) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 145
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2fac70339c8c35e0a652f6869774f58064d650ee9d8f1c6ed2d0868f79a31117"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Fertilizer1155._transfer(address,address,uint256,uint256) (contracts/tokens/Fertilizer/Fertilizer1155.sol#76-82) is never used and should be removed\n",
            "markdown": "[Fertilizer1155._transfer(address,address,uint256,uint256)](contracts/tokens/Fertilizer/Fertilizer1155.sol#L76-L82) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer1155.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 82
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "342b9ae8d018eddd751002b462b58e041e6854718bd724b77cc3dc9274464c45"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.sub(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#158-167) is never used and should be removed\n",
            "markdown": "[Decimal.sub(Decimal.D256,Decimal.D256)](contracts/libraries/Decimal.sol#L158-L167) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 167
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "37a8733536403e2877e826c0ef4cc94b22e7ccd9d67899684ff861021a168354"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath128.tryMul(uint128,uint128) (contracts/libraries/LibSafeMath128.sol#36-44) is never used and should be removed\n",
            "markdown": "[LibSafeMath128.tryMul(uint128,uint128)](contracts/libraries/LibSafeMath128.sol#L36-L44) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath128.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3dfc70dafec89c2f5999e09484832a5898a96eebceec4128b4844a1763531156"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibPRBMath.min(uint128,uint128) (contracts/libraries/LibPRBMath.sol#176-178) is never used and should be removed\n",
            "markdown": "[LibPRBMath.min(uint128,uint128)](contracts/libraries/LibPRBMath.sol#L176-L178) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 178
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3f8eb29eafd9919a94d62b9ce00960e43f8d0677a3ef9aa653856f1719ccd722"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath128.tryAdd(uint128,uint128) (contracts/libraries/LibSafeMath128.sol#15-19) is never used and should be removed\n",
            "markdown": "[LibSafeMath128.tryAdd(uint128,uint128)](contracts/libraries/LibSafeMath128.sol#L15-L19) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath128.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4220660c523a20a4ef0a75dfb572c0e6049406f2ebdd199bc32aa4904e27abb3"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath128.div(uint128,uint128,string) (contracts/libraries/LibSafeMath128.sol#181-184) is never used and should be removed\n",
            "markdown": "[LibSafeMath128.div(uint128,uint128,string)](contracts/libraries/LibSafeMath128.sol#L181-L184) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath128.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 184
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4d927d3c63d410495fd3f5ca312891b91b46d5c3f519e44b92f8b573cbe4c2ee"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibTokenSilo.stalkEarnedPerSeason(address) (contracts/libraries/Silo/LibTokenSilo.sol#337-340) is never used and should be removed\n",
            "markdown": "[LibTokenSilo.stalkEarnedPerSeason(address)](contracts/libraries/Silo/LibTokenSilo.sol#L337-L340) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibTokenSilo.sol"
                },
                "region": {
                  "startLine": 337,
                  "endLine": 340
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4e4029a332244725063e5ebeb8c358cd97dc44ce6f7d2510672924d939d28f16"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.div(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#192-201) is never used and should be removed\n",
            "markdown": "[Decimal.div(Decimal.D256,Decimal.D256)](contracts/libraries/Decimal.sol#L192-L201) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 192,
                  "endLine": 201
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5268d5b719dd4d688c6dec8ebb569000db6365fc9c551da7b4d24c19d73ccd41"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "C.getSeedsPerBean() (contracts/C.sol#87-89) is never used and should be removed\n",
            "markdown": "[C.getSeedsPerBean()](contracts/C.sol#L87-L89) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/C.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 89
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5529dce09c0d33cac7c62ac69ecd64a0c2982e3d91c691f9633b0e4f279fec7b"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath32.mul(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#107-112) is never used and should be removed\n",
            "markdown": "[LibSafeMath32.mul(uint32,uint32)](contracts/libraries/LibSafeMath32.sol#L107-L112) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath32.sol"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 112
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "55ab5c187c2c6012e5e493a1b2cd48860036d1c0ec4ef980cee66aa96a0b03cf"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMathSigned128.div(int128,int128) (contracts/libraries/LibSafeMathSigned128.sol#50-57) is never used and should be removed\n",
            "markdown": "[LibSafeMathSigned128.div(int128,int128)](contracts/libraries/LibSafeMathSigned128.sol#L50-L57) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMathSigned128.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 57
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "56a45eb15e2914ecceb757c819084c24136dca60958670a765e0d4286f2f79d3"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath128.tryDiv(uint128,uint128) (contracts/libraries/LibSafeMath128.sol#51-54) is never used and should be removed\n",
            "markdown": "[LibSafeMath128.tryDiv(uint128,uint128)](contracts/libraries/LibSafeMath128.sol#L51-L54) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath128.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d83aedbb8aec0a5cd4597799d53ec3104646ca10e99f43057de752c479efde3"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.sub(Decimal.D256,uint256,string) (contracts/libraries/Decimal.sol#93-103) is never used and should be removed\n",
            "markdown": "[Decimal.sub(Decimal.D256,uint256,string)](contracts/libraries/Decimal.sol#L93-L103) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 103
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "63ee49cc8f2d0448511483f3ef9548bc7b56604b96047ff0ca4a830f9b7a2325"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath32.tryMod(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#61-64) is never used and should be removed\n",
            "markdown": "[LibSafeMath32.tryMod(uint32,uint32)](contracts/libraries/LibSafeMath32.sol#L61-L64) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath32.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 64
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6be6ec6e4da0a5413a55f0903b46ea3d6627d4b6605022cdbc3e4186975501d2"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.div(Decimal.D256,uint256) (contracts/libraries/Decimal.sol#116-125) is never used and should be removed\n",
            "markdown": "[Decimal.div(Decimal.D256,uint256)](contracts/libraries/Decimal.sol#L116-L125) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 125
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6cc35c132a52b08b080c2c61f8632d472ef2ac80e4cdc76161fb1ef6dd67f789"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath32.sub(uint32,uint32,string) (contracts/libraries/LibSafeMath32.sol#161-164) is never used and should be removed\n",
            "markdown": "[LibSafeMath32.sub(uint32,uint32,string)](contracts/libraries/LibSafeMath32.sol#L161-L164) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath32.sol"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 164
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6f30a91e1d8433c224dc4eaef6e7bb9d35b2cadbae971ca2e0729caa4565a5b2"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath32.trySub(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#26-29) is never used and should be removed\n",
            "markdown": "[LibSafeMath32.trySub(uint32,uint32)](contracts/libraries/LibSafeMath32.sol#L26-L29) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath32.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6f9a60351ad2991851cdfd4b849c8c90f208871a27db9368063836ffb618ddfb"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibTokenSilo.calculateStalkFromStemAndBdv(address,int96,uint256) (contracts/libraries/Silo/LibTokenSilo.sol#393-402) is never used and should be removed\n",
            "markdown": "[LibTokenSilo.calculateStalkFromStemAndBdv(address,int96,uint256)](contracts/libraries/Silo/LibTokenSilo.sol#L393-L402) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibTokenSilo.sol"
                },
                "region": {
                  "startLine": 393,
                  "endLine": 402
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "73329d7bec66d37e95e9ec9d3df4f2b4c5c5064dd9423781814c74caea6ccf1e"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMathSigned128.sub(int128,int128) (contracts/libraries/LibSafeMathSigned128.sol#69-74) is never used and should be removed\n",
            "markdown": "[LibSafeMathSigned128.sub(int128,int128)](contracts/libraries/LibSafeMathSigned128.sol#L69-L74) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMathSigned128.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 74
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7a69c4b585ea77e1dbdc2319ad5566c152d6296f6ef07fa3c090efba52b14a3d"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "C.getStalkPerBean() (contracts/C.sol#91-93) is never used and should be removed\n",
            "markdown": "[C.getStalkPerBean()](contracts/C.sol#L91-L93) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/C.sol"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 93
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7a8ace5e6c15c2bd0a7eb4cf2b8bdb3d4b9d7dddd970629b5358da4035d3ff08"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.sub(Decimal.D256,uint256) (contracts/libraries/Decimal.sol#82-91) is never used and should be removed\n",
            "markdown": "[Decimal.sub(Decimal.D256,uint256)](contracts/libraries/Decimal.sol#L82-L91) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "83ef6514ed0b87b360f9174c275f9a1d6e9810601242043b80b5e1d07f752aba"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibPRBMath.min(uint256,uint256) (contracts/libraries/LibPRBMath.sol#172-174) is never used and should be removed\n",
            "markdown": "[LibPRBMath.min(uint256,uint256)](contracts/libraries/LibPRBMath.sol#L172-L174) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 172,
                  "endLine": 174
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8f13e696579fca6877774276395037825ec7c983d994afe1cf6d26520760b05f"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibBytes.toUint32(bytes,uint256) (contracts/libraries/LibBytes.sol#34-44) is never used and should be removed\n",
            "markdown": "[LibBytes.toUint32(bytes,uint256)](contracts/libraries/LibBytes.sol#L34-L44) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "90aacc364e2d1ee05b9f48fbf1fbad1f75a89b0a024a159e8ac920be6c8ff5a2"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.asUint256(Decimal.D256) (contracts/libraries/Decimal.sol#227-229) is never used and should be removed\n",
            "markdown": "[Decimal.asUint256(Decimal.D256)](contracts/libraries/Decimal.sol#L227-L229) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 227,
                  "endLine": 229
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "94d200ffd1a9ad3780cb92b6470919ab1a42b55f2f10035ed6337a1b96591538"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath128.sub(uint128,uint128,string) (contracts/libraries/LibSafeMath128.sol#161-164) is never used and should be removed\n",
            "markdown": "[LibSafeMath128.sub(uint128,uint128,string)](contracts/libraries/LibSafeMath128.sol#L161-L164) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath128.sol"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 164
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9577fdf0df34d332ab00fab2da52bfaf2550c85779cb785548c62ab3d26bb44c"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMathSigned96.add(int96,int96) (contracts/libraries/LibSafeMathSigned96.sol#86-91) is never used and should be removed\n",
            "markdown": "[LibSafeMathSigned96.add(int96,int96)](contracts/libraries/LibSafeMathSigned96.sol#L86-L91) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMathSigned96.sol"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9efd288c7524042df517329142b139349ae6388e9558eb6750f37d98b573b6a1"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibPRBMath.powu(uint256,uint256) (contracts/libraries/LibPRBMath.sol#44-57) is never used and should be removed\n",
            "markdown": "[LibPRBMath.powu(uint256,uint256)](contracts/libraries/LibPRBMath.sol#L44-L57) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 57
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a20578e88dd9617dee6a51f79c3cd3493d5e75b63de7f5b641be4a67ab9e52e3"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath128.mod(uint128,uint128,string) (contracts/libraries/LibSafeMath128.sol#201-204) is never used and should be removed\n",
            "markdown": "[LibSafeMath128.mod(uint128,uint128,string)](contracts/libraries/LibSafeMath128.sol#L201-L204) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath128.sol"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 204
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a548753a400406506c94213aebc05dba68fabb7831452ac45b6abea685221137"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.mul(Decimal.D256,uint256) (contracts/libraries/Decimal.sol#105-114) is never used and should be removed\n",
            "markdown": "[Decimal.mul(Decimal.D256,uint256)](contracts/libraries/Decimal.sol#L105-L114) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 114
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a92c69931b4224ff727a2c2ee2a0ca1b1995cc3be5a43aec22bade1551ab2457"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.lessThan(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#211-213) is never used and should be removed\n",
            "markdown": "[Decimal.lessThan(Decimal.D256,Decimal.D256)](contracts/libraries/Decimal.sol#L211-L213) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 213
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ab9198761b5a25f010bcdd7bd94848c018713fdf2f66b35d7a205e59e0e9e7ed"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.add(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#147-156) is never used and should be removed\n",
            "markdown": "[Decimal.add(Decimal.D256,Decimal.D256)](contracts/libraries/Decimal.sol#L147-L156) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b10e2c5e812d093326753cba95d371b70643cbb59849155799f5c2e462d11848"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibPRBMath.logBase2(uint256) (contracts/libraries/LibPRBMath.sol#133-166) is never used and should be removed\n",
            "markdown": "[LibPRBMath.logBase2(uint256)](contracts/libraries/LibPRBMath.sol#L133-L166) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 166
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b1e79bd4cada3c9d84a94592d473644dab4614269d8dfce9175362f7417b0dd8"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath32.tryMul(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#36-44) is never used and should be removed\n",
            "markdown": "[LibSafeMath32.tryMul(uint32,uint32)](contracts/libraries/LibSafeMath32.sol#L36-L44) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath32.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bea1b2405e59b140fee5a0315af050d97e133ce76c5bdd7840f2195c5ba83a41"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.equals(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#203-205) is never used and should be removed\n",
            "markdown": "[Decimal.equals(Decimal.D256,Decimal.D256)](contracts/libraries/Decimal.sol#L203-L205) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 203,
                  "endLine": 205
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c2423276659f37e6c87a00639935d9391247d2e43d6b77cd654207fb73ff0c73"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath32.div(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#126-129) is never used and should be removed\n",
            "markdown": "[LibSafeMath32.div(uint32,uint32)](contracts/libraries/LibSafeMath32.sol#L126-L129) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath32.sol"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 129
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3256944be58fdd6237fe7b2ef41bb622028682a7c86661dd1c5493c69df9d12"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.add(Decimal.D256,uint256) (contracts/libraries/Decimal.sol#71-80) is never used and should be removed\n",
            "markdown": "[Decimal.add(Decimal.D256,uint256)](contracts/libraries/Decimal.sol#L71-L80) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 80
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c5d50365b8fdfd5cfbcd6d218f55c088940f7153558c00ff1460608f934423bf"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath32.tryAdd(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#15-19) is never used and should be removed\n",
            "markdown": "[LibSafeMath32.tryAdd(uint32,uint32)](contracts/libraries/LibSafeMath32.sol#L15-L19) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath32.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c832613a79c5604e170520dfaf1b13be73588f6f78fc7b2736d29010379ffa52"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.mul(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#181-190) is never used and should be removed\n",
            "markdown": "[Decimal.mul(Decimal.D256,Decimal.D256)](contracts/libraries/Decimal.sol#L181-L190) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 190
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ceaa9f800bacc84a9df5a81b4312f2770a48119ec9c1f356ba1c5096b4e101bc"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMathSigned128.mul(int128,int128) (contracts/libraries/LibSafeMathSigned128.sol#22-36) is never used and should be removed\n",
            "markdown": "[LibSafeMathSigned128.mul(int128,int128)](contracts/libraries/LibSafeMathSigned128.sol#L22-L36) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMathSigned128.sol"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d114ca1b8c58b3de45433f76c70f47da28b13e01a26e3d3cc53cae8a2a301e41"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibPRBMath.mostSignificantBit(uint256) (contracts/libraries/LibPRBMath.sol#98-131) is never used and should be removed\n",
            "markdown": "[LibPRBMath.mostSignificantBit(uint256)](contracts/libraries/LibPRBMath.sol#L98-L131) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 131
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4316faa25e5be13bf802cf67719dd348e3936910d4942a9d170422e535c5b09"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.isZero(Decimal.D256) (contracts/libraries/Decimal.sol#223-225) is never used and should be removed\n",
            "markdown": "[Decimal.isZero(Decimal.D256)](contracts/libraries/Decimal.sol#L223-L225) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 223,
                  "endLine": 225
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d5bac301c3be2bf4ca54f9fec0cb0ed04808f6a135beb7c0c2c365606cba444b"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath32.div(uint32,uint32,string) (contracts/libraries/LibSafeMath32.sol#181-184) is never used and should be removed\n",
            "markdown": "[LibSafeMath32.div(uint32,uint32,string)](contracts/libraries/LibSafeMath32.sol#L181-L184) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath32.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 184
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d87e38e2d158a6865ad66dc76b6a5cb0f4c1efd79b8c9030d8bd009649158c34"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "InitBip0.diamondStorageOld() (contracts/beanstalk/init/InitBip0.sol#23-27) is never used and should be removed\n",
            "markdown": "[InitBip0.diamondStorageOld()](contracts/beanstalk/init/InitBip0.sol#L23-L27) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip0.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d9bdc3a29637b8845575f9a82c2ea3a0d003c580d36733668d25d5aa7ae4c736"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Decimal.greaterThan(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#207-209) is never used and should be removed\n",
            "markdown": "[Decimal.greaterThan(Decimal.D256,Decimal.D256)](contracts/libraries/Decimal.sol#L207-L209) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 207,
                  "endLine": 209
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ecc16f59b6c17e4dba0bfc6c25b1d4dbc7626d89977550177dd286335ed9126e"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "LibSafeMath32.mod(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#143-146) is never used and should be removed\n",
            "markdown": "[LibSafeMath32.mod(uint32,uint32)](contracts/libraries/LibSafeMath32.sol#L143-L146) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath32.sol"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 146
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f80c2a913d596eb6537df86d60a7211f0f276c11d1eb43d7ba1c823943722949"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/interfaces/ILegacySilo.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/interfaces/ILegacySilo.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ILegacySilo.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b94fef6e0b6d966c696311007fa752580f92a649dfef09fc4c184d2c300666f6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitSiloToken.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitSiloToken.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitSiloToken.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "50e928acbfbe7f457dca05b42582e687c9ad4e22f4b4084cbf1bfcc3f08116bd"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/MockContract.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/MockContract.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockContract.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c9c51b7ec79051162dd1e01b88b10420da523696eecb7962c8d15c3b8fc00b87"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/MockUpgradeInitDiamond.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/MockUpgradeInitDiamond.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockUpgradeInitDiamond.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3e63f38467c8db1004a54375d0f50bfa4ec8a9858464fe1a509e4dc6bc0ddab"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitEmpty.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitEmpty.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitEmpty.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dc186da32bdef71726594994ee67a845114e853750a7f86c4247494f3e28cadb"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/mocks/curve/Mock3Curve.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/mocks/curve/Mock3Curve.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/Mock3Curve.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "16ea9297a8c20f7278f2479aaa1c93cdeebdd75ab1ba233bf01e57f94086f71d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitSiloEvents.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitSiloEvents.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitSiloEvents.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cb92b05c105bb0d82b11aba57a07146115efa85c2f3ab5066486fc3bd49e9ee4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/mockFacets/MockUpgradeFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/mockFacets/MockUpgradeFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockUpgradeFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0b5418987f12be6ac7d449008f1df2c9871ce4f14dfbea6be0b44fae24676ebe"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "325a2e22a63f736548d5a8ab2bc7a1e236689b4b58e4c8e37764953d0a61b928"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b23ae0526dbcd3749245131818898a97d9243db328328ad115d287942f5682b5"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/interfaces/IBeanstalk.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/interfaces/IBeanstalk.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IBeanstalk.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "11cdf219b74794a14aee34abeb6b48fa617c5ced7beab9e33101ab55776c4a06"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.7.0 (node_modules/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.7.0](node_modules/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "124f4751ac3aacd969e429bda57de4a2dac9d4003788146b030b3a95bfc2d7fb"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.7.5 (contracts/interfaces/IQuoter.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.7.5](contracts/interfaces/IQuoter.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IQuoter.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1c88f809ded02b81dec81524381bb959b3554e772f852162b8633554f59e4f3f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2794cd320c74e9f4a1584e0e74217b97587f004ce7a415969ffdf07a8e856b2e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2cb61342468e669acccdb9ce1e29bcb0a067280a39b8b0fa459d80f83737dd64"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "43049ad8e8120b75e73132fdb6553314060208d35cf0976ca7cffd0fb5d08940"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/LiquidityMath.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/LiquidityMath.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/LiquidityMath.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4645b0d744dc9e7cb388621d71f4a96ab22e45f6f6245cb38e55e67b418ce34a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "52851ee2bbcefe3bd4c2f0022b6d34ddca09830cfa7e0e09482a01e14b3365e9"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5733abf71fffc3a281285f0a8d1f4c638bf072267a3666f9a17360282eb122ae"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "63a140c935db8797163f111f38c98b2128e273c328105929a088b3cc12e29776"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/interfaces/IDelegation.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/interfaces/IDelegation.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IDelegation.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6427b010950c90c4fd4fc682071e2d113f72fbf5a45de56c15c2351c7723511d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.4.0](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "79f6b7d8aaab422cd7f91f7e29dc71863e10eff78850455c39b4a4b04458eadf"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7eeb6a758336e89ddd76d8e1ccc5134aa1ab6bac1d627310dc4fc01d2cd88c62"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "979643deb2c0857af4bff97bd0042bb48be994216f523471187c672671cb0932"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ac6c9cf3a096913fcce22575bf449b975b1c6d2778944538fdca390758797775"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.7.5 (contracts/interfaces/ISwapRouter.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.7.5](contracts/interfaces/ISwapRouter.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ISwapRouter.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b6fdc8101b06d9a5682dbd2953590fa106ab4602cf934698173aa29636ef0163"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b9ed72bf467fa1f112ab01f96fe9be2b5d26c09838eea42f111dcca44b0d8088"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d83d2cb1159435b04a2d736f85bd913042a34bfe6b667b00e36fa70b9cb1154c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.4.0](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d9889926a079f0f392adf3be1739b03aa99c6b8882f64ec6ff917ee4d1ba5400"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3PoolDeployer.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3PoolDeployer.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3PoolDeployer.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e4f668c913e40974d6f581f311af789947ff374f1a13a435c6661d480910fbe1"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f5c6a9cba9066984e3d32901da92cea8d65f4e119697e423dcc6935eb9023d7a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f5e9d18c10f4c2d180703187b54f4b6f0c572b03b048af708c1c60de0024dada"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f6f2d86cb41583e55a368716dd00bb5a0861db423999ab9e41f12442811b133a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable-8/token/ERC20/IERC20Upgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable-8/token/ERC20/IERC20Upgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable-8/token/ERC20/IERC20Upgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f7adf2151466a74754125050f8daf6f6abb7efa1af2e0bce794baca3b088e962"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0 (node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.6.0](node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f9d40eb2350930cd6435091d47b86606a89c17bee92a0995cc16aab04e705dcd"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/tokens/Bean.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/tokens/Bean.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Bean.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "000c51db3e997a8f6f77c697ed010ce27c5ed63e41bcacdb4bce2975753f2a9c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts/utils/Address.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "029ca7851f1532101d0e076bcc567cf46d4216afdf19442b8d75cb43c3dce308"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "031dbe93cb9834678ca87a994695f26f9d2bab0e2d1ac0c60c45ca64b5fadc9d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Curve/LibBeanMetaCurve.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Curve/LibBeanMetaCurve.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibBeanMetaCurve.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "03c60da37ff7284b0637e73829b22fbe2ed82ae3b692158ff274de8f121a82bc"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/mocks/curve/MockCurveZap.sol#9) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/mocks/curve/MockCurveZap.sol#L9) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveZap.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "04f3b684b9106f3c1352e2cc5167dc22d9321592198c724af06e3f72c1cb843e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Convert/LibUnripeConvert.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Convert/LibUnripeConvert.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Convert/LibUnripeConvert.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "073598eb9153414e73ec42f1fd05b02f4173ec44a88c2d9d4c0afbb57ef9fd28"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/interfaces/IBlockBasefee.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/interfaces/IBlockBasefee.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IBlockBasefee.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0880e786aaf1ebf401798722a4064c0369497b955e0fa9d4e41faaa705d44b42"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/market/MarketplaceFacet/Order.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "09cb7f97768af50988f16a87aa2cc3f2f6cc7271a1a0b578af2cdf21289d3ca2"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/mocks/curve/MockMeta3Curve.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/mocks/curve/MockMeta3Curve.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0b96c7be3d158e14a3e997f050d25200dfa66622a4edeb22f8243c254becfd44"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/libraries/Token/LibEth.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/libraries/Token/LibEth.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibEth.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0bb3c89909edf739f6bc81dd19a6dafd0636ed2d05ffa2d2bca2129f4d441b20"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/Diamond.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/Diamond.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/Diamond.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ce7c4b185370abacce5953b34cffac9554b3acbe28fd7047f8e2ab7d34ad574"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip13.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip13.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip13.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0d6e19e82a7554a228c8e3026574e9f61954b890d15f150a680193f7087964e4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip12.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip12.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip12.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0da2b8e273e63a51dab05f7c9efa3d2580fd3aa36a6ba2d75b672328fad3a4a0"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip1.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip1.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip1.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e1eddeb89b102c912929439d82506436087ff0422d72aea533753953393f647"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e22378a5d73f6269fae5b43c289ce59fa4baacb4b84e450b4c29ff00f89fbdd"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/AppStorage.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/AppStorage.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/AppStorage.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e48c3b4120b79b91799c6f3eb15c8e22368c49a7a79dc71f3bc4499a563dba7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/silo/SiloFacet/TokenSilo.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/silo/SiloFacet/TokenSilo.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/SiloFacet/TokenSilo.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "12212b43cd53aaa3a1ce91476aa29361f851a084c3011ac87fa8da8eb678ebea"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/ecosystem/price/BeanstalkPrice.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/ecosystem/price/BeanstalkPrice.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ecosystem/price/BeanstalkPrice.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "136b17181b370d6a28a57c7ed510046eb5d8790ca5fd56c7f8dc70e42a8fe547"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/interfaces/IBean.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/interfaces/IBean.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IBean.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "145064ca94e68705a87689649c62b88b4bb8293a42071d0b65e60220462d7dc2"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/access/AccessControl.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/AccessControl.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "145c6df57a235373bae4ab3c8b9d55b244ea792a0928280f34a92cf20ec056ec"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Silo/LibLegacyTokenSilo.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Silo/LibLegacyTokenSilo.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibLegacyTokenSilo.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "157d189d7cbacfb54de6d066cb3ec0d48e177e259fc0d8d69c12576a412fac98"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/mockFacets/MockFundraiserFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/mockFacets/MockFundraiserFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockFundraiserFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1612788d4e4745761e15e66453363b49c555105485f6d949ea31c518b7e510f8"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/field/FieldFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/field/FieldFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/field/FieldFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "16d0ec82ca5c3f92e25d0731ea4b3478c0d7b7c13a6e3bfbba0a60e75ad5656f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/depot/Depot.sol#3) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/depot/Depot.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/depot/Depot.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "17fc6e6c976659c6005c0f42c914f5cf770db8b7f5dc331600d42d351960a22e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Decimal.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Decimal.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Decimal.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1c175d237ee3bdc28629b131f7e3ed5c1471d22b090604470f1469c40311cd5e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0<0.8.0 (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.5.0<0.8.0](node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1c665df8d5d1043fbb822772e9c7d03f6632fca30f995d4372247d659072d396"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (contracts/libraries/LibSafeMath128.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](contracts/libraries/LibSafeMath128.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath128.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1de1ee9ff23f9ce00492f3ec53f250c8941e5fc91146a1283614ee5393b33000"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/tokens/Fertilizer/Internalizer.sol#3) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/tokens/Fertilizer/Internalizer.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Internalizer.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1dfb8bdaa6e4973535e2bd822a8e7d5fd43c77d82734af52b4b0efc7666c852c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1e83b6a406a7220eb996f70042c042e992f0036c76189d57e34e54c349bf5d20"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/farm/TokenFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/farm/TokenFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/TokenFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1f3e07f9c17fa9c2466993ef2d90fea025a929e20fd636350da6b8828c04e9dc"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Silo/LibTokenSilo.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Silo/LibTokenSilo.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibTokenSilo.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2055341d916cd739d522ef25f5f7fb92ece5dbcbdccf53ef23d5096392decacb"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.4.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.4.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "22490295a56630c306ab8ef1fe9580cecce4c07f7be4455cc215920befbc9e5a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/interfaces/IFertilizer.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/interfaces/IFertilizer.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IFertilizer.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2659370b13160002c344c2e4fb879c37ce5433199eab3d86c5a1f910ee805e59"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (contracts/libraries/LibSafeMathSigned96.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](contracts/libraries/LibSafeMathSigned96.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMathSigned96.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "278e9805104603cb646f115fb7ccb1a4d0938896e4c488de95c0a36190881cdf"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/C.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/C.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/C.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "28cef2431f6d0c70ee37dd02c43973dce10a40c113a59a09d4a780124db6293d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/silo/ApprovalFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/silo/ApprovalFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/ApprovalFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2919021298bb4f43afc96644269241898c8e8480aa96298a5a0ac72428fbd84d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "295d1774d268dd631c30d22844f638de78e1492f30c547fea1587c621505d9f5"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip9.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip9.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip9.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "29640c03a74e5309ef3285dc7f5cb32d9a8116a9c952d2bcfa0e3ba461c3a8aa"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/MerkleProof.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/cryptography/MerkleProof.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/cryptography/MerkleProof.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "299803e66c028642ff979a0a446cfd2e691a617ad07df97932c7290a27caab16"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Silo/LibWhitelist.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Silo/LibWhitelist.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibWhitelist.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2a63e686210fc712248643bd66270e1f2ed29c147fc6f2ad015db9e78910036e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/mocks/curve/MockPlainCurve.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/mocks/curve/MockPlainCurve.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2bbed59cc992bafea395c0f351114d3120c251a24e01f05f2581e64333591fd9"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c53bc84a2f8d8db61fa8e89899b12825a846822354d5cdb57e83419314c954b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitOmnisciaAudit.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitOmnisciaAudit.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitOmnisciaAudit.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2fa5af6ce4e358c3e3764185fbb1484e19e43282a9d808acdbf469edc4d0d82c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/interfaces/IPipeline.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/interfaces/IPipeline.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IPipeline.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "31944f5e3be4b7e8613954098cec655bf4ff1d1f11ee3da93bca3e927b113b16"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/beanstalk/metadata/MetadataFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/beanstalk/metadata/MetadataFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/metadata/MetadataFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "31eb6ef73786a6eb0608a363d9d5b0ca333d17cc38f19f679de98f584dd3e560"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/LibPRBMath.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/LibPRBMath.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPRBMath.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "33f52e0c81eafb823138688db14790cbe812f3733fa8c3a677cde8f4304a5330"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/mocks/mockFacets/MockSeasonFacet.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/mocks/mockFacets/MockSeasonFacet.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "340279699ded47d97119cdec7d6002b27f330a990e90b76ee8b9579d566ddd75"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/LibDibbler.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/LibDibbler.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "34d800a527221f967e46c016942884157e22323806c7e131a3a381ff4cebd717"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.5.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3570f4115fb77b57629965f77ac79d523ccae634c0a20ef47a4c024a5dcf7570"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/mockFacets/MockMarketplaceFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/mockFacets/MockMarketplaceFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockMarketplaceFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "357bf832ba6065cde1eda56f186e9d3c88357e0b25e74ff505dd8df9fd5678ed"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "35efb375331a9c34d7f6def533a38a7196fb315c0107896e2836b1e309a97baf"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip14.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip14.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip14.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "35f7ee9162dc48dbb2c7d6a4c3beaa47fb40dca292f30e6631826cf0bcdacfbd"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip2.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip2.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip2.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "362b72feb7d164de50914c1b9f0fe6f442a7d54a842d4affb494a4c936474c99"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/MockERC721.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/MockERC721.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockERC721.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "380381791cc776beabc9fbb7881e0e2a7b0a1f7d8e36b6427d2a40c29bee230a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (contracts/interfaces/IERC1155Receiver.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](contracts/interfaces/IERC1155Receiver.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IERC1155Receiver.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3947cc4c1ff3fd738c395855264ba070f248347de8474943c3199c570fd1b1de"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/SiloFacet/SiloFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3a427f59c1b1983ff8bbcfc5bc25bc27bbb35472d89d2b502e2d3c2627962d76"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#6) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/silo/SiloFacet/SiloExit.sol#L6) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/SiloFacet/SiloExit.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3acda58cd75aca68d9f41f3d41762c936dbcec07613d5a93b8510d9601a3a23f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/SafeCast.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/utils/SafeCast.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/SafeCast.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3bfb3c390a5aea4e195cc70149b40e0b983be24d4c4261622604f2e5022521de"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/mockFacets/MockFertilizerFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/mockFacets/MockFertilizerFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockFertilizerFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3bfefe6e85caa5abd5a85d5501bb29d345cf99b4e38c4f1f77c78edff25bf46f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/interfaces/IBeanstalkTransfer.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/interfaces/IBeanstalkTransfer.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IBeanstalkTransfer.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3c24e0ca440a90fb67beb7b32c50ab24428649f994d558c3cb16b3c5828afc40"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/silo/ConvertFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/silo/ConvertFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/ConvertFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3c7b2ce3480ce9bc783dbb7bda5ef5276b2edbadaa23cb793b362b4dbe078273"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/tokens/UnripeBean.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/tokens/UnripeBean.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/UnripeBean.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3d09cc442878e93096048104d0edadbb3ddc632fb623250e56c63c30bf987f4e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3dba988893f30e9d7993f77dd1592a84d3ed0e32fd5fedbd546a023f8c307502"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/mocks/curve/MockCurveFactory.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/mocks/curve/MockCurveFactory.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3f196c5724ca09456aeebafd5677bcc97e9f02d42e5a36594f4afcd85d6c6836"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.5.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3f2e1dea0793314d6992edc014bd27cde9f2dc7ea9a43263cca722714c2fc5d5"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Oracle/LibCurveOracle.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Oracle/LibCurveOracle.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Oracle/LibCurveOracle.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4150e4135b4864f27017bff790aed58361c85c590ae935bf5a1f6bedcd08fb2e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/tokens/Fertilizer/FertilizerPreMint.sol#3) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/FertilizerPreMint.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "418e472bbc180527afa783367b222cfe09059b2e80e241b9f7eae12d8a052d0d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/mocks/mockFacets/MockUnripeFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/mocks/mockFacets/MockUnripeFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockUnripeFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "41c97979470b05bebe23e21a5801be57a547cc8511bf15d5bf75fa8a3935aad1"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.5.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "426f05694943bf9a96087e87c60a72e513ab22bd33cdc5e76126a8cd171d8f1d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/interfaces/IDiamondLoupe.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/interfaces/IDiamondLoupe.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IDiamondLoupe.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "42aeb8a756e0b3adc03638d985c60286faf2ba37b8b9a112610cdf7b3b83d39c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/LibPolynomial.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/LibPolynomial.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibPolynomial.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "42d6fcff270f938c06c1da3bcb815cf130b54b24e9cd694872f7a3407e9f3592"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/pipeline/Pipeline.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/pipeline/Pipeline.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/pipeline/Pipeline.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "43311b101caa6b955b6f4879bd6c75c847307ae1e07711a701f5f984a0ba970a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4862c2dc54b1c319640d16b96e748a6666a4b365e1313f877035386c8ef0072c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/interfaces/IProxyAdmin.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/interfaces/IProxyAdmin.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IProxyAdmin.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4ac2c4668c7da2fb55548135e21cdc3cfcff13efba53ffc44c69b54d62111643"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitHotFix2.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitHotFix2.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitHotFix2.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4ad1515225682dcfedaad1681be3049fce66cd608b9ade4bd7cb82576aada049"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4bfd5c08fca613e26875475815427cf8f89b43363127032ed47819c66e8048ac"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/diamond/DiamondCutFacet.sol#6) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/diamond/DiamondCutFacet.sol#L6) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/DiamondCutFacet.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4c2458e4877a3e57693abb112c9da765fe1c1e6b1b20bf4e32cce15f54ffd56b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/mockFacets/MockAdminFacet.sol#4) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/mockFacets/MockAdminFacet.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockAdminFacet.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4f37542eda0eba549cdd97e856e01c4054c0117b9b04fe036855fc1bde66a6db"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/ecosystem/price/CurvePrice.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/ecosystem/price/CurvePrice.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ecosystem/price/CurvePrice.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5283f8321a2a0b140c514a7ba37e74fd15aef2a1a7c763de271bff571e461b71"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/LibFunction.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/LibFunction.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibFunction.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "529670d675df1e4e88fc9c7b51258fff0b8dde22c68b2725eee29a600c22a310"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "530927e19b0e33e061abf30ed09a420758bf10abd14f18b0a4384779ef987aa5"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "53464f091a404863d890a82b0661ee5ee295918519c8bb0ad6ff6b50e3cc87a4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip24.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip24.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip24.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "54e027f29f29eb222665cbf47a69767fd054b9e33da24bde22736cf479aac325"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/ecosystem/price/P.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/ecosystem/price/P.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ecosystem/price/P.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "571f3f072abf5ac74516cc169f5a31c433c05f7c1a03c4129cdc8d112b9bbd93"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version0.7.6 (contracts/beanstalk/barn/UnripeFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[0.7.6](contracts/beanstalk/barn/UnripeFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/barn/UnripeFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "59c3b99da499935b9287c3584e980bd90feaf945646c50288a1aabb0067d70b6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/LibFertilizer.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/LibFertilizer.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibFertilizer.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5cc6344bee1ed3542f52bceef766ca18a5e520f21369eb6b3a33dc1b9408f84c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d1b144579c58345378275a1b7baae81c5794baab75345666580ffb5c41d23b4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Silo/LibUnripeSilo.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Silo/LibUnripeSilo.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibUnripeSilo.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5e76a7c2341c6853a27a23ede048105ead995be18abf248b413c1a13c6da6e1e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "601c8b58845f7a59608a9ed25fb605491b0ad0aa7fb6bf00dcd82ea202d0995b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6030bb2c29fb95de2e789b797120206e303d21dba4086b98973892bf95800e0f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6066ac611e9b7712bb39da02a7ba1887dc5406dfe74aee2c9a2b191e43ac32de"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/silo/MigrationFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/silo/MigrationFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/MigrationFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "606e5ad3166e617d227652b299d430ea15a5e95bdb0e3ad9d63da373e4229abd"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "60daae3ebaf6f822adbd696fb60b645be0c4e5a397fd87a9675eaaf3ded62bf1"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/introspection/IERC165.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/introspection/IERC165.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/introspection/IERC165.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6102a0467467616d7ed89d1c8b7f698a63baa12ed24eda491ee1ebb1fa320ae0"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/MockDiamond.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/MockDiamond.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockDiamond.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "61487224e57a771f03be04ab0a3e00f0efca0c8017812a124474f9bc730157fd"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/sun/SeasonFacet/Oracle.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/sun/SeasonFacet/Oracle.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Oracle.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "61f6569fcd49cff0b4238044ff8afd234fe2dbb652ea1b76ca049d4e428b2c2c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "62a115fc75fc3ba72d304fabe2f79ef60236268731976fd4da95fad735c16c54"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/utils/Counters.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Counters.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "648bea94797fccc25c43964243e7dbe7fd5636b075ad5f49888c10a2eabb7030"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/interfaces/IERC4494.sol#3) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/interfaces/IERC4494.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IERC4494.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "67f112ccc8279c2666ded6e71c0d7d9a42bc72aca3b3b28e19a0a346649a9c56"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/tokens/Fertilizer/Fertilizer.sol#3) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/tokens/Fertilizer/Fertilizer.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6888aaf9bf3fbd5aa7a3ac9b6e9149849ad2a0c4524fecb446849099e397ef7a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/mockFacets/MockSiloFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/mockFacets/MockSiloFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "691092cc63104969ea5c518a65edbaf23fffcd7ed8a7ffc69c3a860965ceb72e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip22.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip22.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip22.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "696768ca47d53d9e30f0ea734b581bdd400d01e71f1b39cc8f68b72458faf043"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitDiamond.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitDiamond.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitDiamond.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "697f86cf6a6a9b73fa8e60aa91b7d07773a430f1b5d935e41ddac8e1183821d7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip11.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip11.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip11.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6c70f8ec0555aad930334b44d68e4e7a127c30af8f0f19fb588e3e36b3030231"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/tokens/ERC20/ERC20Permit.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/tokens/ERC20/ERC20Permit.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/ERC20/ERC20Permit.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6ca0591e5f4b283cfd3be0fc078dee954e52ae8b06285eba271875a5298b3cf0"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/EnumerableMap.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/utils/EnumerableMap.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/EnumerableMap.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6cc563b94037c8cebb47bd4630a1bb57d3b5419b91a5ec89bfdf854cd4ff59bf"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/MockFertilizer.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/MockFertilizer.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockFertilizer.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6e81ac0daed66b475a2553770f58184f60f50246c1908b2c862c348b72172c68"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6f28af15c8911896ea1a5a4c1aa9011e0f0e3fb7b2e19b1a52795b6ef843780c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/uniswap/MockUniswapV3Deployer.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/uniswap/MockUniswapV3Deployer.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Deployer.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7171736746e193d5a051d7a84b2cb8b8e639138a8823707764055764be3aee01"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitHotFix5.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitHotFix5.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitHotFix5.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "739c6a79f06e4ffef60e76fb2b9f69c662aa8cd6bc3139c253f6abdbae65012a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBipNewSilo.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBipNewSilo.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBipNewSilo.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "74e41d127483177ec33113e999d9fdd914b55804c577f1b9b342d8535e9d4e3c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#6) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/diamond/DiamondLoupeFacet.sol#L6) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/DiamondLoupeFacet.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "758bfa37ad2d171702415b3db287e8600659df10dd9a3888e0b11d9493a35bb7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Token/LibApprove.sol#6) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Token/LibApprove.sol#L6) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibApprove.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7638b77cb3e7b6463e823189f6e9e1322396dbfdde83eac5bcbb1178a831ae6d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Convert/LibConvertData.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Convert/LibConvertData.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Convert/LibConvertData.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "770022a1bc4a1d49c056e1a9ae6a012a9c1f1e97b618227119e844e0c3a09cc6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "77fd363389f6ef3a60d2d3b98e929ead39cb6e0f9d64095b8db13ba08c971cea"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "794e3eab28ddadded2c82d553cbb4b88d8db3e0b2919fce7601a1dcdb078c387"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Token/LibWeth.sol#6) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Token/LibWeth.sol#L6) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibWeth.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7adf2369c84444a6d080f3c58efdae9710f20ede1e173cfd6eb9ced81ef94128"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7b30b9e39fcf70da30874df8224af4945944843c995c87f84def041aa105fe7e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7b51d96cb68547398717da88eea96a59ada2803e442e8eafdcc7880140ce35c6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Silo/LibSilo.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Silo/LibSilo.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibSilo.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7c1ef5194493b6b2630192d3cda3f8cc0d4a87255d46553d0f405d7105658ac8"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/uniswap/MockUniswapV3Factory.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/uniswap/MockUniswapV3Factory.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Factory.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7df3120a729ddb5c59c530d1a1f6cc53e12cb3f5777e2972f95d295b1e878170"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/sun/SeasonFacet/Weather.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Weather.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7e11b33e975af764077ebf724c5a753c5bdbd2414a16433b20490f7bc8f00317"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/access/Ownable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/Ownable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "80f40f14d81360881018f5d038d970ce5f1a04d6b4b898389b1ef2a3027a9b23"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (contracts/libraries/LibSafeMathSigned128.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](contracts/libraries/LibSafeMathSigned128.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMathSigned128.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8103fc4dbed2286d8d7d071275f6fdb296a3cff9cac3985c5eeba7c5f9751bb3"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/MockWETH.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/MockWETH.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockWETH.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "81a62f720d42aa6f4df712715e8cce41f09f0e601287de644aaaf23fdedd9b6a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Token/LibTransfer.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Token/LibTransfer.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibTransfer.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "82208c8cfcfbc265ff6bf44b3455f08c03204d65a198ec3e6de0a25a92c658f3"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/LibDiamond.sol#6) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/LibDiamond.sol#L6) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "836a205cc3f84281699fe5ccfc61938359c85570ceed766d5cc650fed34225b8"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitHotFix3.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitHotFix3.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitHotFix3.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "84aebb84ce0e5950d7c179be656180a607ef6254815fbe8b4281a02eb308e7a4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8554366d2b6481762ffd079a3cb3f33839d4dbd4ea18e6b9c55279b24c1a7b0b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/beanstalk/silo/WhitelistFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/beanstalk/silo/WhitelistFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/WhitelistFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "862cf6989c9ec44d936f48fecc5d97baa112fe5d7b8103a1c16338597285aef2"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/interfaces/ICurve.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/interfaces/ICurve.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "88040d1382275e57008244216272badd621087806755ae911e2301692c528eee"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/introspection/ERC165.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/introspection/ERC165.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/introspection/ERC165.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "89d74d8f02eb39cc94ed9f6865e78cd24bc428865b634123f4063bf3deba7cbc"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8af0ee2e269a7872984e348b82478e6f5df3bea7c849f23674088d74427ae115"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Convert/LibConvert.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Convert/LibConvert.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Convert/LibConvert.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8d00d471b93fe8073393e8ed145c100a53e81bbc5f78eef687c179b0d8c04f02"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Convert/LibMetaCurveConvert.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Convert/LibMetaCurveConvert.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Convert/LibMetaCurveConvert.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8da4ba6c7a369ca8a39a31bf40e07cbc8cdfc83aa9957196ff4056b4b507e677"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip0.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip0.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip0.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "90616311fcd34df3799304ab38f498fe7c7649bdd30712419d9cac5329d5bd98"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Convert/LibCurveConvert.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Convert/LibCurveConvert.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Convert/LibCurveConvert.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "923cee16f62d96c98e234f606e3501578f9e42fcb63d1988fca1418bf707bcdd"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/interfaces/IDiamondCut.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/interfaces/IDiamondCut.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IDiamondCut.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "93651a9d8968a4e0f9135b677b78591fc2e74454b53d636a655bb432716a1b58"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "94c437946e5af294dfb608c514fd8383b0e57aa4e2f794638cce3acc3841bf27"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/mockFacets/MockFieldFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/mockFacets/MockFieldFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockFieldFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "94e9b7fb125c283d506416bef56ce8863fbb2712b3cdb9f69f6393aa3f914012"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SwapMath.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/libraries/SwapMath.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SwapMath.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9949703f03e8f2d73ebba1122049937a10bb5e521f35ae4d6aa49a876872cbc4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/MockInitDiamond.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/MockInitDiamond.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockInitDiamond.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "99b0a42a1421418d11933babe6c58eddaf892a95074785614d1992b63d1bde05"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip23.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip23.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip23.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "99e3ceeb26be270bafcd5e6841ea5ebab0cb057ebbedc265bcd8e7dcb36d85c9"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/diamond/OwnershipFacet.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/diamond/OwnershipFacet.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/OwnershipFacet.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9bf62fae1dcf456e2aa6ab7aebfa8be9739530fe23d5b3b7c90869688ebb8b52"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (contracts/libraries/LibStrings.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](contracts/libraries/LibStrings.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibStrings.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c5b9ce0fe23d752d3686c8982388e971d4ae473545d7209360a84a9a912b941"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Silo/LibSiloPermit.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Silo/LibSiloPermit.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibSiloPermit.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9fa118685474d5ae190a94da448735cde4a8ce720ac32face4785f8d77dc3086"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9fc6e192db4ded939976826c2344d21825ba511bce07760229a8bed875ae250d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.5.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Position.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a5a1eaa7741aaeb757431536ebec1ac9d37a0235b7bc759c5ebe4b9cd2cb7ae7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/ReentrancyGuard.sol#4) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/ReentrancyGuard.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/ReentrancyGuard.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a6fcf6c6eef78693e441b4bc4c7685173193b290f905d07837efe1b249b373da"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.4.24<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#4) is too complex\n",
            "markdown": "Pragma version[>=0.4.24<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#L4) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a81342f7194da6d569311cbe049e0bce6854c1184da4f24f6d1efae3c1ece259"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (contracts/libraries/LibSafeMath32.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](contracts/libraries/LibSafeMath32.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibSafeMath32.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aa5f7db970987ee6666fbf31e6fcd4d9425a63b52ca7b355d48f233c24eee89b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/silo/BDVFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/silo/BDVFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/BDVFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ab23426636fa4c92a88d7a171ec8bbcc118114fa41cd356cd53f754c4022e983"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/farm/CurveFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/farm/CurveFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "abe34a10ac76d8b29f5230db0c88bbb0ce11ddf6b42441b283e596e313320fe3"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/MockToken.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/MockToken.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockToken.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ade1a93b3c31c2015bf10af29ef8bf4e145b10cf0ceafb7a0c338b8f5e83b0ea"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "af19d628bdb7f1badb28b1c65e6b9c3cfedad29157e23e232e36ca30e86c55a8"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitWhitelist.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitWhitelist.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitWhitelist.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "affc4c6920108e3ef8b64a7fcdb9474bad1de247e3f5d9afb805bf2029a8ef77"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#3) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/beanstalk/sun/SeasonFacet/Sun.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Sun.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b0b96f7fe2f0a1167256802f193fcc762a21f6b9f4001904c67557c2e3b55dec"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b4970602f1356b73fc5094f9786b2d045dd2ff84c52e65ab9c7526f9546dd859"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/LibBytes.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/LibBytes.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b946f3ef423a759f42091672021c4d8d692ece9ee7b34fd61dbe7b3c4abfa415"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/interfaces/IERC165.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/interfaces/IERC165.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IERC165.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ba245b343f1c17887d6c6e74476d95d298aab464934aa7c80ed8f2b3b1515853"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "be1cd25caaebedb33a612b8841d19d67ada3e27546f93d9895202b0858c99216"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/beanstalk/diamond/PauseFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/beanstalk/diamond/PauseFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/PauseFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bf3014db88356d1ad5d909042a4ed6a9730bf62cf67f28240fa98f151c79ea02"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/field/FundraiserFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/field/FundraiserFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/field/FundraiserFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c001b775460fba4b88016384f7d21a6c5f454dfeb178a5098f20a260f39b11ff"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/LibAppStorage.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/LibAppStorage.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibAppStorage.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c2b6ac998edfc703554accb417ca9ca855bca5144a540b6993c4780487bca1e8"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitReplant.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitReplant.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitReplant.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c2efa9be53ee09b754fc3be6dff07f70f905288679590fd037225d7b54f28938"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3de46d42ae37eab68e58f687c3d4d023a57d1b68fea100bfa860bf1d3605ee1"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/farm/TokenSupportFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/farm/TokenSupportFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/TokenSupportFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c41cf36bb80cf2714b08a9360d98648e09065f43d94a62030a4b28502506911a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/beanstalk/farm/DepotFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/beanstalk/farm/DepotFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/DepotFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c66426aaad0bb5941fc346375a35415e2230b236497748c7f942645ddfd3e751"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/interfaces/IWETH.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/interfaces/IWETH.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IWETH.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c87922c84988a0218073d81d87ed609a5b7cdc63f7f26c9e2c0b7f8b30a8c14e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cb0dc14ed5d6947fbe86d782620a7ddf1dc62613751c15f3809136fbc8e54da6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/libraries/Token/LibBalance.sol#3) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/libraries/Token/LibBalance.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibBalance.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cbc61a08c4c0315d9c0c6819dc962c062d76b8ae4933809779fdfe363cb11c75"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Curve/LibCurve.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Curve/LibCurve.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cc98a854cbe0426df04f2e53b569bf0be320e7e63fa7b0231ddd04b5fc9311b1"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/tokens/UnripeBean3Crv.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/tokens/UnripeBean3Crv.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/UnripeBean3Crv.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ccdd9315a5fbf53cc27be4916a8e1bcd956a5c30893869a9723a515579d68e3d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/utils/Context.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Context.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cfab8b655853edfaeae985f5897e87e4f9bf946c6156e036e5f1ea2c78c55dee"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version0.7.6 (contracts/tokens/ERC20/BeanstalkERC20.sol#3) allows old versions\n",
            "markdown": "Pragma version[0.7.6](contracts/tokens/ERC20/BeanstalkERC20.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/ERC20/BeanstalkERC20.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d02ad305944db46f5b3587bf5d21f778341ca6af5ed7338b2b898780daf42f92"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip16.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip16.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip16.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d1a55b331fcd881d53e1b91eff83679250d3b0fa7f1245c3eb810dacd556b371"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/MockBlockBasefee.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/MockBlockBasefee.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockBlockBasefee.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d35ae5f13ba250fe0aa741e2762eff22b4415aa16b91fd5f49cc8a963dcafcb9"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip5.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip5.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip5.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d44f6482d44ab2519c73abb39366136147641a8e3e57e8c8b378365aa909cb1f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d76742980f65440365a07cf2285ad22f4d23dec9e656d78713ef29c701891155"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d9fc1c6e145737a6eedced42616b247b9241d93099e9d24bc7f3807daac433e8"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "daddd098a50de1a792055dd1940446e5089d4245153adeb8abaff6bbaae8e9a7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitHotFix4.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitHotFix4.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitHotFix4.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "db5d9db6576b12d7755e4b0b7f5512e73a711209e2be11c25ec7b352b9519ff0"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBipSunriseImprovements.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBipSunriseImprovements.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBipSunriseImprovements.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e010be496379a38cb00ba54502d6bceffdf0f5296ddbd329702821378d3d5baa"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e0eb442669108aa8c0556336be2911292de415e458d564f9324c0a3bdfc6513b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip8.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip8.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip8.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e40a7b198a4a15a1350e6aae2a33dd96dfa720c3d41e7b0ca9cc547102d8ab66"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitBip7.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitBip7.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip7.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e4254c12a78d571e280bf3cafa98a65251ab6f6e5f28a98b73f98775b6d84bd2"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/silo/SiloFacet/Silo.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/silo/SiloFacet/Silo.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/SiloFacet/Silo.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e6343eafbbef8b8a93b152a00a8da523904aae48b6337e95c78a5c6077791631"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/LibUnripe.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/LibUnripe.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibUnripe.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e86673873e7e115642c82d5d9671936f5782a4438a6aee5b89a0fb10a875285b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Token/LibTokenPermit.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Token/LibTokenPermit.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibTokenPermit.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e8d5621c447b55f1868ada8c008fadd0d5c0c9f078cd6bdc397efc98c6545195"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/Math.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/math/Math.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/math/Math.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e8e4a91eef9b1c073be8c60e11706ecca76b94164939cfabe5fcbc3ebd00fe5f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e8f1484b0e091a289fca8bd35ff8ff9ac9ee38e522ec82134d83e46a5e47d974"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/AppStorageOld.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/AppStorageOld.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/AppStorageOld.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ea9820989935e81271392c2753188c4f1aed8de5b7910368d69cc9e100d52a94"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/beanstalk/farm/FarmFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/beanstalk/farm/FarmFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/FarmFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eabcaa28c5a7142567292ba87bbbc0f5b006c88491735b6e4e4781f1b72356d3"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/beanstalk/barn/FertilizerFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/beanstalk/barn/FertilizerFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/barn/FertilizerFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ec6fbf8775e62e41d7c801947460e971f0ed29bea489c6312c64f0c3454d5cc6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Curve/LibMetaCurve.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Curve/LibMetaCurve.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibMetaCurve.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ecc3fd46d80c9e197dfa5e1b5889ad7100140ade74690c570eefa163ed8aab1b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/MockSiloToken.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/MockSiloToken.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockSiloToken.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ece730fe21bfd0c8aedc40c645b1b14f96970f63a040cb99853712801c2c8f7e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Listing.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ed7a01350972c67b7f80fc7c30b26989a59513302674063b1890e42bfc077f5a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/uniswap/NoDelegateCall.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/uniswap/NoDelegateCall.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/NoDelegateCall.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef0b14365f2a30206fdfa634c00429ff136ef81f450fb2035279d9076b8c6bfb"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/tokens/Fertilizer/Fertilizer1155.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/tokens/Fertilizer/Fertilizer1155.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer1155.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef4a15ce83389669c9a5ee78d4236f3413c72a5ded4fffb965d892f00b3cfb53"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Convert/LibLambdaConvert.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Convert/LibLambdaConvert.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Convert/LibLambdaConvert.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f15b2b2f5236b6e23bb22779560efeddabba91760a33a0b3fd6c526c421f4f25"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitEBip6.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitEBip6.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitEBip6.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f26b2f05813fc07b495f0c4355eb0c98384209bc6200bb12ad4cbf5d6b094299"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/interfaces/IUSDC.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/interfaces/IUSDC.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f3e7004022b9464ab08ab167de7245be105ab12cf6637f821ebdc5e6eee85804"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f64de14266d3aa756594c371c42e2818f27903f1504bef9c19ebff4dddceef88"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/LibBytes64.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/LibBytes64.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes64.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f69b583332de6b1c880b0513addd7f6774e13e20bda5f1e7dd55ca20b8dbe030"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.7.6 (contracts/mocks/mockFacets/MockConvertFacet.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.7.6](contracts/mocks/mockFacets/MockConvertFacet.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockConvertFacet.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f6cd28c36c426306e873b50ad2350855b5912c1868e237807da781425c473ec7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/drafts/EIP712.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/drafts/EIP712.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f70521f92ef92173b79966009115c54645e574176df243b65183d0befccbc9cb"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/math/SafeMath.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/math/SafeMath.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f7cc80bcd0d613077556a6cc458fc1f20915a5768682b07b2aa171543f2a7be3"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/mocks/MockERC1155.sol#2) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/mocks/MockERC1155.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockERC1155.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f825bccccc4f758b8d8fa2e1f29223d498cd2f0e9093275be86b35627e863128"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitMint.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitMint.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitMint.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f94abc256599a4e31b66ea4e8f974037fb7e8b042a3c581e634d091dacc17418"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/beanstalk/init/InitFundraiser.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/beanstalk/init/InitFundraiser.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitFundraiser.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f9dbb4f342b39cac923b44f5fa99e97f1ef06f753588a337f773f17a1b4abc6e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Silo/LibLegacyWhitelist.sol#5) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Silo/LibLegacyWhitelist.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibLegacyWhitelist.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fa4f61b4ace60cf5de8ce49f2b9a7f5dd6fc9c51804e7e3f7547837f5d75d081"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.2<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fb0f8dbfb5070ebb67a6006d89b2bc99df72ff09b8e54c09ef0311fba095d7c6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721Holder.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/token/ERC721/ERC721Holder.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/ERC721Holder.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fc607b9c8a109eed938243d3e6432b5a50352146da279b4fdfe52bcc73f87da7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts/utils/Strings.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Strings.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fc87e5e94c2f152a4b56b973f72fe2d01528e7cd6465b252e7a832700a8e9c25"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/Token/LibTokenApprove.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/Token/LibTokenApprove.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibTokenApprove.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ffe64d2314bb54f09c120aaeb0d5d9c79c173dffed0a0459e02941475109aaa4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version=0.7.6 (contracts/libraries/LibIncentive.sol#3) allows old versions\n",
            "markdown": "Pragma version[=0.7.6](contracts/libraries/LibIncentive.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibIncentive.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ffeef43a000a300087afc38323fef142a84a616502bf29d655b16e2765211983"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in TransferHelper.safeTransfer(address,address,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#14-22):\n\t- (success,data) = token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector,to,value)) (node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#19-20)\n",
            "markdown": "Low level call in [TransferHelper.safeTransfer(address,address,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#L14-L22):\n\t- [(success,data) = token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector,to,value))](node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#L19-L20)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "90d6a300306fa6ca66aae724e40182e717c99998843c7992ca49ad708b8b2566"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#163-169):\n\t- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#167)\n",
            "markdown": "Low level call in [Address.functionDelegateCall(address,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L163-L169):\n\t- [(success,returndata) = target.delegatecall(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L167)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 169
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "02679ee7fe88564867d9c9b6dd30bdd8c0af99e771143cdc2f71b74c3197a615"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in MockUniswapV3Pool.balance0() (contracts/mocks/uniswap/MockUniswapV3Pool.sol#148-153):\n\t- (success,data) = token0.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector,address(this))) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#149-150)\n",
            "markdown": "Low level call in [MockUniswapV3Pool.balance0()](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L148-L153):\n\t- [(success,data) = token0.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector,address(this)))](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L149-L150)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 148,
                  "endLine": 153
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e93f773012e7a7b05b814d9dfea3ec29d45c765f1bd873767d3af2b85ae9692"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in FarmFacet._farm(bytes) (contracts/beanstalk/farm/FarmFacet.sol#81-87):\n\t- (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#85)\n",
            "markdown": "Low level call in [FarmFacet._farm(bytes)](contracts/beanstalk/farm/FarmFacet.sol#L81-L87):\n\t- [(success,result) = facet.delegatecall(data)](contracts/beanstalk/farm/FarmFacet.sol#L85)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/FarmFacet.sol"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "151763a185e77ccb213c19f33e3613d876cfb570b8e5599e40daabc3736970a9"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in LibEth.refundEth() (contracts/libraries/Token/LibEth.sol#16-26):\n\t- (success) = msg.sender.call{value: address(this).balance}(new bytes(0)) (contracts/libraries/Token/LibEth.sol#21-23)\n",
            "markdown": "Low level call in [LibEth.refundEth()](contracts/libraries/Token/LibEth.sol#L16-L26):\n\t- [(success) = msg.sender.call{value: address(this).balance}(new bytes(0))](contracts/libraries/Token/LibEth.sol#L21-L23)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibEth.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 26
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "210d7da49c32a457997869dc4cf706d1107d4eea95fb379f11d698fe89c34dc2"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in MockSiloFacet.beanDenominatedValueLegacy(address,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#280-307):\n\t- (success,data) = address(this).staticcall(callData) (contracts/mocks/mockFacets/MockSiloFacet.sol#293-295)\n",
            "markdown": "Low level call in [MockSiloFacet.beanDenominatedValueLegacy(address,uint256)](contracts/mocks/mockFacets/MockSiloFacet.sol#L280-L307):\n\t- [(success,data) = address(this).staticcall(callData)](contracts/mocks/mockFacets/MockSiloFacet.sol#L293-L295)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 307
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "23a4ebc4c58899197f2f8b068ee2067a432b88d8a69c82d7147f702523f15e0e"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in LibWhitelist.whitelistToken(address,bytes4,uint32,uint32) (contracts/libraries/Silo/LibWhitelist.sol#60-82):\n\t- (success) = address(this).staticcall(data) (contracts/libraries/Silo/LibWhitelist.sol#70)\n",
            "markdown": "Low level call in [LibWhitelist.whitelistToken(address,bytes4,uint32,uint32)](contracts/libraries/Silo/LibWhitelist.sol#L60-L82):\n\t- [(success) = address(this).staticcall(data)](contracts/libraries/Silo/LibWhitelist.sol#L70)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibWhitelist.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 82
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "28adfaeb2ccfd5a9c56e9c71657a75bfedcdf82267f3c3e47d4339fb8bd4e1c1"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in LibWeth.unwrap(uint256,LibTransfer.From) (contracts/libraries/Token/LibWeth.sol#24-29):\n\t- (success) = msg.sender.call{value: amount}(new bytes(0)) (contracts/libraries/Token/LibWeth.sol#27)\n",
            "markdown": "Low level call in [LibWeth.unwrap(uint256,LibTransfer.From)](contracts/libraries/Token/LibWeth.sol#L24-L29):\n\t- [(success) = msg.sender.call{value: amount}(new bytes(0))](contracts/libraries/Token/LibWeth.sol#L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Token/LibWeth.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "30a633bb5725b5320063801b42df2b87554a1a00dfc47885984f08278450ecdb"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in LibDiamond.initializeDiamondCut(address,bytes) (contracts/libraries/LibDiamond.sol#214-232):\n\t- (success,error) = _init.delegatecall(_calldata) (contracts/libraries/LibDiamond.sol#222)\n",
            "markdown": "Low level call in [LibDiamond.initializeDiamondCut(address,bytes)](contracts/libraries/LibDiamond.sol#L214-L232):\n\t- [(success,error) = _init.delegatecall(_calldata)](contracts/libraries/LibDiamond.sol#L222)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 214,
                  "endLine": 232
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3bc521820db24fc4fd0cea905526aa20b7897ac5780461662b5e848e5c8f340e"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#139-145):\n\t- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#143)\n",
            "markdown": "Low level call in [Address.functionStaticCall(address,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L139-L145):\n\t- [(success,returndata) = target.staticcall(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L143)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 145
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4809ee80731afcf78066fe775a05079f1bfa965236f22722f2d073274a707b6f"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in LibTokenSilo.beanDenominatedValue(address,uint256) (contracts/libraries/Silo/LibTokenSilo.sol#279-306):\n\t- (success,data) = address(this).staticcall(callData) (contracts/libraries/Silo/LibTokenSilo.sol#292-294)\n",
            "markdown": "Low level call in [LibTokenSilo.beanDenominatedValue(address,uint256)](contracts/libraries/Silo/LibTokenSilo.sol#L279-L306):\n\t- [(success,data) = address(this).staticcall(callData)](contracts/libraries/Silo/LibTokenSilo.sol#L292-L294)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibTokenSilo.sol"
                },
                "region": {
                  "startLine": 279,
                  "endLine": 306
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "59a51be80473bb3ff069a14808d0fa6f17415ea6c761e6b72ed5c66d259c7412"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Pipeline._pipeMem(address,bytes,uint256) (contracts/pipeline/Pipeline.sol#80-88):\n\t- (success,result) = target.call{value: value}(data) (contracts/pipeline/Pipeline.sol#86)\n",
            "markdown": "Low level call in [Pipeline._pipeMem(address,bytes,uint256)](contracts/pipeline/Pipeline.sol#L80-L88):\n\t- [(success,result) = target.call{value: value}(data)](contracts/pipeline/Pipeline.sol#L86)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/pipeline/Pipeline.sol"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 88
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5f7b34e77129ffdad3169103c79b67ff462a2501f2931aa061d1f8cf9cb4c3e5"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Depot.farm(bytes[]) (contracts/depot/Depot.sol#43-54):\n\t- (success,result) = address(this).delegatecall(data[i]) (contracts/depot/Depot.sol#50)\n",
            "markdown": "Low level call in [Depot.farm(bytes[])](contracts/depot/Depot.sol#L43-L54):\n\t- [(success,result) = address(this).delegatecall(data[i])](contracts/depot/Depot.sol#L50)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/depot/Depot.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "61daef6e3535d6d9722147d4bcbdd38f0703d5d7e0b1fbdc3e7a543f40e1042f"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in FarmFacet._farmMem(bytes) (contracts/beanstalk/farm/FarmFacet.sol#90-96):\n\t- (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#94)\n",
            "markdown": "Low level call in [FarmFacet._farmMem(bytes)](contracts/beanstalk/farm/FarmFacet.sol#L90-L96):\n\t- [(success,result) = facet.delegatecall(data)](contracts/beanstalk/farm/FarmFacet.sol#L94)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/FarmFacet.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6674fafbdb92e5e64a4c1257b8ccf5b360356c846b75531742e6aa7385eb4e54"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in MockUniswapV3Pool.balance1() (contracts/mocks/uniswap/MockUniswapV3Pool.sol#158-163):\n\t- (success,data) = token1.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector,address(this))) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#159-160)\n",
            "markdown": "Low level call in [MockUniswapV3Pool.balance1()](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L158-L163):\n\t- [(success,data) = token1.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector,address(this)))](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L159-L160)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 163
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "708862099778941de92dc9e0757c7f57eb55b387f73e996490f9685a15bfaa06"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in AddressUpgradeable.sendValue(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#53-59):\n\t- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#57)\n",
            "markdown": "Low level call in [AddressUpgradeable.sendValue(address,uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L53-L59):\n\t- [(success) = recipient.call{value: amount}()](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L57)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7d6574bb0ac08c0dd93b56081a8186727824531bac6e75235c2c8952fedb324a"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Pipeline._pipe(address,bytes,uint256) (contracts/pipeline/Pipeline.sol#69-77):\n\t- (success,result) = target.call{value: value}(data) (contracts/pipeline/Pipeline.sol#75)\n",
            "markdown": "Low level call in [Pipeline._pipe(address,bytes,uint256)](contracts/pipeline/Pipeline.sol#L69-L77):\n\t- [(success,result) = target.call{value: value}(data)](contracts/pipeline/Pipeline.sol#L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/pipeline/Pipeline.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "99aa57d22ee0d2b07676187619635618ac0d7669fcf75bed652220572c7d79b5"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#139-145):\n\t- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#143)\n",
            "markdown": "Low level call in [AddressUpgradeable.functionStaticCall(address,bytes,string)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L139-L145):\n\t- [(success,returndata) = target.staticcall(data)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L143)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 145
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9b54854d49901dcce2fc55c99d70c54c69b0f4fb152f2f01e9f6919b808a1ec3"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#114-121):\n\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#119)\n",
            "markdown": "Low level call in [AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L114-L121):\n\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L119)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 121
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a8fbb0143a63a2d3157aff04ab703429d6ab76c25a9d1ca7eda252a38a5c0ef9"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-121):\n\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n",
            "markdown": "Low level call in [Address.functionCallWithValue(address,bytes,uint256,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L114-L121):\n\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L119)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 121
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4e6db48120543f3caa3dfc0f7de48247ee87bb0068b68de1317ac37a61fef74"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in DepotFacet.readPipe(PipeCall) (contracts/beanstalk/farm/DepotFacet.sol#84-93):\n\t- (success,result) = p.target.staticcall(p.data) (contracts/beanstalk/farm/DepotFacet.sol#91)\n",
            "markdown": "Low level call in [DepotFacet.readPipe(PipeCall)](contracts/beanstalk/farm/DepotFacet.sol#L84-L93):\n\t- [(success,result) = p.target.staticcall(p.data)](contracts/beanstalk/farm/DepotFacet.sol#L91)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/DepotFacet.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 93
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e5b6e9d428858a32a3d53b00c6b8e74ffda36d217b854c6e33e039dfecef719d"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in MockWETH.withdraw(uint256) (contracts/mocks/MockWETH.sol#27-33):\n\t- (success) = msg.sender.call{value: wad}() (contracts/mocks/MockWETH.sol#30)\n",
            "markdown": "Low level call in [MockWETH.withdraw(uint256)](contracts/mocks/MockWETH.sol#L27-L33):\n\t- [(success) = msg.sender.call{value: wad}()](contracts/mocks/MockWETH.sol#L30)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockWETH.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ea1ec975d13958ac0359b46c41d474156fff3e6d47b5d66cd6500c49ccb75f85"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#53-59):\n\t- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#57)\n",
            "markdown": "Low level call in [Address.sendValue(address,uint256)](node_modules/@openzeppelin/contracts/utils/Address.sol#L53-L59):\n\t- [(success) = recipient.call{value: amount}()](node_modules/@openzeppelin/contracts/utils/Address.sol#L57)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f72da62b656358252bae9f5c67a875eae36ae142bd6fb4d53f33ce85a58e2887"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from IMeta3CurveOracle (contracts/libraries/Oracle/LibCurveOracle.sol#13-18)\n",
            "markdown": "[MockMeta3Curve](contracts/mocks/curve/MockMeta3Curve.sol#L41-L710) should inherit from [IMeta3CurveOracle](contracts/libraries/Oracle/LibCurveOracle.sol#L13-L18)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 710
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1059749decf5784d3d955055430a1b2eef327c0655c617edbbc59ed859cb07c6"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from IMeta3Curve (contracts/libraries/Curve/LibMetaCurve.sol#13-17)\n",
            "markdown": "[MockMeta3Curve](contracts/mocks/curve/MockMeta3Curve.sol#L41-L710) should inherit from [IMeta3Curve](contracts/libraries/Curve/LibMetaCurve.sol#L13-L17)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 710
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "17884fa011c89bb5d3510b4d1991e1a0793cda47730aa0c559418adb722748bf"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from IERC20Upgradeable (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#8-77)\n",
            "markdown": "[MockMeta3Curve](contracts/mocks/curve/MockMeta3Curve.sol#L41-L710) should inherit from [IERC20Upgradeable](node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#L8-L77)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 710
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1ad0d3cf5435d7a0dbd5744dd7f2f30d9c4ebb5ccc77bd7649e9d99c58fcac2c"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockCurveFactory (contracts/mocks/curve/MockCurveFactory.sol#21-44) should inherit from ICurveFactory (contracts/interfaces/ICurve.sol#55-58)\n",
            "markdown": "[MockCurveFactory](contracts/mocks/curve/MockCurveFactory.sol#L21-L44) should inherit from [ICurveFactory](contracts/interfaces/ICurve.sol#L55-L58)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "31aeaee829cda0a3b2dd9cd423fcb481b575421032935ad8b52abf5e3639ab21"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from ResetPool (contracts/mocks/mockFacets/MockSeasonFacet.sol#20-22)\n",
            "markdown": "[MockMeta3Curve](contracts/mocks/curve/MockMeta3Curve.sol#L41-L710) should inherit from [ResetPool](contracts/mocks/mockFacets/MockSeasonFacet.sol#L20-L22)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 710
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3430141b9b898643d8bd7a0efd0d84edc17d527e4b95106d36a3f194c99f8678"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "BDVFacet (contracts/beanstalk/silo/BDVFacet.sol#17-49) should inherit from IBDV (contracts/ecosystem/price/CurvePrice.sol#13-15)\n",
            "markdown": "[BDVFacet](contracts/beanstalk/silo/BDVFacet.sol#L17-L49) should inherit from [IBDV](contracts/ecosystem/price/CurvePrice.sol#L13-L15)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/BDVFacet.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "428baf1030d22920959033ca8ef004312c90acee1cadb98cad5cfc0ec41893ab"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from ICurvePool2R (contracts/interfaces/ICurve.sol#33-37)\n",
            "markdown": "[MockMeta3Curve](contracts/mocks/curve/MockMeta3Curve.sol#L41-L710) should inherit from [ICurvePool2R](contracts/interfaces/ICurve.sol#L33-L37)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 710
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "485f6ec8d281256ad8514a5e915d692fc034884d475a71f97b1a207c799a19e1"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from ICurvePoolNoReturn128 (contracts/interfaces/ICurve.sol#76-79)\n",
            "markdown": "[MockMeta3Curve](contracts/mocks/curve/MockMeta3Curve.sol#L41-L710) should inherit from [ICurvePoolNoReturn128](contracts/interfaces/ICurve.sol#L76-L79)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 710
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4ddf5dc159fed20024a0f9a2ab554abe01e670442d6291bc0a9d3d12c5c31a9d"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockSiloToken (contracts/mocks/MockSiloToken.sol#15-43) should inherit from IBean (contracts/interfaces/IBean.sol#13-17)\n",
            "markdown": "[MockSiloToken](contracts/mocks/MockSiloToken.sol#L15-L43) should inherit from [IBean](contracts/interfaces/IBean.sol#L13-L17)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockSiloToken.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "59c0ae58c360ba1f4693b2c6f224e99c48ed9dc5ea06ab47f15c87b58f02d643"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from IERC20D (contracts/ecosystem/price/CurvePrice.sol#9-11)\n",
            "markdown": "[MockMeta3Curve](contracts/mocks/curve/MockMeta3Curve.sol#L41-L710) should inherit from [IERC20D](contracts/ecosystem/price/CurvePrice.sol#L9-L11)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 710
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "61db035d24c4debdfcfd3df4046d3e2f75d682e19fa39c94f911f5eff97eea5d"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockPlainCurve (contracts/mocks/curve/MockPlainCurve.sol#21-517) should inherit from IMeta3CurveOracle (contracts/libraries/Oracle/LibCurveOracle.sol#13-18)\n",
            "markdown": "[MockPlainCurve](contracts/mocks/curve/MockPlainCurve.sol#L21-L517) should inherit from [IMeta3CurveOracle](contracts/libraries/Oracle/LibCurveOracle.sol#L13-L18)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 517
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "880f7c9176f1918cbc893f448228368ac906071c4bf35d409ed9f509795af7a0"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockPlainCurve (contracts/mocks/curve/MockPlainCurve.sol#21-517) should inherit from ResetPool (contracts/mocks/mockFacets/MockSeasonFacet.sol#20-22)\n",
            "markdown": "[MockPlainCurve](contracts/mocks/curve/MockPlainCurve.sol#L21-L517) should inherit from [ResetPool](contracts/mocks/mockFacets/MockSeasonFacet.sol#L20-L22)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 517
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a53ba218797154c1961a63814cab4cd05d828c7e038ceccef2b8686cd9d51bad"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockWETH (contracts/mocks/MockWETH.sol#13-35) should inherit from IWETH (contracts/interfaces/IWETH.sol#14-19)\n",
            "markdown": "[MockWETH](contracts/mocks/MockWETH.sol#L13-L35) should inherit from [IWETH](contracts/interfaces/IWETH.sol#L14-L19)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockWETH.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ab85d6780e9d45be0803ea35e21320d769770084cd35d6d27c078ea0066f0b64"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockPlainCurve (contracts/mocks/curve/MockPlainCurve.sol#21-517) should inherit from IERC20D (contracts/ecosystem/price/CurvePrice.sol#9-11)\n",
            "markdown": "[MockPlainCurve](contracts/mocks/curve/MockPlainCurve.sol#L21-L517) should inherit from [IERC20D](contracts/ecosystem/price/CurvePrice.sol#L9-L11)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 517
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d5718868afa4044b1ef63f0d44de8bad4f131dc2f63abccfb1eb456189b46140"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "WhitelistFacet (contracts/beanstalk/silo/WhitelistFacet.sol#16-62) should inherit from IBS (contracts/beanstalk/init/InitBip12.sol#15-17)\n",
            "markdown": "[WhitelistFacet](contracts/beanstalk/silo/WhitelistFacet.sol#L16-L62) should inherit from [IBS](contracts/beanstalk/init/InitBip12.sol#L15-L17)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/WhitelistFacet.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e4ef10f10386ffa0134cfc002118a36008d01d1458eedb83795c070943fef240"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockPlainCurve (contracts/mocks/curve/MockPlainCurve.sol#21-517) should inherit from IMeta3Curve (contracts/libraries/Curve/LibMetaCurve.sol#13-17)\n",
            "markdown": "[MockPlainCurve](contracts/mocks/curve/MockPlainCurve.sol#L21-L517) should inherit from [IMeta3Curve](contracts/libraries/Curve/LibMetaCurve.sol#L13-L17)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 517
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e8b93304fbf42e40912891f28a9b6cc9aef5f6fffee2003419173218f9376184"
          }
        },
        {
          "ruleId": "3-0-missing-inheritance",
          "message": {
            "text": "MockPlainCurve (contracts/mocks/curve/MockPlainCurve.sol#21-517) should inherit from IERC20Upgradeable (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#8-77)\n",
            "markdown": "[MockPlainCurve](contracts/mocks/curve/MockPlainCurve.sol#L21-L517) should inherit from [IERC20Upgradeable](node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#L8-L77)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 517
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f91a0326e6676712bcda985b30262014c496ada59a2c2da7fa036bb8a4ec10c7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockContract.setAccount(address)._account (contracts/mocks/MockContract.sol#16) is not in mixedCase\n",
            "markdown": "Parameter [MockContract.setAccount(address)._account](contracts/mocks/MockContract.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockContract.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b6cd98f6e3f164b56ccee598816782e310e7c935647c8028340e87472544d017"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable Mock3Curve.virtual_price (contracts/mocks/curve/Mock3Curve.sol#10) is not in mixedCase\n",
            "markdown": "Variable [Mock3Curve.virtual_price](contracts/mocks/curve/Mock3Curve.sol#L10) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/Mock3Curve.sol"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "575e96f230dde20ae2d01e2b9a3cabf232479feb546f5fba255669c838462e88"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Mock3Curve.set_virtual_price(uint256)._virtual_price (contracts/mocks/curve/Mock3Curve.sol#16) is not in mixedCase\n",
            "markdown": "Parameter [Mock3Curve.set_virtual_price(uint256)._virtual_price](contracts/mocks/curve/Mock3Curve.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/Mock3Curve.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5ca57044fd5303ac380cf4cabffaefa6fe1ae138a995891f0b4ddba2f6567e0f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function Mock3Curve.get_virtual_price() (contracts/mocks/curve/Mock3Curve.sol#12-14) is not in mixedCase\n",
            "markdown": "Function [Mock3Curve.get_virtual_price()](contracts/mocks/curve/Mock3Curve.sol#L12-L14) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/Mock3Curve.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "95d481fa1401daf988bb8b517d9084c168561398d1051f7b2ba7c2de6fec6aff"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function Mock3Curve.set_virtual_price(uint256) (contracts/mocks/curve/Mock3Curve.sol#16-18) is not in mixedCase\n",
            "markdown": "Function [Mock3Curve.set_virtual_price(uint256)](contracts/mocks/curve/Mock3Curve.sol#L16-L18) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/Mock3Curve.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4c224754cd02bdd3a5c3a3511952fa9c698ce25eeabd62e1a80177bc8353ba8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockCurveFactory.set_underlying_coins(address,address[8])._pool (contracts/mocks/curve/MockCurveFactory.sol#32) is not in mixedCase\n",
            "markdown": "Parameter [MockCurveFactory.set_underlying_coins(address,address[8])._pool](contracts/mocks/curve/MockCurveFactory.sol#L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "00f53d273e2facc86121035c03602903e004e003d212d0e4c56c814eec1a838b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMeta3CurveOracle.block_timestamp_last() (contracts/libraries/Oracle/LibCurveOracle.sol#14) is not in mixedCase\n",
            "markdown": "Function [IMeta3CurveOracle.block_timestamp_last()](contracts/libraries/Oracle/LibCurveOracle.sol#L14) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Oracle/LibCurveOracle.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "018fc41c7d495d3de5f82142dae87f5930f3a394172571f0301f29c2f0ef7e93"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolNoReturn128.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/interfaces/ICurve.sol#78) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolNoReturn128.remove_liquidity_one_coin(uint256,int128,uint256).min_amount](contracts/interfaces/ICurve.sol#L78) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "01c72a8d55f94a4f370f50aed190a67a47d4ca5c1e3058e3af438cc7df4b2aac"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool3R.add_liquidity(uint256[3],uint256,address) (contracts/interfaces/ICurve.sol#40) is not in mixedCase\n",
            "markdown": "Function [ICurvePool3R.add_liquidity(uint256[3],uint256,address)](contracts/interfaces/ICurve.sol#L40) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "021eb0dad9938a3339656e1c74219d9896ac15b0c7e1b348eaf2699df36be57b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibBytes.toUint32(bytes,uint256)._start (contracts/libraries/LibBytes.sol#34) is not in mixedCase\n",
            "markdown": "Parameter [LibBytes.toUint32(bytes,uint256)._start](contracts/libraries/LibBytes.sol#L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "026fbace5a560f3b28e4ab3abcdd7dcb93760d3b6a54f2b9ef08076ac051b368"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DiamondLoupeFacet.supportsInterface(bytes4)._interfaceId (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#74) is not in mixedCase\n",
            "markdown": "Parameter [DiamondLoupeFacet.supportsInterface(bytes4)._interfaceId](contracts/beanstalk/diamond/DiamondLoupeFacet.sol#L74) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/DiamondLoupeFacet.sol"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "02828787c0eb48a1d65d6407d1e907028796b76058791c7e05cf737c654c09f5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.initializeDiamondCut(address,bytes)._init (contracts/libraries/LibDiamond.sol#214) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.initializeDiamondCut(address,bytes)._init](contracts/libraries/LibDiamond.sol#L214) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 214,
                  "endLine": 214
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "037671e589dc351ed82399834da11a3985f7b473819d26427e01c5974ab3784d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.set_balances(uint256[2]) (contracts/mocks/curve/MockPlainCurve.sol#87-90) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.set_balances(uint256[2])](contracts/mocks/curve/MockPlainCurve.sol#L87-L90) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "06b6338aff2e82200177f2baa833d51d9b1d2fc2288c4dd53946ffdc3881129a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMockCurvePool.calc_withdraw_one_coin(uint256,int128) (contracts/mocks/curve/MockMeta3Curve.sol#30) is not in mixedCase\n",
            "markdown": "Function [IMockCurvePool.calc_withdraw_one_coin(uint256,int128)](contracts/mocks/curve/MockMeta3Curve.sol#L30) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "072042041cc3c4ccfcca74cc54493d3b450b31c1a2944015993abd2061fb361b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.set_A_precise(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#97-99) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.set_A_precise(uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L97-L99) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 99
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "072473df962f24aee76ce9188dfc197936f72f4e36b4ec21395d387ec55ea8e3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC1155Upgradeable.__ERC1155_init_unchained(string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#62-70) is not in mixedCase\n",
            "markdown": "Function [ERC1155Upgradeable.__ERC1155_init_unchained(string)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L62-L70) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "086cf15f65579e638ec5857acb6b2c6ba6ff8bfb3f68de3d645baa4bee3c1072"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)._min_received (contracts/mocks/curve/MockMeta3Curve.sol#370) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)._min_received](contracts/mocks/curve/MockMeta3Curve.sol#L370) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 370,
                  "endLine": 370
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "095b931dcacd39d15c105882786d66a0b726f0297d19c83e47762f7db38e7d1e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip5.bean (contracts/beanstalk/init/InitBip5.sol#22) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip5.bean](contracts/beanstalk/init/InitBip5.sol#L22) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip5.sol"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0a5fc78756c3a503b766da895e1fbf5859a86a22c7e5b3005eaeb5ce9d40eb9b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#386-416) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L386-L416) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 386,
                  "endLine": 416
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0bbc5050eb21ee29a0e34f2b8027d48bfe358bad49bc6e8ad65e940b2d189d19"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockCurveFactory.set_underlying_coins(address,address[8]) (contracts/mocks/curve/MockCurveFactory.sol#32-34) is not in mixedCase\n",
            "markdown": "Function [MockCurveFactory.set_underlying_coins(address,address[8])](contracts/mocks/curve/MockCurveFactory.sol#L32-L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0d9e0aad3ce6e0d05c009548b11c98b976526a8618f4db0cacc99fd94107b4f5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockPlainCurve.sol#219-249) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2])](contracts/mocks/curve/MockPlainCurve.sol#L219-L249) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 249
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0f5a8a792bfcab2c956b627777999d053c9b7322fd2ac550e20d8079cc72db2e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256)._max_burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#297) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256)._max_burn_amount](contracts/mocks/curve/MockMeta3Curve.sol#L297) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 297
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0f9d24d044e9e9be90d5b7be11f6b611010d26e142090fd017e73312c5f28a90"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.get_price_cumulative_last() (contracts/mocks/curve/MockPlainCurve.sol#118-120) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.get_price_cumulative_last()](contracts/mocks/curve/MockPlainCurve.sol#L118-L120) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 120
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "10823676de1e537f8ded90adbc3a34bc704bcd1fec3b8fba0ee19af5232928da"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMockCurvePool.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/mocks/curve/MockMeta3Curve.sol#24) is not in mixedCase\n",
            "markdown": "Function [IMockCurvePool.remove_liquidity_one_coin(uint256,int128,uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L24) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "11ade899c62ecf2ef8b288717397e52eb91b5009bfaec2513aa11c653f84d859"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256).D (contracts/mocks/curve/MockMeta3Curve.sol#453) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256).D](contracts/mocks/curve/MockMeta3Curve.sol#L453) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 453,
                  "endLine": 453
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "12575396cc9c7363eb98da07f58a57f7be70db5163081b4b8931efc54db3f9a6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.get_virtual_price() (contracts/mocks/curve/MockPlainCurve.sol#76-78) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.get_virtual_price()](contracts/mocks/curve/MockPlainCurve.sol#L76-L78) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "126a02512105c1e804dcfaa6c2f3cd1effbe3f1e7c32210689bc271141bb0a20"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.get_D_mem(uint256[2],uint256[2],uint256)._balances (contracts/mocks/curve/MockPlainCurve.sol#356) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.get_D_mem(uint256[2],uint256[2],uint256)._balances](contracts/mocks/curve/MockPlainCurve.sol#L356) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 356,
                  "endLine": 356
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1488d7d22b8d815b254f70c265c038da2d4aa39744304b5072b09493df73388c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IMockCurvePool.exchange_underlying(int128,int128,uint256,uint256).min_dy (contracts/mocks/curve/MockMeta3Curve.sol#32) is not in mixedCase\n",
            "markdown": "Parameter [IMockCurvePool.exchange_underlying(int128,int128,uint256,uint256).min_dy](contracts/mocks/curve/MockMeta3Curve.sol#L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "14b6e3737f6c39527283ceecbcc3a818eb95bafe7aebbdc6adc320b1fa075244"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.get_bean_price() (contracts/mocks/curve/MockMeta3Curve.sol#140-146) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.get_bean_price()](contracts/mocks/curve/MockMeta3Curve.sol#L140-L146) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 146
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1542aa3129f0dfb1279507e231ab986527061e25b5db973ffb1459b1bd053cde"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DiamondLoupeFacet.facetAddress(bytes4)._functionSelector (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#63) is not in mixedCase\n",
            "markdown": "Parameter [DiamondLoupeFacet.facetAddress(bytes4)._functionSelector](contracts/beanstalk/diamond/DiamondLoupeFacet.sol#L63) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/DiamondLoupeFacet.sol"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "15c93eaba62b7e18383ca68549b9a94394cdc6868f1a7eceba2be2e736dfb8fe"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip5.token (contracts/beanstalk/init/InitBip5.sol#21) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip5.token](contracts/beanstalk/init/InitBip5.sol#L21) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip5.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "15d3e683f03703eed2e80d7e32e4c709387f1d9384d671dbb3836b748aa482f2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.calc_token_amount(uint256[2],bool)._is_deposit (contracts/mocks/curve/MockMeta3Curve.sol#534) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.calc_token_amount(uint256[2],bool)._is_deposit](contracts/mocks/curve/MockMeta3Curve.sol#L534) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 534,
                  "endLine": 534
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "16c8746707d058ccc3ec3b9761b921da54cf4af0e4595231b6974ba2c5f8e3d8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.get_price_cumulative_last() (contracts/mocks/curve/MockMeta3Curve.sol#132-134) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.get_price_cumulative_last()](contracts/mocks/curve/MockMeta3Curve.sol#L132-L134) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "177f81c7485cbe8b3743fe2cd6c8bea48145fc5f12817050ac89190c15444236"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function Fertilizer.__update(address,uint256[],uint256) (contracts/tokens/Fertilizer/Fertilizer.sol#73-87) is not in mixedCase\n",
            "markdown": "Function [Fertilizer.__update(address,uint256[],uint256)](contracts/tokens/Fertilizer/Fertilizer.sol#L73-L87) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1838c9420126142a39120ac0828119c44a9779cf901b54d79f842f628d4cd321"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/interfaces/ICurve.sol#10) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256)](contracts/interfaces/ICurve.sol#L10) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "18b967e50bdac787642a64437c8ac4c11a7026d3f9d545e210d9ae6558427192"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)._receiver (contracts/mocks/curve/MockMeta3Curve.sol#305) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)._receiver](contracts/mocks/curve/MockMeta3Curve.sol#L305) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 305,
                  "endLine": 305
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "18bf73b637211c71d8e6eda46e32d0d9d2a44de1daa600999b692ac021424aa2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IERC4494.DOMAIN_SEPARATOR() (contracts/interfaces/IERC4494.sol#28) is not in mixedCase\n",
            "markdown": "Function [IERC4494.DOMAIN_SEPARATOR()](contracts/interfaces/IERC4494.sol#L28) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IERC4494.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "19b3ac983f2443f69002d0aa3681c5173ac3cbb4f3da4c0d5c37fa773dc149f3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip7.payment (contracts/beanstalk/init/InitBip7.sol#18) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip7.payment](contracts/beanstalk/init/InitBip7.sol#L18) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip7.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1a35bbea76c54e2d6dcc435537d99b9ff36b8681c8cef3d892f41cc88456e950"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.get_balances() (contracts/mocks/curve/MockPlainCurve.sol#68-70) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.get_balances()](contracts/mocks/curve/MockPlainCurve.sol#L68-L70) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1a9d5948cfc0cd4525791a083e4b38efa9e4ae062f28f307d5f847a2e0dc782b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool4R.remove_liquidity(uint256,uint256[4],address)._burn_amount (contracts/interfaces/ICurve.sol#47) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool4R.remove_liquidity(uint256,uint256[4],address)._burn_amount](contracts/interfaces/ICurve.sol#L47) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1ae51f6b91ee57912cab8b541e86823079b1d96d25758310ee9875478ae8d2c2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip7.publius (contracts/beanstalk/init/InitBip7.sol#16) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip7.publius](contracts/beanstalk/init/InitBip7.sol#L16) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip7.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1cab31199e8f163cfc53f03318cd4075aef56b4fb8406d88e1f9b5668099029e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/mocks/curve/MockMeta3Curve.sol#353-359) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L353-L359) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 353,
                  "endLine": 359
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1fac00e5a3990e252f3fa7c8504933b8d1468694dde4cbd074c58f07bb43e0a2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter CurvePrice.getCurveDeltaB(uint256,uint256).D (contracts/ecosystem/price/CurvePrice.sol#54) is not in mixedCase\n",
            "markdown": "Parameter [CurvePrice.getCurveDeltaB(uint256,uint256).D](contracts/ecosystem/price/CurvePrice.sol#L54) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ecosystem/price/CurvePrice.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "20301433a532831caabd345f9e78a2a83da3329b92f209aba9047635054d3bfc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)._lastDSoil (contracts/mocks/mockFacets/MockSeasonFacet.sol#204) is not in mixedCase\n",
            "markdown": "Parameter [MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)._lastDSoil](contracts/mocks/mockFacets/MockSeasonFacet.sol#L204) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 204
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "203427719ec9bfb0c332e20e431661efec0adbf89f9d6ac2b104ff09c4e92ca1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibCurve.getPrice(uint256[2],uint256,uint256,uint256).D (contracts/libraries/Curve/LibCurve.sol#28) is not in mixedCase\n",
            "markdown": "Parameter [LibCurve.getPrice(uint256[2],uint256,uint256,uint256).D](contracts/libraries/Curve/LibCurve.sol#L28) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "208965422b801bf2e34b3cf40e8d535f71c491f7f1af85a1d546eb80457047b1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.get_virtual_price() (contracts/interfaces/ICurve.sol#14) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.get_virtual_price()](contracts/interfaces/ICurve.sol#L14) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2218cfb1ac3f56fed84ea472669532d02a547a85b62e6da78979c0764f6e5f4c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable MockUniswapV3Pool.manual_ticks (contracts/mocks/uniswap/MockUniswapV3Pool.sol#107) is not in mixedCase\n",
            "markdown": "Variable [MockUniswapV3Pool.manual_ticks](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L107) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "23799bff05ac451b5e1191fe29d3ec5bc285e5bd5a1afc2d28bf0c65882395e4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.addFacet(LibDiamond.DiamondStorage,address)._facetAddress (contracts/libraries/LibDiamond.sol#169) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.addFacet(LibDiamond.DiamondStorage,address)._facetAddress](contracts/libraries/LibDiamond.sol#L169) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 169,
                  "endLine": 169
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "242d0f70bfdb5eb55a04808658f30cd137d5173db959a62235137255d22cc1ad"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.get_balances() (contracts/mocks/curve/MockMeta3Curve.sol#82-84) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.get_balances()](contracts/mocks/curve/MockMeta3Curve.sol#L82-L84) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "244bb8dd2d62294b07d55e74ae9a88766c8f0bb78c3a6f0193028066aece1f69"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePoolR.exchange_underlying(int128,int128,uint256,uint256,address) (contracts/interfaces/ICurve.sol#29) is not in mixedCase\n",
            "markdown": "Function [ICurvePoolR.exchange_underlying(int128,int128,uint256,uint256,address)](contracts/interfaces/ICurve.sol#L29) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "248e7b67e5ed0ac8c5b9e918dd118f119d28784da9e622c1124cc17a76238754"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DiamondCutFacet.diamondCut(IDiamondCut.FacetCut[],address,bytes)._diamondCut (contracts/beanstalk/diamond/DiamondCutFacet.sol#23) is not in mixedCase\n",
            "markdown": "Parameter [DiamondCutFacet.diamondCut(IDiamondCut.FacetCut[],address,bytes)._diamondCut](contracts/beanstalk/diamond/DiamondCutFacet.sol#L23) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/DiamondCutFacet.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "25cfaac4d2b90d6551ec3132e2aea91875728fe739a03735223d0c43c1095106"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockDiamond.mockInit(address)._contractOwner (contracts/mocks/MockDiamond.sol#24) is not in mixedCase\n",
            "markdown": "Parameter [MockDiamond.mockInit(address)._contractOwner](contracts/mocks/MockDiamond.sol#L24) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockDiamond.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "26b26e80f36c4e497cffcc3ebcd32b1af362641f22033697c58b8e73b9dd5beb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibCurve.getYD(uint256,uint256,uint256[2],uint256).D (contracts/libraries/Curve/LibCurve.sol#118) is not in mixedCase\n",
            "markdown": "Parameter [LibCurve.getYD(uint256,uint256,uint256[2],uint256).D](contracts/libraries/Curve/LibCurve.sol#L118) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "270a81686c0ac013ea1ea86713fc110f63ec724811c65f810c121d0a2947bbf7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip14.beanstalkFarmsBudget (contracts/beanstalk/init/InitBip14.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip14.beanstalkFarmsBudget](contracts/beanstalk/init/InitBip14.sol#L20) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip14.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "292e3ffd493768cc6e005c1e2108643d9fff80d54b9c7f06fb14c91aec2a1696"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ApprovalFacet.isApprovedForAll(address,address)._owner (contracts/beanstalk/silo/ApprovalFacet.sol#196) is not in mixedCase\n",
            "markdown": "Parameter [ApprovalFacet.isApprovedForAll(address,address)._owner](contracts/beanstalk/silo/ApprovalFacet.sol#L196) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/ApprovalFacet.sol"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2b7582a899df7a742e15abf2498f1537ee466092fddecf4d34ae4793498436bd"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip14.beanstalkFarms (contracts/beanstalk/init/InitBip14.sol#19) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip14.beanstalkFarms](contracts/beanstalk/init/InitBip14.sol#L19) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip14.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2b8f11215b642e0b145fb516c29a4f9ca7a8d9d860f5aa99b089a53a61f6da93"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L302-L351) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 351
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2bb9ecb70cbba18da9c82cc528a8d23d7803e142df0e25a4460b1303db7924e6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/mocks/curve/MockPlainCurve.sol#201-217) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256)](contracts/mocks/curve/MockPlainCurve.sol#L201-L217) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 217
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2ceca0d9720c4db97fcbdf50fd14ad7c376a54054496503c06df6333915cb649"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DiamondCutFacet.diamondCut(IDiamondCut.FacetCut[],address,bytes)._init (contracts/beanstalk/diamond/DiamondCutFacet.sol#24) is not in mixedCase\n",
            "markdown": "Parameter [DiamondCutFacet.diamondCut(IDiamondCut.FacetCut[],address,bytes)._init](contracts/beanstalk/diamond/DiamondCutFacet.sol#L24) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/DiamondCutFacet.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2de7f0f06320b8ef09388615ecdb54d2a33d558c32c731476a9b8f061d73894e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve._xp_mem(uint256[2],uint256[2])._rates (contracts/mocks/curve/MockMeta3Curve.sol#422) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve._xp_mem(uint256[2],uint256[2])._rates](contracts/mocks/curve/MockMeta3Curve.sol#L422) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 422,
                  "endLine": 422
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2ea13c5eedc3de21b988b168e178ae82c236b3b97d4f1d2a4b70d4dfba73726d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip24.payment (contracts/beanstalk/init/InitBip24.sol#17) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip24.payment](contracts/beanstalk/init/InitBip24.sol#L17) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip24.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2f161a8d9b4367346448594f1a34aac56bfd5345688ff29673cc8b253d110b1d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Internalizer.uri(uint256)._id (contracts/tokens/Fertilizer/Internalizer.sol#41) is not in mixedCase\n",
            "markdown": "Parameter [Internalizer.uri(uint256)._id](contracts/tokens/Fertilizer/Internalizer.sol#L41) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Internalizer.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3090f01075e17604eab4956d580c3f1e69a84508f3b4dc992c91201a3e709aa5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#497-533) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L497-L533) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 497,
                  "endLine": 533
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "30f63f156000f117b795fa8ed44920d5da21a25037eeeaf6fb68912600fc1c26"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockSiloFacet.mockUnripeBeanDeposit(uint32,uint256)._s (contracts/mocks/mockFacets/MockSiloFacet.sol#58) is not in mixedCase\n",
            "markdown": "Parameter [MockSiloFacet.mockUnripeBeanDeposit(uint32,uint256)._s](contracts/mocks/mockFacets/MockSiloFacet.sol#L58) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "312842afb56ffcea10dc0d014559df7be1016d6f2fa652fdd77131f029079055"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.block_timestamp_last() (contracts/mocks/curve/MockPlainCurve.sol#122-124) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.block_timestamp_last()](contracts/mocks/curve/MockPlainCurve.sol#L122-L124) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 124
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "316223864da2a51f13cc3c59500cdcef2c8d7ffc1af5aaeaa8d7026d9e262f6c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.addFunctions(address,bytes4[])._facetAddress (contracts/libraries/LibDiamond.sol#120) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.addFunctions(address,bytes4[])._facetAddress](contracts/libraries/LibDiamond.sol#L120) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "332c3774b320049f3b675280707c6a6f1917c28b6f6296d2032e213f5913e2b8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant LibBeanMetaCurve.i (contracts/libraries/Curve/LibBeanMetaCurve.sol#21) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [LibBeanMetaCurve.i](contracts/libraries/Curve/LibBeanMetaCurve.sol#L21) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibBeanMetaCurve.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3440289d210a9a7245b31481d2058a2e683ca3631efbee75e036641068416491"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/interfaces/ICurve.sol#10) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount](contracts/interfaces/ICurve.sol#L10) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3531c0401dfa4d1fa11cd395facdbd0fcc39f90629fa5e9b60e1352d26a18191"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.enforceHasContractCode(address,string)._contract (contracts/libraries/LibDiamond.sol#234) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.enforceHasContractCode(address,string)._contract](contracts/libraries/LibDiamond.sol#L234) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 234
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "359132c65f505eeea7975999ef4b753edbb6ab217b2d9bc37bda70d2d3975ccb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ContextUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#31) is not in mixedCase\n",
            "markdown": "Variable [ContextUpgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L31) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "36b0d7790b5ec0201a99f98a2f3b1afbd4248739c34889d0a9d08876f3462218"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveZap.add_liquidity(address,uint256[4],uint256)._deposit_amounts (contracts/interfaces/ICurve.sol#23) is not in mixedCase\n",
            "markdown": "Parameter [ICurveZap.add_liquidity(address,uint256[4],uint256)._deposit_amounts](contracts/interfaces/ICurve.sol#L23) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "36c225cfa6313924b25a35e06eed1f4fbeb1db6205639c7f07ce408959e2485e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMockCurvePool.set_A_precise(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#35) is not in mixedCase\n",
            "markdown": "Function [IMockCurvePool.set_A_precise(uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L35) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "36ef9a113006b430a5d781be8d08eb039f9613b10f5b3e2d9d89a2983b94a067"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMockCurvePool.set_balances(uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#38) is not in mixedCase\n",
            "markdown": "Function [IMockCurvePool.set_balances(uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L38) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "371daf6adbe103451ad4623fe73e7c7cec9cd5dd7c748af45a676dc01ca2813f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool4R.remove_liquidity(uint256,uint256[4],address) (contracts/interfaces/ICurve.sol#47) is not in mixedCase\n",
            "markdown": "Function [ICurvePool4R.remove_liquidity(uint256,uint256[4],address)](contracts/interfaces/ICurve.sol#L47) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "373421a1a151b38d2fbb4beb400b76e60e056513b7dd7cb79937a69aa80835c2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePoolNoReturn.remove_liquidity(uint256,uint256[3]) (contracts/interfaces/ICurve.sol#71) is not in mixedCase\n",
            "markdown": "Function [ICurvePoolNoReturn.remove_liquidity(uint256,uint256[3])](contracts/interfaces/ICurve.sol#L71) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "37a190d7f492e530fc298a3aa8cab0da1fcc18dff77eba969bd1d015e4c1b29c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMockCurvePool.exchange_underlying(int128,int128,uint256,uint256) (contracts/mocks/curve/MockMeta3Curve.sol#32) is not in mixedCase\n",
            "markdown": "Function [IMockCurvePool.exchange_underlying(int128,int128,uint256,uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3811c980de70575abf62ef6da695e4d279b4a3d5988e23f59ef31f77769269c6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IMockCurvePool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/mocks/curve/MockMeta3Curve.sol#24) is not in mixedCase\n",
            "markdown": "Parameter [IMockCurvePool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount](contracts/mocks/curve/MockMeta3Curve.sol#L24) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "394079e6bcf4b439108ab000987cff15bcccee4ca68a3ea462298bec0503a7a9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePoolNoReturn.add_liquidity(uint256[3],uint256) (contracts/interfaces/ICurve.sol#70) is not in mixedCase\n",
            "markdown": "Function [ICurvePoolNoReturn.add_liquidity(uint256[3],uint256)](contracts/interfaces/ICurve.sol#L70) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3aa80e107a9fcb9ae2a1377e813544f0ae83d044c70da6a9348f13057816e970"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.removeFunctions(address,bytes4[])._functionSelectors (contracts/libraries/LibDiamond.sol#157) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.removeFunctions(address,bytes4[])._functionSelectors](contracts/libraries/LibDiamond.sol#L157) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 157
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3b051c5f1cce17153f0fc3bf06f125d71885738a34f2e0190eed978b41fc7e90"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibCurve.getPrice(uint256[2],uint256[2],uint256,uint256).D (contracts/libraries/Curve/LibCurve.sol#41) is not in mixedCase\n",
            "markdown": "Parameter [LibCurve.getPrice(uint256[2],uint256[2],uint256,uint256).D](contracts/libraries/Curve/LibCurve.sol#L41) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3d3e6845e91d744d45ce0ef3a19df04070c22841b82f5dfe9cc8c93207036b55"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#43-45) is not in mixedCase\n",
            "markdown": "Function [ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L43-L45) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3e75801ad9978e638414efcd60e7f0073b008a621502b3366b5fb8e7ac736ea4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMeta3Curve.A_precise() (contracts/libraries/Curve/LibMetaCurve.sol#14) is not in mixedCase\n",
            "markdown": "Function [IMeta3Curve.A_precise()](contracts/libraries/Curve/LibMetaCurve.sol#L14) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibMetaCurve.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3f3e5f53055b1b2bcf5363e7706c7bf702e5d053a33fcbba8cbe90baf852a797"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibBeanMetaCurve.getDeltaBWithD(uint256,uint256).D (contracts/libraries/Curve/LibBeanMetaCurve.sol#53) is not in mixedCase\n",
            "markdown": "Parameter [LibBeanMetaCurve.getDeltaBWithD(uint256,uint256).D](contracts/libraries/Curve/LibBeanMetaCurve.sol#L53) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibBeanMetaCurve.sol"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4013da9a84e12a480f3ec8bada03e097b984a4d1ae108af507321b9792adbacc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolNoReturn.remove_liquidity_one_coin(uint256,uint256,uint256)._token_amount (contracts/interfaces/ICurve.sol#73) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolNoReturn.remove_liquidity_one_coin(uint256,uint256,uint256)._token_amount](contracts/interfaces/ICurve.sol#L73) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "401dedb73cf8ccddd586e681894bb036d19726bc8ab2edeb9b88d4ab1d5f0727"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.set_supply(uint256)._supply (contracts/mocks/curve/MockMeta3Curve.sol#106) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.set_supply(uint256)._supply](contracts/mocks/curve/MockMeta3Curve.sol#L106) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4163ed42e7aff0214e59357692788fd82c5ee948123a0dec2c6cf10019b23edd"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.initializeDiamondCut(address,bytes)._calldata (contracts/libraries/LibDiamond.sol#214) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.initializeDiamondCut(address,bytes)._calldata](contracts/libraries/LibDiamond.sol#L214) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 214,
                  "endLine": 214
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "419a178ac6d9a13aff424314df18454fa524aa8951afaf4639d568b4e3822e9b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)._min_amounts (contracts/mocks/curve/MockMeta3Curve.sol#275) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)._min_amounts](contracts/mocks/curve/MockMeta3Curve.sol#L275) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 275
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "41d3779336aab539c6da3a81cc1f2613147f9ca137106c4cfe217ec88f17f3ee"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool3R.remove_liquidity_imbalance(uint256[3],uint256,address)._max_burn_amount (contracts/interfaces/ICurve.sol#42) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool3R.remove_liquidity_imbalance(uint256[3],uint256,address)._max_burn_amount](contracts/interfaces/ICurve.sol#L42) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "42510b4178131bdc6ad55647b77326cf3fb8b1d966a3d24202e9da07a806d90d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter SiloFacet.deposit(address,uint256,LibTransfer.From)._amount (contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#51) is not in mixedCase\n",
            "markdown": "Parameter [SiloFacet.deposit(address,uint256,LibTransfer.From)._amount](contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#L51) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/SiloFacet/SiloFacet.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "43ab2c1591d79cca0d83c24811a5a8e7b29006e33f9f6bef57398286a2d97d8f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.diamondCut(IDiamondCut.FacetCut[],address,bytes)._init (contracts/libraries/LibDiamond.sol#101) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.diamondCut(IDiamondCut.FacetCut[],address,bytes)._init](contracts/libraries/LibDiamond.sol#L101) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4471d9de84db9431d6b8732778fd3a68991f8f148e112335b374b779ddd61ee6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.set_supply(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#106-108) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.set_supply(uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L106-L108) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 108
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4494f35e0d051edff61b8144ba5ca5b8728d85e097270573bd3ed99772dc7931"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])._balances (contracts/mocks/curve/MockMeta3Curve.sol#386) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])._balances](contracts/mocks/curve/MockMeta3Curve.sol#L386) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 386,
                  "endLine": 386
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "451f73a1154584fa47523e29dcdf96985222ef61caf946d0b37cced5c48d659f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.init(address,address)._token (contracts/mocks/curve/MockPlainCurve.sol#54) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.init(address,address)._token](contracts/mocks/curve/MockPlainCurve.sol#L54) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "462996dd5190ff3cae0c9fc9b2eeb2e436ef8cc7f6e8000991d285a083c00241"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.replaceFunctions(address,bytes4[])._functionSelectors (contracts/libraries/LibDiamond.sol#138) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.replaceFunctions(address,bytes4[])._functionSelectors](contracts/libraries/LibDiamond.sol#L138) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 138,
                  "endLine": 138
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4689b6cb9ccffbaf7a7e8c68752c35b98cef4d0806cfb8177b6563bc7c7c01a4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.set_supply(uint256)._supply (contracts/mocks/curve/MockPlainCurve.sol#92) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.set_supply(uint256)._supply](contracts/mocks/curve/MockPlainCurve.sol#L92) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "46d41a6956c7aae4790664cd3561124095098909a6620b803b0d775a37bdf3f2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibBytes.toUint256(bytes,uint256)._bytes (contracts/libraries/LibBytes.sol#50) is not in mixedCase\n",
            "markdown": "Parameter [LibBytes.toUint256(bytes,uint256)._bytes](contracts/libraries/LibBytes.sol#L50) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "46dbc8b87dbeeb4be68b096d0fc5a617afb2dd0df755686a51893d8b949a834a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.add_liquidity(uint256[2],uint256,address)._amounts (contracts/mocks/curve/MockMeta3Curve.sol#209) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.add_liquidity(uint256[2],uint256,address)._amounts](contracts/mocks/curve/MockMeta3Curve.sol#L209) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 209
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "46ddcf1211f56984cc295549a1c277307dea9407fd4b9336fb3d26c43dbc4e94"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ERC721.safeTransferFrom(address,address,uint256,bytes)._data (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#245) is not in mixedCase\n",
            "markdown": "Parameter [ERC721.safeTransferFrom(address,address,uint256,bytes)._data](node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#L245) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol"
                },
                "region": {
                  "startLine": 245,
                  "endLine": 245
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4738072ee269ef93569c4e9ad5d6e048e2edd020e653ecb4e5b94cc29f5fc3d7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolNoReturn.remove_liquidity_one_coin(uint256,uint256,uint256).min_amount (contracts/interfaces/ICurve.sol#73) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolNoReturn.remove_liquidity_one_coin(uint256,uint256,uint256).min_amount](contracts/interfaces/ICurve.sol#L73) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "47391a49741821dc82374d6b4ecbb764c6f4337e68a5685a4a3e4453ff6add18"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)._receiver (contracts/mocks/curve/MockMeta3Curve.sol#176) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)._receiver](contracts/mocks/curve/MockMeta3Curve.sol#L176) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4767052bd7bcbbd7fc96f3d464a24726f88cee551bb5f413cb0f37026587f988"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDibbler.beansToPods(uint256,uint256)._morningTemperature (contracts/libraries/LibDibbler.sol#315) is not in mixedCase\n",
            "markdown": "Parameter [LibDibbler.beansToPods(uint256,uint256)._morningTemperature](contracts/libraries/LibDibbler.sol#L315) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 315
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4770c852d509f8e631b52f286133248025d028634d3597281a5a56189d72fff5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.get_D_mem(uint256[2],uint256[2],uint256)._rates (contracts/mocks/curve/MockMeta3Curve.sol#549) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.get_D_mem(uint256[2],uint256[2],uint256)._rates](contracts/mocks/curve/MockMeta3Curve.sol#L549) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 549,
                  "endLine": 549
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4785a933346e62858ea02e55e49112a9b8db5d56e22f9969e085d3d490d2e9f5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256).min_dy (contracts/mocks/curve/MockMeta3Curve.sol#166) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.exchange(int128,int128,uint256,uint256).min_dy](contracts/mocks/curve/MockMeta3Curve.sol#L166) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 166,
                  "endLine": 166
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "47a51a1811cf4de61484edd5844a0751f1d67981abef0a996689c28eb5f12b51"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable MockMeta3Curve.timestamp_last (contracts/mocks/curve/MockMeta3Curve.sol#59) is not in mixedCase\n",
            "markdown": "Variable [MockMeta3Curve.timestamp_last](contracts/mocks/curve/MockMeta3Curve.sol#L59) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "47f73b5c771f1ab45d7db00efdaf2093c4134b9e77f692bfefcb6c9eb737b0dc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDibbler.scaleSoilUp(uint256,uint256,uint256)._morningTemperature (contracts/libraries/LibDibbler.sol#333) is not in mixedCase\n",
            "markdown": "Parameter [LibDibbler.scaleSoilUp(uint256,uint256,uint256)._morningTemperature](contracts/libraries/LibDibbler.sol#L333) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 333,
                  "endLine": 333
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4879ca36df68e540ca083813dffeedc0ac6bac04883573274cad9e87c4eec04a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolNoReturn.remove_liquidity(uint256,uint256[3])._min_amounts (contracts/interfaces/ICurve.sol#71) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolNoReturn.remove_liquidity(uint256,uint256[3])._min_amounts](contracts/interfaces/ICurve.sol#L71) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "48cbd21e870398ec8b9b2a53ace2df5c7ffceba427f49b3f732ac2f31b123fb6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip1.marketingBudget (contracts/beanstalk/init/InitBip1.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip1.marketingBudget](contracts/beanstalk/init/InitBip1.sol#L20) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip1.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "491d257a82a486e76dae594a1334ceb5e731f326ebd1f1fea073e24b7b49ff61"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMeta3CurveOracle.get_balances() (contracts/libraries/Oracle/LibCurveOracle.sol#16) is not in mixedCase\n",
            "markdown": "Function [IMeta3CurveOracle.get_balances()](contracts/libraries/Oracle/LibCurveOracle.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Oracle/LibCurveOracle.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "493894cfdb475fbb4c87381b66cfeb0958a23023158a03cfc83999b638b22156"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256)._min_received (contracts/mocks/curve/MockMeta3Curve.sol#356) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256)._min_received](contracts/mocks/curve/MockMeta3Curve.sol#L356) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 356,
                  "endLine": 356
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4b302587861d51cb3fedd0a7b44585d51167ee4d30c34a733ccac70945f6423e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.addFunction(LibDiamond.DiamondStorage,bytes4,uint96,address)._facetAddress (contracts/libraries/LibDiamond.sol#176) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.addFunction(LibDiamond.DiamondStorage,bytes4,uint96,address)._facetAddress](contracts/libraries/LibDiamond.sol#L176) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4c3470fd0cd0cf89d805e75c6729e95deab1ba737059722edd775aa119a9f5a4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter OwnershipFacet.transferOwnership(address)._newOwner (contracts/beanstalk/diamond/OwnershipFacet.sol#15) is not in mixedCase\n",
            "markdown": "Parameter [OwnershipFacet.transferOwnership(address)._newOwner](contracts/beanstalk/diamond/OwnershipFacet.sol#L15) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/OwnershipFacet.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4e0f70837adfa4da399bde778b452d6d26f3c9b4762c6a4b1d46de519374d905"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#297-339) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L297-L339) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 339
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4e63d775a0aa3899086432a9b6aa1394454340e193be1eac6ffa65641445dc47"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.get_previous_balances() (contracts/mocks/curve/MockMeta3Curve.sol#86-88) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.get_previous_balances()](contracts/mocks/curve/MockMeta3Curve.sol#L86-L88) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 88
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4e80253fd89a8a3530c8bd44305ad437f30b63617dcbb497df237a679556c0f8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve._xp_mem(uint256[2],uint256[2])._balances (contracts/mocks/curve/MockPlainCurve.sol#266) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve._xp_mem(uint256[2],uint256[2])._balances](contracts/mocks/curve/MockPlainCurve.sol#L266) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 266
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4ef06bd79fc699119f9d3580a34e63868637ad972d182a307a9621b9989b3719"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.get_D(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#272-295) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.get_D(uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L272-L295) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 272,
                  "endLine": 295
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4f6f9ae859990d08a37c892e0ec4e63ba87b28968fad48a035fa9109cc5d228d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip8.beanstalkFarmsBudget (contracts/beanstalk/init/InitBip8.sol#24) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip8.beanstalkFarmsBudget](contracts/beanstalk/init/InitBip8.sol#L24) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip8.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4f9b6770674f1b88c24c9da1d5574376a82cb202ea405e5ced9084b390365541"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibBytes.packAddressAndStem(address,int96)._address (contracts/libraries/LibBytes.sol#76) is not in mixedCase\n",
            "markdown": "Parameter [LibBytes.packAddressAndStem(address,int96)._address](contracts/libraries/LibBytes.sol#L76) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4fccde9c8514f4a909a4f2b03aeffaf0dba56c720533130c335daa5350522151"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.get_D(uint256[2],uint256)._a (contracts/mocks/curve/MockMeta3Curve.sol#428) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.get_D(uint256[2],uint256)._a](contracts/mocks/curve/MockMeta3Curve.sol#L428) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 428,
                  "endLine": 428
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "50c1945df24db3db5e9f696e8f348a8b55f7c40642aeca5fe6021e36ed3bef86"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)._j_ (contracts/mocks/curve/MockMeta3Curve.sol#173) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)._j_](contracts/mocks/curve/MockMeta3Curve.sol#L173) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 173,
                  "endLine": 173
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "515c3094461f984b260bd1c7c50053614445a475e0ecd3b10d47fd3bbb3acac6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable MockMeta3Curve.price_cumulative_last (contracts/mocks/curve/MockMeta3Curve.sol#58) is not in mixedCase\n",
            "markdown": "Variable [MockMeta3Curve.price_cumulative_last](contracts/mocks/curve/MockMeta3Curve.sol#L58) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5262a82d96a10b931fd7036c12ed1266067d96fe78ca9a10f8b968b3b3539424"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function Listing.__fillListingV2(address,Listing.PodListing,bytes,uint256,uint256) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#205-230) is not in mixedCase\n",
            "markdown": "Function [Listing.__fillListingV2(address,Listing.PodListing,bytes,uint256,uint256)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L205-L230) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Listing.sol"
                },
                "region": {
                  "startLine": 205,
                  "endLine": 230
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "538ab47eba08894c4c56a3b64f1d076c2f695497c3f783b38146d0c8de4ce3e4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockBlockBasefee.block_basefee() (contracts/mocks/MockBlockBasefee.sol#18-20) is not in mixedCase\n",
            "markdown": "Function [MockBlockBasefee.block_basefee()](contracts/mocks/MockBlockBasefee.sol#L18-L20) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockBlockBasefee.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "559d519fe57072d712074cbf3d6a573528705ce3e7956dcda3ea624a821d0c6a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function OwnableUpgradeable.__Ownable_init() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#27-30) is not in mixedCase\n",
            "markdown": "Function [OwnableUpgradeable.__Ownable_init()](node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#L27-L30) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "564a84db84ff90549701d9e3401970ecd35bb55e38a0ae2758178a34b03f99e8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function LibSilo.__mow(address,address) (contracts/libraries/Silo/LibSilo.sol#352-382) is not in mixedCase\n",
            "markdown": "Function [LibSilo.__mow(address,address)](contracts/libraries/Silo/LibSilo.sol#L352-L382) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Silo/LibSilo.sol"
                },
                "region": {
                  "startLine": 352,
                  "endLine": 382
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "56d6049f516a4ab4672dbfd53c4edfd96b58a0f199f9123fadd42240134cba75"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256)._i_ (contracts/mocks/curve/MockMeta3Curve.sol#163) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.exchange(int128,int128,uint256,uint256)._i_](contracts/mocks/curve/MockMeta3Curve.sol#L163) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 163
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "56ebaf25e6c27a1b9ffe719f6031f10a4000610073aa580a58ff9e8d018d132a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool4R.remove_liquidity(uint256,uint256[4],address)._min_amounts (contracts/interfaces/ICurve.sol#47) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool4R.remove_liquidity(uint256,uint256[4],address)._min_amounts](contracts/interfaces/ICurve.sol#L47) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "572b940ede2566f61a0cafaf35963a105b43a39071c8bcbec847e615f557deb9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function Fertilizer1155.__doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes) (contracts/tokens/Fertilizer/Fertilizer1155.sol#121-142) is not in mixedCase\n",
            "markdown": "Function [Fertilizer1155.__doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes)](contracts/tokens/Fertilizer/Fertilizer1155.sol#L121-L142) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer1155.sol"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 142
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "59f62095172c58beee61e313e318086ff2d10d8f31b07acc88d08764f53aa82c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.calc_withdraw_one_coin(uint256,int128) (contracts/interfaces/ICurve.sol#16) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.calc_withdraw_one_coin(uint256,int128)](contracts/interfaces/ICurve.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5a0b7922ed895633fb29e872932e139591f7681895cc84b609647235c7c7449c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.addFunction(LibDiamond.DiamondStorage,bytes4,uint96,address)._selectorPosition (contracts/libraries/LibDiamond.sol#176) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.addFunction(LibDiamond.DiamondStorage,bytes4,uint96,address)._selectorPosition](contracts/libraries/LibDiamond.sol#L176) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5c4ffb533815abf157105cc649c2add35be4c3f8eb8783953ecf99c99f56c8ba"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.init(address,address)._token2 (contracts/mocks/curve/MockPlainCurve.sol#54) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.init(address,address)._token2](contracts/mocks/curve/MockPlainCurve.sol#L54) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5dfdfff8e4bdf3671920be82d27cee531686e75936a79cc44d68e3dced5f2345"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolR.remove_liquidity_one_coin(uint256,int128,uint256,address).min_amount (contracts/interfaces/ICurve.sol#30) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolR.remove_liquidity_one_coin(uint256,int128,uint256,address).min_amount](contracts/interfaces/ICurve.sol#L30) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5e0b55fac078611d77316e73c8214abbcb5f55c09a5d1e0f9346837f3003cafe"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.get_D_mem(uint256[2],uint256[2],uint256)._amp (contracts/mocks/curve/MockPlainCurve.sol#356) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.get_D_mem(uint256[2],uint256[2],uint256)._amp](contracts/mocks/curve/MockPlainCurve.sol#L356) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 356,
                  "endLine": 356
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5e1a49bfc6484c8fd517922a46924c96cad8d1d01a25268d108b83c1854287b6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePoolNoReturn.remove_liquidity_one_coin(uint256,uint256,uint256) (contracts/interfaces/ICurve.sol#73) is not in mixedCase\n",
            "markdown": "Function [ICurvePoolNoReturn.remove_liquidity_one_coin(uint256,uint256,uint256)](contracts/interfaces/ICurve.sol#L73) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5f26d15a057534816a09e5eb675fd5b32f025ae6c088531901d052ce0c747b8a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip1.developmentBudget (contracts/beanstalk/init/InitBip1.sol#19) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip1.developmentBudget](contracts/beanstalk/init/InitBip1.sol#L19) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip1.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6015f6d99297c897e0912cfc06811dd86f2c1cdd6710e007e85e09ffc7643782"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.init(address,address,address).base_pool (contracts/mocks/curve/MockMeta3Curve.sol#71) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.init(address,address,address).base_pool](contracts/mocks/curve/MockMeta3Curve.sol#L71) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "61897d46ee316e13b1675d139a3c5f9eb63d78b2c300af761dc8ccbb75144123"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IMockCurvePool.calc_withdraw_one_coin(uint256,int128)._token_amount (contracts/mocks/curve/MockMeta3Curve.sol#30) is not in mixedCase\n",
            "markdown": "Parameter [IMockCurvePool.calc_withdraw_one_coin(uint256,int128)._token_amount](contracts/mocks/curve/MockMeta3Curve.sol#L30) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "61b173d6479b8e459b77a454552397445f2d4409205becddb04b0f093f22af12"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool2R.remove_liquidity_imbalance(uint256[2],uint256,address)._max_burn_amount (contracts/interfaces/ICurve.sol#36) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool2R.remove_liquidity_imbalance(uint256[2],uint256,address)._max_burn_amount](contracts/interfaces/ICurve.sol#L36) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "61f83500203d557043e37ae5336e335820d8d4f32825c4dd0d1927f52d0c371a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip22.beanstalkFarmsBudget (contracts/beanstalk/init/InitBip22.sol#18) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip22.beanstalkFarmsBudget](contracts/beanstalk/init/InitBip22.sol#L18) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip22.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "636c7536789de9917ea21aed2adebcf8c95cf37a4cc0f441335bfdc495847b0d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable OwnableUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#74) is not in mixedCase\n",
            "markdown": "Variable [OwnableUpgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#L74) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "64595b3b974ce422ded6f4c3e75f4b8f263d80fe654b483274d85ea78d93515d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolNoReturn128.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/interfaces/ICurve.sol#78) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolNoReturn128.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount](contracts/interfaces/ICurve.sol#L78) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "648f49a7f76f70b06209f97fca3bf77ed9813aea5e3abcae295e9e9261d931fb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockCurveFactory.get_coins(address) (contracts/mocks/curve/MockCurveFactory.sol#36-39) is not in mixedCase\n",
            "markdown": "Function [MockCurveFactory.get_coins(address)](contracts/mocks/curve/MockCurveFactory.sol#L36-L39) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "64ba8087c48bccbb27e451317b3c2efa77fbd9d623aa713a9b34e9d9cc1f5c9d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.add_liquidity(uint256[2],uint256) (contracts/interfaces/ICurve.sol#9) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.add_liquidity(uint256[2],uint256)](contracts/interfaces/ICurve.sol#L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "65245ecae3c60673d728b5ff4b79c74b7f2b62314ae9c1715887e86adae0f7a9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function Fertilizer1155.__doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes) (contracts/tokens/Fertilizer/Fertilizer1155.sol#100-119) is not in mixedCase\n",
            "markdown": "Function [Fertilizer1155.__doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes)](contracts/tokens/Fertilizer/Fertilizer1155.sol#L100-L119) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer1155.sol"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 119
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6580e4a8e47b94a73f2632b6710e3d52462ac815a0d5bae92c0fbcd844f9b298"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.set_balances(uint256[2])._balances (contracts/mocks/curve/MockMeta3Curve.sol#101) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.set_balances(uint256[2])._balances](contracts/mocks/curve/MockMeta3Curve.sol#L101) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "65e4ae97a5770354433d11a8d7bbbce318f99b322a48a1e31944365b9c9c8400"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.add_liquidity(uint256[2],uint256)._min_mint_amount (contracts/mocks/curve/MockMeta3Curve.sol#205) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.add_liquidity(uint256[2],uint256)._min_mint_amount](contracts/mocks/curve/MockMeta3Curve.sol#L205) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 205,
                  "endLine": 205
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "67e2dad55ba80c187115190b43d908522c674a4181d6b11566c2b3907d612bc7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.enforceHasContractCode(address,string)._errorMessage (contracts/libraries/LibDiamond.sol#234) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.enforceHasContractCode(address,string)._errorMessage](contracts/libraries/LibDiamond.sol#L234) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 234
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "69b77c31d5e92fa9c16ffe3247b73c97b4f36fc0ab8a16aa6f94dc7d617cc32c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockCurveFactory.set_coins(address,address[4])._coins (contracts/mocks/curve/MockCurveFactory.sol#27) is not in mixedCase\n",
            "markdown": "Parameter [MockCurveFactory.set_coins(address,address[4])._coins](contracts/mocks/curve/MockCurveFactory.sol#L27) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6ab7b9e52b8be13913c986a97dc6893f7a32af8c2c596d4cfa2fdc98b71da7eb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable EIP712._TYPE_HASH (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#33) is not in mixedCase\n",
            "markdown": "Variable [EIP712._TYPE_HASH](node_modules/@openzeppelin/contracts/drafts/EIP712.sol#L33) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/drafts/EIP712.sol"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6be82984523d5470fd96feaf305daa098dfccddbff02f47c7369a681372e36e6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function Fertilizer1155.__asSingletonArray(uint256) (contracts/tokens/Fertilizer/Fertilizer1155.sol#144-149) is not in mixedCase\n",
            "markdown": "Function [Fertilizer1155.__asSingletonArray(uint256)](contracts/tokens/Fertilizer/Fertilizer1155.sol#L144-L149) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Fertilizer1155.sol"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 149
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6c4f9f6ebb0e4738af952527e178d65065583fc4893804622e888e9481e730fb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.calc_withdraw_one_coin(uint256,int128)._burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#418) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.calc_withdraw_one_coin(uint256,int128)._burn_amount](contracts/mocks/curve/MockMeta3Curve.sol#L418) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 418,
                  "endLine": 418
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6c76866718f02508b371eb10e617ddbc5be952fc08f9b46fbe4a7d55c392f9b3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.removeFunction(LibDiamond.DiamondStorage,address,bytes4)._selector (contracts/libraries/LibDiamond.sol#182) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.removeFunction(LibDiamond.DiamondStorage,address,bytes4)._selector](contracts/libraries/LibDiamond.sol#L182) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6c96aa30ab6bbe4bdf4271310b6a35cde83147a9c80215baeafa5546dd4482a6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant LibCurve.j (contracts/libraries/Curve/LibCurve.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [LibCurve.j](contracts/libraries/Curve/LibCurve.sol#L20) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6d6bee1e6e672ab5acb643a84eb5ef317dafcd2092e283b834867feb5fae5e25"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool4R.add_liquidity(uint256[4],uint256,address).min_mint_amount (contracts/interfaces/ICurve.sol#46) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool4R.add_liquidity(uint256[4],uint256,address).min_mint_amount](contracts/interfaces/ICurve.sol#L46) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6e653b839ce5ca2a8ff4a9d28a0441729b2477f0a3b8d95aa712d1fac0f71f4e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity(uint256,uint256[2])._burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#267) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity(uint256,uint256[2])._burn_amount](contracts/mocks/curve/MockMeta3Curve.sol#L267) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "709480d343bbebca37e3890e4985d4beedbe1d59ccb4e21b482ed456d8f8fd80"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockCurveFactory.set_underlying_coins(address,address[8])._underlying_coins (contracts/mocks/curve/MockCurveFactory.sol#32) is not in mixedCase\n",
            "markdown": "Parameter [MockCurveFactory.set_underlying_coins(address,address[8])._underlying_coins](contracts/mocks/curve/MockCurveFactory.sol#L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "716aa45b43d3d3e9c6bb530524efd4e8d44f06a76cc710b262e204d4ad1a86f8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.get_balances() (contracts/interfaces/ICurve.sol#7) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.get_balances()](contracts/interfaces/ICurve.sol#L7) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "71e2c5e7d68feafca7097e518753f98f9046fa7970eca95f4f85826893b91553"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function Internalizer.__Internallize_init(string) (contracts/tokens/Fertilizer/Internalizer.sol#31-35) is not in mixedCase\n",
            "markdown": "Function [Internalizer.__Internallize_init(string)](contracts/tokens/Fertilizer/Internalizer.sol#L31-L35) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Internalizer.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "73233754bd4e963016db87d401316008293c2d3fbe6901dca0b6c7f3681b503b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool.exchange(int128,int128,uint256,uint256).min_dy (contracts/interfaces/ICurve.sol#17) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool.exchange(int128,int128,uint256,uint256).min_dy](contracts/interfaces/ICurve.sol#L17) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "73283a834599cf888b02d05e936d616140fb23daa7b1606563276c2590da5638"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockCurveFactory.get_coins(address)._pool (contracts/mocks/curve/MockCurveFactory.sol#36) is not in mixedCase\n",
            "markdown": "Parameter [MockCurveFactory.get_coins(address)._pool](contracts/mocks/curve/MockCurveFactory.sol#L36) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7359991b35e0d1bbc8ef372e49e2ee833a43a85f4ca44bb32e9cc797efaa8b5a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ApprovalFacet.isApprovedForAll(address,address)._operator (contracts/beanstalk/silo/ApprovalFacet.sol#197) is not in mixedCase\n",
            "markdown": "Parameter [ApprovalFacet.isApprovedForAll(address,address)._operator](contracts/beanstalk/silo/ApprovalFacet.sol#L197) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/ApprovalFacet.sol"
                },
                "region": {
                  "startLine": 197,
                  "endLine": 197
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "73cc6912cfa2d849dcd19ad21437f6d77b5f42d528de72f7a30177d29aec391b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool2R.add_liquidity(uint256[2],uint256,address).min_mint_amount (contracts/interfaces/ICurve.sol#34) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool2R.add_liquidity(uint256[2],uint256,address).min_mint_amount](contracts/interfaces/ICurve.sol#L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7410d5abb5859ece07e76c49338fa2f13f7228b92b7eea6e37b27ca1c4b17177"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable MockCurveFactory.underlying_coins (contracts/mocks/curve/MockCurveFactory.sol#25) is not in mixedCase\n",
            "markdown": "Variable [MockCurveFactory.underlying_coins](contracts/mocks/curve/MockCurveFactory.sol#L25) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7564715ce6bcee2b4fd5b14e504617f567f96b3354aca3d244cb73c0d021c657"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256)._burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#354) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256)._burn_amount](contracts/mocks/curve/MockMeta3Curve.sol#L354) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 354,
                  "endLine": 354
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "761e609605440a732c4e6a3acc2f62864c0b7c4592b224ca55f7869639d9d7ad"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveZap.calc_token_amount(address,uint256[4],bool) (contracts/interfaces/ICurve.sol#24) is not in mixedCase\n",
            "markdown": "Function [ICurveZap.calc_token_amount(address,uint256[4],bool)](contracts/interfaces/ICurve.sol#L24) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7669f2c3577db71136646955371073b4aa135f8af39d809202e2d592ec173639"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool3R.remove_liquidity(uint256,uint256[3],address)._min_amounts (contracts/interfaces/ICurve.sol#41) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool3R.remove_liquidity(uint256,uint256[3],address)._min_amounts](contracts/interfaces/ICurve.sol#L41) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "76820bff9f6e1d09d83883525faea0563ea42880cc252d46cf9eeefcead8d413"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.set_virtual_price(uint256)._virtual_price (contracts/mocks/curve/MockMeta3Curve.sol#110) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.set_virtual_price(uint256)._virtual_price](contracts/mocks/curve/MockMeta3Curve.sol#L110) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "78324b08af03fe41a6191f77a76201215a1e2383ec857d9d3cc1a6682c00c88a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveZap.add_liquidity(address,uint256[4],uint256) (contracts/interfaces/ICurve.sol#23) is not in mixedCase\n",
            "markdown": "Function [ICurveZap.add_liquidity(address,uint256[4],uint256)](contracts/interfaces/ICurve.sol#L23) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "78960f251873cf8eab74eabe93d0b47d30915fb37694f7e9eb6918a1596c94b5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.diamondCut(IDiamondCut.FacetCut[],address,bytes)._diamondCut (contracts/libraries/LibDiamond.sol#100) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.diamondCut(IDiamondCut.FacetCut[],address,bytes)._diamondCut](contracts/libraries/LibDiamond.sol#L100) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "78e59305d877687ea1a96b6fafe2f2d104e60661fb4cf6a4414c394f96923f48"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve._xp_mem(uint256[2],uint256[2])._balances (contracts/mocks/curve/MockMeta3Curve.sol#422) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve._xp_mem(uint256[2],uint256[2])._balances](contracts/mocks/curve/MockMeta3Curve.sol#L422) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 422,
                  "endLine": 422
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "79113c421cd00646fe29eaf75bdddfb5699b02a644dc2f5d2f95a2eee70e312e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool2R.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/interfaces/ICurve.sol#36) is not in mixedCase\n",
            "markdown": "Function [ICurvePool2R.remove_liquidity_imbalance(uint256[2],uint256,address)](contracts/interfaces/ICurve.sol#L36) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7a9d6f7300c46d713d1afb4bd99a351829270d0353fd61be2a1f1fc883cbd5b5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.addDiamondFunctions(address,address)._diamondLoupeFacet (contracts/libraries/LibDiamond.sol#78) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.addDiamondFunctions(address,address)._diamondLoupeFacet](contracts/libraries/LibDiamond.sol#L78) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7b101608ce17c3adc63f8e8f655745827d0e64ddde53efe0f350bb57076fa81f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])._i_ (contracts/mocks/curve/MockMeta3Curve.sol#386) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])._i_](contracts/mocks/curve/MockMeta3Curve.sol#L386) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 386,
                  "endLine": 386
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7b9162724d1ac72975191141ef60d4199b0dd5ace14adbfa94c9ecd7addfa5bc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockSeasonFacet.setSunriseBlock(uint256)._block (contracts/mocks/mockFacets/MockSeasonFacet.sol#256) is not in mixedCase\n",
            "markdown": "Parameter [MockSeasonFacet.setSunriseBlock(uint256)._block](contracts/mocks/mockFacets/MockSeasonFacet.sol#L256) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 256,
                  "endLine": 256
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7be030b0bb92b12c1999a84ffcc526a86572e0696a56c9791c4a141281ffecca"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip8.beanSprout (contracts/beanstalk/init/InitBip8.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip8.beanSprout](contracts/beanstalk/init/InitBip8.sol#L20) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip8.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7c771dae26c1541fcb9ddf7df4ab917cb8c3acb31029a0a209d876cade9e2c50"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.reset_cumulative() (contracts/mocks/curve/MockPlainCurve.sol#113-116) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.reset_cumulative()](contracts/mocks/curve/MockPlainCurve.sol#L113-L116) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 116
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7d5825b057133d1d9b4d515ef59516da221a20f454b56afd987dad79ec0e2ed5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool3R.remove_liquidity(uint256,uint256[3],address)._burn_amount (contracts/interfaces/ICurve.sol#41) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool3R.remove_liquidity(uint256,uint256[3],address)._burn_amount](contracts/interfaces/ICurve.sol#L41) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7d872f6f3dac5226fb6449200185ce2b68ef243b78bdd33a9cc120dae84f4865"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMeta3Curve.get_previous_balances() (contracts/libraries/Curve/LibMetaCurve.sol#15) is not in mixedCase\n",
            "markdown": "Function [IMeta3Curve.get_previous_balances()](contracts/libraries/Curve/LibMetaCurve.sol#L15) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibMetaCurve.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7dc75c27a7ece7db034c7747de7d732699ac8e340cedf8185f2d98c820f63cf9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibBytes.toUint32(bytes,uint256)._bytes (contracts/libraries/LibBytes.sol#34) is not in mixedCase\n",
            "markdown": "Parameter [LibBytes.toUint32(bytes,uint256)._bytes](contracts/libraries/LibBytes.sol#L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7de86d171ed664a802a56d71d3014136bafa4d18502b034a0681db8ca3e5c66d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip5.payee (contracts/beanstalk/init/InitBip5.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip5.payee](contracts/beanstalk/init/InitBip5.sol#L20) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip5.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7e2da55283d26d1ce21b4a7f70dea7ad8a8f30ad842993fb04adaca5eeced54d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter FertilizerFacet.getHumidity(uint128)._s (contracts/beanstalk/barn/FertilizerFacet.sol#125) is not in mixedCase\n",
            "markdown": "Parameter [FertilizerFacet.getHumidity(uint128)._s](contracts/beanstalk/barn/FertilizerFacet.sol#L125) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/barn/FertilizerFacet.sol"
                },
                "region": {
                  "startLine": 125,
                  "endLine": 125
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7e4b8da1ef1e04fdcba2bdf2c47ba00462320d724443f2517011d208311ced64"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2])._i_ (contracts/mocks/curve/MockPlainCurve.sol#219) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2])._i_](contracts/mocks/curve/MockPlainCurve.sol#L219) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 219
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "80d849e2b13c1c35c1972bb10402304f1c94f1b474b8ac10dc3ea9d54534cf41"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant CurvePrice.j (contracts/ecosystem/price/CurvePrice.sol#33) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [CurvePrice.j](contracts/ecosystem/price/CurvePrice.sol#L33) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ecosystem/price/CurvePrice.sol"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8181ffd8d6900e15ce0f3dd3c7496c9dd563d3a8eb43c507b9a3f54301befe28"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.add_liquidity(uint256[2],uint256)._amounts (contracts/mocks/curve/MockPlainCurve.sol#137) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.add_liquidity(uint256[2],uint256)._amounts](contracts/mocks/curve/MockPlainCurve.sol#L137) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 137
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "823e1209d3484df14fdf0dc398825328e83b4f304ca1ab544a63aab04fee8746"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveZap.calc_token_amount(address,uint256[4],bool)._is_deposit (contracts/interfaces/ICurve.sol#24) is not in mixedCase\n",
            "markdown": "Parameter [ICurveZap.calc_token_amount(address,uint256[4],bool)._is_deposit](contracts/interfaces/ICurve.sol#L24) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "82804a3b431fe545d2239ba1b895367c6502e0b65ceff170fecffda35143c4f5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.A_precise() (contracts/interfaces/ICurve.sol#6) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.A_precise()](contracts/interfaces/ICurve.sol#L6) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "828f68c439cfe30a3f1841ff8e48f0f37858a624712e8059c4ec81d51f594627"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool2R.remove_liquidity(uint256,uint256[2],address)._min_amounts (contracts/interfaces/ICurve.sol#35) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool2R.remove_liquidity(uint256,uint256[2],address)._min_amounts](contracts/interfaces/ICurve.sol#L35) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "83146a8ae90bf4bf3b3b82475c89ada962811662fc91f2c3f9cb856a16165981"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.set_balances(uint256[2])._balances (contracts/mocks/curve/MockPlainCurve.sol#87) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.set_balances(uint256[2])._balances](contracts/mocks/curve/MockPlainCurve.sol#L87) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "833382fdfffb4a60d56b9178f22bfd2d72285bcc0384e108af99fd22a6d3a8b7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#39-41) is not in mixedCase\n",
            "markdown": "Function [ReentrancyGuardUpgradeable.__ReentrancyGuard_init()](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L39-L41) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8358359e33b12b973b39646749b14bc461ec4795e26f2669ed0c3b687a34fd7c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC165Upgradeable.__ERC165_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#29-33) is not in mixedCase\n",
            "markdown": "Function [ERC165Upgradeable.__ERC165_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#L29-L33) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "85d4e6d503145e70d4f27b51c03c2aecc7efa120329a4cf27b34d33cd9a2c942"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])._burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#386) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])._burn_amount](contracts/mocks/curve/MockMeta3Curve.sol#L386) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 386,
                  "endLine": 386
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "85d62bdc5ccd4fe7c9f7eb5cbe514ac31670fd7224445e1337ecc453eb654f36"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ContextUpgradeable.__Context_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#21-22) is not in mixedCase\n",
            "markdown": "Function [ContextUpgradeable.__Context_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L21-L22) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8629c89abc9e568d22212182eb038287fc4f676ff34add41294173d644b25bcb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.add_liquidity(uint256[2],uint256,address)._receiver (contracts/mocks/curve/MockMeta3Curve.sol#209) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.add_liquidity(uint256[2],uint256,address)._receiver](contracts/mocks/curve/MockMeta3Curve.sol#L209) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 209
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "875ef7e29742aa8de39850f358e10a7dcfa5fa2b2363f35f0d7511ecff25e0b2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMockCurvePool.get_virtual_price() (contracts/mocks/curve/MockMeta3Curve.sol#28) is not in mixedCase\n",
            "markdown": "Function [IMockCurvePool.get_virtual_price()](contracts/mocks/curve/MockMeta3Curve.sol#L28) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8818df136fe3587f1b99e9b4a97e5fb0a452ffa28ef4f1cfe3458f4a8e2aae47"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockSiloFacet.mockUnripeLPDeposit(uint256,uint32,uint256,uint256)._s (contracts/mocks/mockFacets/MockSiloFacet.sol#40) is not in mixedCase\n",
            "markdown": "Parameter [MockSiloFacet.mockUnripeLPDeposit(uint256,uint32,uint256,uint256)._s](contracts/mocks/mockFacets/MockSiloFacet.sol#L40) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "884dbf1a208b9125bd21f0683c5d0716cf62230b021e271a0802433b35ce14a2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)._i_ (contracts/mocks/curve/MockMeta3Curve.sol#172) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)._i_](contracts/mocks/curve/MockMeta3Curve.sol#L172) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 172,
                  "endLine": 172
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "89212db4d8113e20479c19a37eb9c71d3a7e0de44e347f9df73429c2062ddce2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool.add_liquidity(uint256[2],uint256).min_mint_amount (contracts/interfaces/ICurve.sol#9) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool.add_liquidity(uint256[2],uint256).min_mint_amount](contracts/interfaces/ICurve.sol#L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "89bf16477de7db77388b42946b5d8dcce1f4e22ef240ad0bbe7e8fdf55b81ec8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockCurveZap.add_liquidity(address,uint256[4],uint256) (contracts/mocks/curve/MockCurveZap.sol#26-32) is not in mixedCase\n",
            "markdown": "Function [MockCurveZap.add_liquidity(address,uint256[4],uint256)](contracts/mocks/curve/MockCurveZap.sol#L26-L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveZap.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "89c2eb939c551aed803f97306604711d8109919820bb0aaa63ee6a4f90d37d67"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable MockMeta3Curve.rate_multiplier (contracts/mocks/curve/MockMeta3Curve.sol#63) is not in mixedCase\n",
            "markdown": "Variable [MockMeta3Curve.rate_multiplier](contracts/mocks/curve/MockMeta3Curve.sol#L63) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8a3e1a4b74b9417250af7283fa998656eb0f962cf433b0f4cfc223ab55297fee"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.calc_token_amount(uint256[2],bool)._amounts (contracts/mocks/curve/MockPlainCurve.sol#341) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.calc_token_amount(uint256[2],bool)._amounts](contracts/mocks/curve/MockPlainCurve.sol#L341) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 341,
                  "endLine": 341
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8b40f5f868eefe71c9215e300f16f8ff4a55eaff3f5ffcaa9af1229978317500"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.calc_token_amount(uint256[2],bool) (contracts/mocks/curve/MockMeta3Curve.sol#534-547) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.calc_token_amount(uint256[2],bool)](contracts/mocks/curve/MockMeta3Curve.sol#L534-L547) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 534,
                  "endLine": 547
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8c508240add04ffd7eaeae1eef99b5bb2c8ae33d4a5499cc7c06251e642ee7e6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IMockCurvePool.set_virtual_price(uint256)._virtual_price (contracts/mocks/curve/MockMeta3Curve.sol#34) is not in mixedCase\n",
            "markdown": "Parameter [IMockCurvePool.set_virtual_price(uint256)._virtual_price](contracts/mocks/curve/MockMeta3Curve.sol#L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8cbe684f262152aa2c954e122224a3a0d809f39b84b782918509d777b1c8f184"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.get_D_mem(uint256[2],uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#356-359) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.get_D_mem(uint256[2],uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L356-L359) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 356,
                  "endLine": 359
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8d3a6740359aab26ac3f620d35ca47d2c264e27c8af6863f4c1e8fb1b4fdfd3e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)._burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#368) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)._burn_amount](contracts/mocks/curve/MockMeta3Curve.sol#L368) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 368,
                  "endLine": 368
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8d9eaa6b72e99ca71e6b4d566d86d529b5e6ba47f8bb3a6ad9a0f7c453e9f647"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.calc_token_amount(uint256[2],bool) (contracts/interfaces/ICurve.sol#15) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.calc_token_amount(uint256[2],bool)](contracts/interfaces/ICurve.sol#L15) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8f7f5d340e7ee4f99f5b06b5f4ca2ceb6d8169fc2954425c9059925b18f62d53"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.calc_token_amount(uint256[2],bool)._is_deposit (contracts/mocks/curve/MockPlainCurve.sol#341) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.calc_token_amount(uint256[2],bool)._is_deposit](contracts/mocks/curve/MockPlainCurve.sol#L341) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 341,
                  "endLine": 341
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "90916808b69543ea0bd9bf2fbcc1fcf18e4dc470f187930a2d61714fe795ebe5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveZap.add_liquidity(address,uint256[4],uint256)._min_mint_amount (contracts/interfaces/ICurve.sol#23) is not in mixedCase\n",
            "markdown": "Parameter [ICurveZap.add_liquidity(address,uint256[4],uint256)._min_mint_amount](contracts/interfaces/ICurve.sol#L23) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "90fa2eb3aefefe8df83ddf000fcf060f1c323e838d4124e111f5530d51f8986d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMeta3Curve.get_virtual_price() (contracts/libraries/Curve/LibMetaCurve.sol#16) is not in mixedCase\n",
            "markdown": "Function [IMeta3Curve.get_virtual_price()](contracts/libraries/Curve/LibMetaCurve.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibMetaCurve.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9180df298a704221b871032c5cc0b9cc8199e6c454b24274b623f1fbdddf9964"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)._max_burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#304) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)._max_burn_amount](contracts/mocks/curve/MockMeta3Curve.sol#L304) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "92333055746a2d6cf297746d4797e7fff7ff36e5ac2b28f3f36c541308a43c88"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function UnripeFacet._getPenalizedUnderlying(address,uint256,uint256) (contracts/beanstalk/barn/UnripeFacet.sol#139-147) is not in mixedCase\n",
            "markdown": "Function [UnripeFacet._getPenalizedUnderlying(address,uint256,uint256)](contracts/beanstalk/barn/UnripeFacet.sol#L139-L147) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/barn/UnripeFacet.sol"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 147
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "92401439477f80d8583d5f9cd380d4e7f910d4a613dbd82f83f382925ed9724b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.replaceFunctions(address,bytes4[])._facetAddress (contracts/libraries/LibDiamond.sol#138) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.replaceFunctions(address,bytes4[])._facetAddress](contracts/libraries/LibDiamond.sol#L138) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 138,
                  "endLine": 138
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9536b897a7d1e6625a70f1e46c7ee62c6fed3edc2da517c587defd5bcd60588e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ERC1155Upgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#421) is not in mixedCase\n",
            "markdown": "Variable [ERC1155Upgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L421) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol"
                },
                "region": {
                  "startLine": 421,
                  "endLine": 421
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9586f4970326a0dd8fa067aaa684ae7ee8c87542a879e729b4fb7313f1f1fec6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function C.UniV3EthUsdc() (contracts/C.sol#153-155) is not in mixedCase\n",
            "markdown": "Function [C.UniV3EthUsdc()](contracts/C.sol#L153-L155) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/C.sol"
                },
                "region": {
                  "startLine": 153,
                  "endLine": 155
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9596d39201c134c1fc61710ebee243a40bea44b57458c49251c6d63123874d69"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip23.beanSprout (contracts/beanstalk/init/InitBip23.sol#16-17) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip23.beanSprout](contracts/beanstalk/init/InitBip23.sol#L16-L17) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip23.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "95cb95047c155b5f9a3e790490c6f79a3490ea5c04d425da13cedef201758f8a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibBytes.toUint256(bytes,uint256)._start (contracts/libraries/LibBytes.sol#50) is not in mixedCase\n",
            "markdown": "Parameter [LibBytes.toUint256(bytes,uint256)._start](contracts/libraries/LibBytes.sol#L50) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "96fa946ee7e30fe7fb1d35a0bb68867222c0d0145161f2bde81bf8353c3d876d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.get_D_mem(uint256[2],uint256[2],uint256)._balances (contracts/mocks/curve/MockMeta3Curve.sol#549) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.get_D_mem(uint256[2],uint256[2],uint256)._balances](contracts/mocks/curve/MockMeta3Curve.sol#L549) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 549,
                  "endLine": 549
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9708518c5e79416868ab997e7e314d973d1289c2b1f7687def6bd8838f6897a9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable MockUniswapV3Pool.manual_sqrtPriceX96 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#108) is not in mixedCase\n",
            "markdown": "Variable [MockUniswapV3Pool.manual_sqrtPriceX96](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L108) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 108,
                  "endLine": 108
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "97b6b574cb188166b574d191440fb3b293ef89a142d9bd39d3928d4bdeca873c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ReentrancyGuardUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#67) is not in mixedCase\n",
            "markdown": "Variable [ReentrancyGuardUpgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#L67) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "986ae09dbfc7cd653b3ef951464dacdcf741b823cf0590804bd79e4641ef863a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable MockPlainCurve.timestamp_last (contracts/mocks/curve/MockPlainCurve.sol#40) is not in mixedCase\n",
            "markdown": "Variable [MockPlainCurve.timestamp_last](contracts/mocks/curve/MockPlainCurve.sol#L40) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "988f8c428ebdde47f0b6da38d1d21b492328f8bee5be0d2e285344325adafea6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT (contracts/tokens/ERC20/ERC20Permit.sol#32) is not in mixedCase\n",
            "markdown": "Variable [ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT](contracts/tokens/ERC20/ERC20Permit.sol#L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/ERC20/ERC20Permit.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "990853bbc0fd69516fdff053b807fb18ef8bb77731b845eb103d0c55cb82e94f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockSiloFacet.__mowLegacy(address) (contracts/mocks/mockFacets/MockSiloFacet.sol#113-117) is not in mixedCase\n",
            "markdown": "Function [MockSiloFacet.__mowLegacy(address)](contracts/mocks/mockFacets/MockSiloFacet.sol#L113-L117) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "991855a81681da8dd1df86bf22f49f30ca9418c268cdbc9f8c45f846f19eefd4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool4R.remove_liquidity_imbalance(uint256[4],uint256,address) (contracts/interfaces/ICurve.sol#48) is not in mixedCase\n",
            "markdown": "Function [ICurvePool4R.remove_liquidity_imbalance(uint256[4],uint256,address)](contracts/interfaces/ICurve.sol#L48) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a222003b0bc7778077811174fe32c044a11e29a6c3208aa8e8be461623bdab3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol#50) is not in mixedCase\n",
            "markdown": "Function [IERC20Permit.DOMAIN_SEPARATOR()](node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol#L50) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a77c79a6cf40e2f151723e49ba63d30100a56d0f72688e58cdf4a550a6ff843"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.add_liquidity(uint256[2],uint256)._amounts (contracts/mocks/curve/MockMeta3Curve.sol#205) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.add_liquidity(uint256[2],uint256)._amounts](contracts/mocks/curve/MockMeta3Curve.sol#L205) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 205,
                  "endLine": 205
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9ace1a4f21cc5d44e60ec5ea3407b92e0acad95a9d065dbe6d4cd3243b6216d8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Depot.beanstalk (contracts/depot/Depot.sol#28-29) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Depot.beanstalk](contracts/depot/Depot.sol#L28-L29) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/depot/Depot.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9b94a8e6b3387235c11bc577935d13ebdc926b3f6d11f9d84e89d5fa38511136"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockCurveFactory.set_coins(address,address[4])._pool (contracts/mocks/curve/MockCurveFactory.sol#27) is not in mixedCase\n",
            "markdown": "Parameter [MockCurveFactory.set_coins(address,address[4])._pool](contracts/mocks/curve/MockCurveFactory.sol#L27) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9be8648184a9f9aea31f37e6a4a0a07acd0b4f848f12c20e020d9451c54d9c4d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.set_virtual_price(uint256)._virtual_price (contracts/mocks/curve/MockPlainCurve.sol#96) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.set_virtual_price(uint256)._virtual_price](contracts/mocks/curve/MockPlainCurve.sol#L96) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9edc153678e253f57b6a88f042b527ebb78a75db12c18c73f6d076d90d7fa85e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.set_supply(uint256) (contracts/mocks/curve/MockPlainCurve.sol#92-94) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.set_supply(uint256)](contracts/mocks/curve/MockPlainCurve.sol#L92-L94) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 94
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a0dbe36624757eca3e1eb591284f39ba8a7acd91d51b0bb13f479d9951aaddba"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IMockCurvePool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/mocks/curve/MockMeta3Curve.sol#24) is not in mixedCase\n",
            "markdown": "Parameter [IMockCurvePool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount](contracts/mocks/curve/MockMeta3Curve.sol#L24) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a3a621eafa76ac756a7a306976eb2d6488cc99d20d9d27c75ed11a9b2b62e754"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.reset_cumulative() (contracts/mocks/curve/MockMeta3Curve.sol#127-130) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.reset_cumulative()](contracts/mocks/curve/MockMeta3Curve.sol#L127-L130) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 130
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a3c41119e205fec1f5327fa966e4a7b0fa36b309824d362a8704d92c1ba186db"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMockCurvePool.set_supply(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#37) is not in mixedCase\n",
            "markdown": "Function [IMockCurvePool.set_supply(uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L37) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a3ec12eec7a84174806d6a3f046361f6f8829d31399ea9dd2878aae472158d25"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256)._burn_amount (contracts/mocks/curve/MockPlainCurve.sol#202) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256)._burn_amount](contracts/mocks/curve/MockPlainCurve.sol#L202) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a46fdf4ce80c60bda3e3b45501c7b794baf439fd75a88d49e42219a880ed7814"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2])._balances (contracts/mocks/curve/MockPlainCurve.sol#219) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2])._balances](contracts/mocks/curve/MockPlainCurve.sol#L219) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 219
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a4aceddf703688c7aed223895cf219ab35536d62289d1e3301970f45abf56c7e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable Internalizer._balances (contracts/tokens/Fertilizer/Internalizer.sol#37) is not in mixedCase\n",
            "markdown": "Variable [Internalizer._balances](contracts/tokens/Fertilizer/Internalizer.sol#L37) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/Internalizer.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a5314802296773b39443ca7577e9ee08cf8340ef80e6fb9ebc48e70bd8c51e02"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.get_D_mem(uint256[2],uint256[2],uint256)._amp (contracts/mocks/curve/MockMeta3Curve.sol#549) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.get_D_mem(uint256[2],uint256[2],uint256)._amp](contracts/mocks/curve/MockMeta3Curve.sol#L549) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 549,
                  "endLine": 549
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a58951246d50252afd2c7338b975d2f5d579c5f21f87bca3f7c950a003d88ed9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockCurveFactory.get_underlying_coins(address)._pool (contracts/mocks/curve/MockCurveFactory.sol#40) is not in mixedCase\n",
            "markdown": "Parameter [MockCurveFactory.get_underlying_coins(address)._pool](contracts/mocks/curve/MockCurveFactory.sol#L40) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a613ecbb52ce6aab24056bf9fb7107d5ff7ca2ebe54e511793d5624a713d6a2a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.setContractOwner(address)._newOwner (contracts/libraries/LibDiamond.sol#53) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.setContractOwner(address)._newOwner](contracts/libraries/LibDiamond.sol#L53) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a6ca7090363f8ff26b27ae74776e382e7300f47d9c334f1130af7b187026807a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePoolNoReturn.remove_liquidity_imbalance(uint256[3],uint256) (contracts/interfaces/ICurve.sol#72) is not in mixedCase\n",
            "markdown": "Function [ICurvePoolNoReturn.remove_liquidity_imbalance(uint256[3],uint256)](contracts/interfaces/ICurve.sol#L72) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a9210afc77484a93bc0ef137120002e6695b6b31cd50f4654a7d64ec4bd82719"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable EIP712._CACHED_CHAIN_ID (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#29) is not in mixedCase\n",
            "markdown": "Variable [EIP712._CACHED_CHAIN_ID](node_modules/@openzeppelin/contracts/drafts/EIP712.sol#L29) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/drafts/EIP712.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a97e63161ef623acbdd63f7c538558da3533514f45901fc0f6063906a6894e7a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.set_A_precise(uint256)._a (contracts/mocks/curve/MockMeta3Curve.sol#97) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.set_A_precise(uint256)._a](contracts/mocks/curve/MockMeta3Curve.sol#L97) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aa128308f0114fc86784006cd0fb3321fef9165d71746e5c93f9eae0a3a5c8f9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable MockMeta3Curve.virtual_price (contracts/mocks/curve/MockMeta3Curve.sol#62) is not in mixedCase\n",
            "markdown": "Variable [MockMeta3Curve.virtual_price](contracts/mocks/curve/MockMeta3Curve.sol#L62) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aae411f688cff450ba46d6b870a2c48762039ca8acb92ad1926f6699d246e9d8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.exchange_underlying(int128,int128,uint256,uint256) (contracts/interfaces/ICurve.sol#18) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.exchange_underlying(int128,int128,uint256,uint256)](contracts/interfaces/ICurve.sol#L18) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ac7d4d814bf0ca1324f5793e9b378bcffa166c038b37bb930e32fab6c1fd9e29"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IBlockBasefee.block_basefee() (contracts/interfaces/IBlockBasefee.sol#7) is not in mixedCase\n",
            "markdown": "Function [IBlockBasefee.block_basefee()](contracts/interfaces/IBlockBasefee.sol#L7) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IBlockBasefee.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ac8ed87f66966df58257b6c046e180ff07fa3347357c326a446a7592883a8b6d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.diamondCut(IDiamondCut.FacetCut[],address,bytes)._calldata (contracts/libraries/LibDiamond.sol#102) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.diamondCut(IDiamondCut.FacetCut[],address,bytes)._calldata](contracts/libraries/LibDiamond.sol#L102) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "accdb00094731dd14d8aa3f834d5ec3cc860fa8d91640ea70638502ae6967f0a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable MockMeta3Curve.BASE_POOL (contracts/mocks/curve/MockMeta3Curve.sol#60) is not in mixedCase\n",
            "markdown": "Variable [MockMeta3Curve.BASE_POOL](contracts/mocks/curve/MockMeta3Curve.sol#L60) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "acdc15236b87002f87ee2d4bed8e515c39d06a23d3e07fee43953a7a127c03a8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256,address).min_dy (contracts/mocks/curve/MockMeta3Curve.sol#175) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.exchange(int128,int128,uint256,uint256,address).min_dy](contracts/mocks/curve/MockMeta3Curve.sol#L175) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 175
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad05b662c2a8bf2929dc95e4d80642999e556ef96e5291f8e95abc002013e6e6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable MockPlainCurve.rate_multipliers (contracts/mocks/curve/MockPlainCurve.sol#43) is not in mixedCase\n",
            "markdown": "Variable [MockPlainCurve.rate_multipliers](contracts/mocks/curve/MockPlainCurve.sol#L43) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad355af04f31a76688af301c5b589dc0000b4782683e4c9db15bc978c1710559"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMockCurvePool.calc_token_amount(uint256[2],bool) (contracts/mocks/curve/MockMeta3Curve.sol#29) is not in mixedCase\n",
            "markdown": "Function [IMockCurvePool.calc_token_amount(uint256[2],bool)](contracts/mocks/curve/MockMeta3Curve.sol#L29) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "adbe2b1573538729742eb72154e71432723b78fc8a994e147612c1e96440cb4a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256).A (contracts/mocks/curve/MockPlainCurve.sol#297) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256).A](contracts/mocks/curve/MockPlainCurve.sol#L297) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 297
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "adeb2fda2bd775e3a28caab74d0bed3d87d40e6193f4447c7c78311097c36e72"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC20Permit.DOMAIN_SEPARATOR() (contracts/tokens/ERC20/ERC20Permit.sol#76-78) is not in mixedCase\n",
            "markdown": "Function [ERC20Permit.DOMAIN_SEPARATOR()](contracts/tokens/ERC20/ERC20Permit.sol#L76-L78) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/ERC20/ERC20Permit.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ae3f36aabe9ce571b2d0bac868aa8ddd745117bd041ef8300b9798601ba580ca"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip7.bean (contracts/beanstalk/init/InitBip7.sol#17) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip7.bean](contracts/beanstalk/init/InitBip7.sol#L17) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip7.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b06796cf0b80d29336f01dcd2fde9bb7b307282b6baa58b1e39650ba18ca9501"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool3R.add_liquidity(uint256[3],uint256,address).min_mint_amount (contracts/interfaces/ICurve.sol#40) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool3R.add_liquidity(uint256[3],uint256,address).min_mint_amount](contracts/interfaces/ICurve.sol#L40) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b181a783621a04c7db7d1d9d18cdb370f8dd63eabbf04cfcb13b37782dd6f58b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256).A (contracts/mocks/curve/MockMeta3Curve.sol#453) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256).A](contracts/mocks/curve/MockMeta3Curve.sol#L453) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 453,
                  "endLine": 453
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b1ac015326dfdb458a2ec195ee7d979a0a4c2d099d41dd1f17f6781b39150238"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.get_virtual_price() (contracts/mocks/curve/MockMeta3Curve.sol#90-92) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.get_virtual_price()](contracts/mocks/curve/MockMeta3Curve.sol#L90-L92) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 92
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b1ae0348040b31a806b7b76a8cd720f949cbf0926961bb1ef035d1040a456fff"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibCurve.getY(uint256,uint256[2],uint256,uint256).D (contracts/libraries/Curve/LibCurve.sol#53) is not in mixedCase\n",
            "markdown": "Parameter [LibCurve.getY(uint256,uint256[2],uint256,uint256).D](contracts/libraries/Curve/LibCurve.sol#L53) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b23ea65a42d9b56213e88f4182cdefbc9a97f0723a8153c77d97027e2160b0bf"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.set_virtual_price(uint256) (contracts/mocks/curve/MockPlainCurve.sol#96-98) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.set_virtual_price(uint256)](contracts/mocks/curve/MockPlainCurve.sol#L96-L98) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 98
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b391137cabb67c5f27fdad34d643461cec35f223abf2d7cdaee154931a6c7345"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolNoReturn.remove_liquidity(uint256,uint256[3])._burn_amount (contracts/interfaces/ICurve.sol#71) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolNoReturn.remove_liquidity(uint256,uint256[3])._burn_amount](contracts/interfaces/ICurve.sol#L71) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b3f767484ff9080345334d6c39c4ccf9ea06859d10b04e05fdd13bbdfccb123c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC1155Upgradeable.__ERC1155_init(string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#56-60) is not in mixedCase\n",
            "markdown": "Function [ERC1155Upgradeable.__ERC1155_init(string)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#L56-L60) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 60
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b5e985f4cbd876307e92c802e378cfc7122db77d411b6413020e0b13ba4dda32"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.calc_withdraw_one_coin(uint256,int128) (contracts/mocks/curve/MockMeta3Curve.sol#418-420) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.calc_withdraw_one_coin(uint256,int128)](contracts/mocks/curve/MockMeta3Curve.sol#L418-L420) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 418,
                  "endLine": 420
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b633a27bee745e672a2319ef0ad80acf9aaeb7b422e167554261c9a2ef6f423e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolR.exchange_underlying(int128,int128,uint256,uint256,address).min_dy (contracts/interfaces/ICurve.sol#29) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolR.exchange_underlying(int128,int128,uint256,uint256,address).min_dy](contracts/interfaces/ICurve.sol#L29) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b792478ef4fd8d755d0700dc492007b44f0afe2121f71156349cde0a435ff72a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.get_D_mem(uint256[2],uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#549-552) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.get_D_mem(uint256[2],uint256[2],uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L549-L552) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 549,
                  "endLine": 552
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b842bf388ac9abad12b1d0129d2a86ae37d01445b94c9b2cc2bcd75b252c8eb9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolNoReturn.exchange(uint256,uint256,uint256,uint256).min_dy (contracts/interfaces/ICurve.sol#69) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolNoReturn.exchange(uint256,uint256,uint256,uint256).min_dy](contracts/interfaces/ICurve.sol#L69) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b8bcdede76b3711b921a1eca0627ba16eadf4f03cedc75e768e9f1c0423b9886"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolC.exchange(uint256,uint256,uint256,uint256).min_dy (contracts/interfaces/ICurve.sol#65) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolC.exchange(uint256,uint256,uint256,uint256).min_dy](contracts/interfaces/ICurve.sol#L65) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b955225f9b515219fbef860f002cea90abbf9e166cfa6696ea275d788c12689b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.removeFunction(LibDiamond.DiamondStorage,address,bytes4)._facetAddress (contracts/libraries/LibDiamond.sol#182) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.removeFunction(LibDiamond.DiamondStorage,address,bytes4)._facetAddress](contracts/libraries/LibDiamond.sol#L182) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b9f2c48611cc16af29fa3b7637a64439213324fe201b109b34715f329693e902"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePoolNoReturn128.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/interfaces/ICurve.sol#78) is not in mixedCase\n",
            "markdown": "Function [ICurvePoolNoReturn128.remove_liquidity_one_coin(uint256,int128,uint256)](contracts/interfaces/ICurve.sol#L78) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ba4a3d05c9e81ded1c66ad4784e6198adea546fed4e9083580308fe32e0257bd"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip23.beanSproutBudget (contracts/beanstalk/init/InitBip23.sol#18) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip23.beanSproutBudget](contracts/beanstalk/init/InitBip23.sol#L18) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip23.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ba945167923c9736a4090d86ae626c40a79a09cab1412d5de458cfb775aac93d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolNoReturn.remove_liquidity_imbalance(uint256[3],uint256)._max_burn_amount (contracts/interfaces/ICurve.sol#72) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolNoReturn.remove_liquidity_imbalance(uint256[3],uint256)._max_burn_amount](contracts/interfaces/ICurve.sol#L72) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bab5698cda5075ed5bcd14d7bcbdf9cc46cfc82e660dd91bf9ec0e3eda734101"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveFactory.get_coins(address) (contracts/interfaces/ICurve.sol#56) is not in mixedCase\n",
            "markdown": "Function [ICurveFactory.get_coins(address)](contracts/interfaces/ICurve.sol#L56) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bb4cea9f7aeb3de594b45b3121fc635077956523ad7147f0b62cccf4346be73d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibBytes.toUint8(bytes,uint256)._bytes (contracts/libraries/LibBytes.sol#18) is not in mixedCase\n",
            "markdown": "Parameter [LibBytes.toUint8(bytes,uint256)._bytes](contracts/libraries/LibBytes.sol#L18) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bb7d76b9df1aae36195f46617d0c487d295b821ca3d7c4502beb1a135b14c604"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolNoReturn128.exchange(int128,int128,uint256,uint256).min_dy (contracts/interfaces/ICurve.sol#77) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolNoReturn128.exchange(int128,int128,uint256,uint256).min_dy](contracts/interfaces/ICurve.sol#L77) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bc152a6d75899d6491afb8c45edf965b690ae19148abf61a73ba6f79f0f5c9f7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip24.rootAddress (contracts/beanstalk/init/InitBip24.sol#15-16) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip24.rootAddress](contracts/beanstalk/init/InitBip24.sol#L15-L16) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip24.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bc83cd95a0b62cd49db8ebe5110003ea0ea7ea103eb4abffb7a6f2199d48313a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#205-207) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.add_liquidity(uint256[2],uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L205-L207) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 205,
                  "endLine": 207
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bd078b807f5221e2b33da720ae098e77c039bc105e36638848598d84ecf56077"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.set_A_precise(uint256) (contracts/mocks/curve/MockPlainCurve.sol#83-85) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.set_A_precise(uint256)](contracts/mocks/curve/MockPlainCurve.sol#L83-L85) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 85
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bd9af3923deb20e90c7190b8de61c8844653de5b9f8f1ea63195665bb410f77d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ERC165Upgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#59) is not in mixedCase\n",
            "markdown": "Variable [ERC165Upgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#L59) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bdc2d8e808ddb749222cd3ed859af1782e2e982c72c8164d541233f50dec05af"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function OwnableUpgradeable.__Ownable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#32-36) is not in mixedCase\n",
            "markdown": "Function [OwnableUpgradeable.__Ownable_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#L32-L36) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "be1436ad6e7661ea17048b9b8432553bbd982a53256f0d44f0dddb582fee6a05"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockSiloFacet.handleRainAndSopsLegacy(address,uint32)._lastUpdate (contracts/mocks/mockFacets/MockSiloFacet.sol#119) is not in mixedCase\n",
            "markdown": "Parameter [MockSiloFacet.handleRainAndSopsLegacy(address,uint32)._lastUpdate](contracts/mocks/mockFacets/MockSiloFacet.sol#L119) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSiloFacet.sol"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 119
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "be2727e8f7683e7ebcbec56d6eee2da0a887b4f96a6a5468e481bba1e8dbcafc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant LibCurve.i (contracts/libraries/Curve/LibCurve.sol#19) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [LibCurve.i](contracts/libraries/Curve/LibCurve.sol#L19) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibCurve.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "be2bf86c33636e515e70c2aba3e7bf1ca3fee46dbd122dc8be7503ad3b3304b0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DiamondLoupeFacet.facetFunctionSelectors(address)._facet (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#42) is not in mixedCase\n",
            "markdown": "Parameter [DiamondLoupeFacet.facetFunctionSelectors(address)._facet](contracts/beanstalk/diamond/DiamondLoupeFacet.sol#L42) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/DiamondLoupeFacet.sol"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "be3fd1a575ddcb9decf5e6887776e04508d97803f2c5b8ce61e0db9837746f6d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolNoReturn.add_liquidity(uint256[3],uint256).min_mint_amount (contracts/interfaces/ICurve.sol#70) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolNoReturn.add_liquidity(uint256[3],uint256).min_mint_amount](contracts/interfaces/ICurve.sol#L70) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bf392725fadd64f4bc45ef86b9a2c4385dd7e04e1d11496fe9800701567f9f59"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.remove_liquidity(uint256,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#266-271) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.remove_liquidity(uint256,uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L266-L271) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 271
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c0c94a59f809fb8e51bd7b05eee673916f53d390d2909838e30e45d153fa2184"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable MockPlainCurve.price_cumulative_last (contracts/mocks/curve/MockPlainCurve.sol#39) is not in mixedCase\n",
            "markdown": "Variable [MockPlainCurve.price_cumulative_last](contracts/mocks/curve/MockPlainCurve.sol#L39) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c2d056a276dc03734dae4ddfc515a75e34bbad282e12d3ca5b9aea2d19707710"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool2R.remove_liquidity(uint256,uint256[2],address)._burn_amount (contracts/interfaces/ICurve.sol#35) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool2R.remove_liquidity(uint256,uint256[2],address)._burn_amount](contracts/interfaces/ICurve.sol#L35) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c2e5976296986e05956223fd187046c55514ec3e50a86be0461fc8f3ce168d8c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool4R.add_liquidity(uint256[4],uint256,address) (contracts/interfaces/ICurve.sol#46) is not in mixedCase\n",
            "markdown": "Function [ICurvePool4R.add_liquidity(uint256[4],uint256,address)](contracts/interfaces/ICurve.sol#L46) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3c653e03921db2e52140fb606d9e5f53855efef5a5dba7a29620d73b1dba510"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#295-300) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L295-L300) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 295,
                  "endLine": 300
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c4b1e21869b732a9e922f87dbbb401a6baac4a53ca6ce72c2e4b81af08f5f74f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity(uint256,uint256[2])._min_amounts (contracts/mocks/curve/MockMeta3Curve.sol#268) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity(uint256,uint256[2])._min_amounts](contracts/mocks/curve/MockMeta3Curve.sol#L268) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 268,
                  "endLine": 268
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c4c4e622e1d842e76ba6cca4fea19ec381bae092edc54cec8f45e10894ab25ec"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256)._i_ (contracts/mocks/curve/MockMeta3Curve.sol#355) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256)._i_](contracts/mocks/curve/MockMeta3Curve.sol#L355) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 355,
                  "endLine": 355
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c5491e2ff91c9992298a8f308ae801afce70e63a8d28f1a1d82b21618e612aa5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.update(uint256[2]).new_balances (contracts/mocks/curve/MockMeta3Curve.sol#116) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.update(uint256[2]).new_balances](contracts/mocks/curve/MockMeta3Curve.sol#L116) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 116
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c5692b520bb9ed6edee1c5f09ba6e8f931255547588f4750db271dbaf114f3e5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool.calc_withdraw_one_coin(uint256,int128)._token_amount (contracts/interfaces/ICurve.sol#16) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool.calc_withdraw_one_coin(uint256,int128)._token_amount](contracts/interfaces/ICurve.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c76ab142ef7417bf46e27e4ce22a37c7ad8a8a896eb6267e16908f66fb343c43"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolR.exchange(int128,int128,uint256,uint256,address).min_dy (contracts/interfaces/ICurve.sol#28) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolR.exchange(int128,int128,uint256,uint256,address).min_dy](contracts/interfaces/ICurve.sol#L28) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c7d0e7208566af4bf4454269b0d24eb7acc7c474499d859e6b73813f9e7b381e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.addFunctions(address,bytes4[])._functionSelectors (contracts/libraries/LibDiamond.sol#120) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.addFunctions(address,bytes4[])._functionSelectors](contracts/libraries/LibDiamond.sol#L120) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c9ca153e8dbdded50e2b37f895e6c4128de86d987997dab57c5d96315a722262"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.get_D(uint256[2],uint256)._a (contracts/mocks/curve/MockPlainCurve.sol#272) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.get_D(uint256[2],uint256)._a](contracts/mocks/curve/MockPlainCurve.sol#L272) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 272,
                  "endLine": 272
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cadc9efdfeb4031b1b8dc9499c3a9333f77638de6a7caf92b8e07e206e438a74"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#453-495) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L453-L495) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 453,
                  "endLine": 495
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cb6b62c7ec45add6161a7ec883411000b850448af6083425dfe8e1cecf67ccad"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.A_precise() (contracts/mocks/curve/MockPlainCurve.sol#64-66) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.A_precise()](contracts/mocks/curve/MockPlainCurve.sol#L64-L66) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cb8a776726934e2e0f62d93fa953695d163e346ed6b6fb3bab2cdf128cc482c6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibBytes.toUint8(bytes,uint256)._start (contracts/libraries/LibBytes.sol#18) is not in mixedCase\n",
            "markdown": "Parameter [LibBytes.toUint8(bytes,uint256)._start](contracts/libraries/LibBytes.sol#L18) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibBytes.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cbcaef692facebf7cca37253ccc707680f59e3a842642789f1a78b308b7f1830"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip22.beanstalkFarms (contracts/beanstalk/init/InitBip22.sol#16-17) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip22.beanstalkFarms](contracts/beanstalk/init/InitBip22.sol#L16-L17) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip22.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cc15cf8226242278ac7dcbf366a210d99523366c8ff03a03a1324de4b2df8c28"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.update(uint256[2]).new_balances (contracts/mocks/curve/MockPlainCurve.sol#102) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.update(uint256[2]).new_balances](contracts/mocks/curve/MockPlainCurve.sol#L102) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cd674a30d0b12554637a56980a38fc8efd0a6fde5f38685b213b09509d0ecb16"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.add_liquidity(uint256[2],uint256)._min_mint_amount (contracts/mocks/curve/MockPlainCurve.sol#137) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.add_liquidity(uint256[2],uint256)._min_mint_amount](contracts/mocks/curve/MockPlainCurve.sol#L137) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 137
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cef3dd4223553e83f0100d455e97970a3a1a431dad71e1ef1aa305ae2ccf247e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256)._i_ (contracts/mocks/curve/MockPlainCurve.sol#203) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256)._i_](contracts/mocks/curve/MockPlainCurve.sol#L203) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 203,
                  "endLine": 203
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d0909c9e421d8a56a5448f1ed4aec9831c59e1498c597e2c851d3864c4e254d2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.set_balances(uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#101-104) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.set_balances(uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L101-L104) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 104
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d0987a00456a65e92fa6c546cb8006c263ccf4313385d66a89b455111671a19e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.block_timestamp_last() (contracts/mocks/curve/MockMeta3Curve.sol#136-138) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.block_timestamp_last()](contracts/mocks/curve/MockMeta3Curve.sol#L136-L138) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 138
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d09ec8a1fd9de454a32a18e12da77ad2a1bfd6489acc864c56bdd9bec1c31c35"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/interfaces/ICurve.sol#10) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount](contracts/interfaces/ICurve.sol#L10) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d0ada9c8d2520c47b07e992d8e97373df730ee028d5c93704a26ab0ac54771d0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IMockCurvePool.exchange(int128,int128,uint256,uint256).min_dy (contracts/mocks/curve/MockMeta3Curve.sol#31) is not in mixedCase\n",
            "markdown": "Parameter [IMockCurvePool.exchange(int128,int128,uint256,uint256).min_dy](contracts/mocks/curve/MockMeta3Curve.sol#L31) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d16f8b04dad90a8aa9e288106c7498b99122e3daf1ad610f19f5b8eb3ffc0334"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool2R.remove_liquidity(uint256,uint256[2],address) (contracts/interfaces/ICurve.sol#35) is not in mixedCase\n",
            "markdown": "Function [ICurvePool2R.remove_liquidity(uint256,uint256[2],address)](contracts/interfaces/ICurve.sol#L35) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d19bd7ea0b4511e5e42e97190890df197b47250e444da3162bb65377cbd86e9b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IMockCurvePool.add_liquidity(uint256[2],uint256).min_mint_amount (contracts/mocks/curve/MockMeta3Curve.sol#23) is not in mixedCase\n",
            "markdown": "Parameter [IMockCurvePool.add_liquidity(uint256[2],uint256).min_mint_amount](contracts/mocks/curve/MockMeta3Curve.sol#L23) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d20fd0afd963b38de9fd3990eb41f007627963ea5065e683a6041bada46a5909"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockSeasonFacet.fastForward(uint32)._s (contracts/mocks/mockFacets/MockSeasonFacet.sol#113) is not in mixedCase\n",
            "markdown": "Parameter [MockSeasonFacet.fastForward(uint32)._s](contracts/mocks/mockFacets/MockSeasonFacet.sol#L113) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d3774647624ec43f63a508d65e9655d48e8a2619b3387cc68755a83100ef025f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveFactory.get_underlying_coins(address) (contracts/interfaces/ICurve.sol#57) is not in mixedCase\n",
            "markdown": "Function [ICurveFactory.get_underlying_coins(address)](contracts/interfaces/ICurve.sol#L57) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d39293d50f1cd45c4de9b0a66b95d7b4c80b68e664e94a037669274e34375a6a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant CurvePrice.i (contracts/ecosystem/price/CurvePrice.sol#32) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [CurvePrice.i](contracts/ecosystem/price/CurvePrice.sol#L32) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ecosystem/price/CurvePrice.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d430c9f66bd9262ea89b99f563916f3732764a921adc194b049615edbbef816a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePoolR.remove_liquidity_one_coin(uint256,int128,uint256,address)._token_amount (contracts/interfaces/ICurve.sol#30) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePoolR.remove_liquidity_one_coin(uint256,int128,uint256,address)._token_amount](contracts/interfaces/ICurve.sol#L30) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d47207b3d5fb13a87c31f1fdfbdb785e0fd56c3341c5a73793c56eac695733a1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMockCurvePool.set_virtual_price(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#34) is not in mixedCase\n",
            "markdown": "Function [IMockCurvePool.set_virtual_price(uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d575fa744a36d3d898a6fbe2942e193e0098a42fd13bf077826f7530f39c9ab9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.set_A_precise(uint256)._a (contracts/mocks/curve/MockPlainCurve.sol#83) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.set_A_precise(uint256)._a](contracts/mocks/curve/MockPlainCurve.sol#L83) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d6014ebb09e00ebb17b0c13cb0c8283893e83eb9db5aeda75bc254ccb8c92de3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.calc_token_amount(uint256[2],bool)._amounts (contracts/mocks/curve/MockMeta3Curve.sol#534) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.calc_token_amount(uint256[2],bool)._amounts](contracts/mocks/curve/MockMeta3Curve.sol#L534) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 534,
                  "endLine": 534
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d6649fe4df4e94476141aafdb2afd5da5c02d0f74bb577ce0bde61d16c260ff7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool.exchange_underlying(int128,int128,uint256,uint256).min_dy (contracts/interfaces/ICurve.sol#18) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool.exchange_underlying(int128,int128,uint256,uint256).min_dy](contracts/interfaces/ICurve.sol#L18) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d6ba651154b41a7954bf8007259ea38508aa3da295d7607ddbaa70cbfe48e613"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockUniswapV3Factory.setOwner(address)._owner (contracts/mocks/uniswap/MockUniswapV3Factory.sol#54) is not in mixedCase\n",
            "markdown": "Parameter [MockUniswapV3Factory.setOwner(address)._owner](contracts/mocks/uniswap/MockUniswapV3Factory.sol#L54) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Factory.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d73a5ef600a2d639a049bf041da597bfed20b21d6b0a312018d7fa744b47b7e0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockCurveFactory.set_coins(address,address[4]) (contracts/mocks/curve/MockCurveFactory.sol#27-30) is not in mixedCase\n",
            "markdown": "Function [MockCurveFactory.set_coins(address,address[4])](contracts/mocks/curve/MockCurveFactory.sol#L27-L30) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d77c32a7ba37cb81d107515b7c89235af8b5d3eee0873c90904833127b02f191"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.get_rates() (contracts/mocks/curve/MockMeta3Curve.sol#148-152) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.get_rates()](contracts/mocks/curve/MockMeta3Curve.sol#L148-L152) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 148,
                  "endLine": 152
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d7ae140878b1b953a2bec5ef78443a1213157ba9256d1f6910ea17e8d2f41591"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256).D (contracts/mocks/curve/MockPlainCurve.sol#297) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256).D](contracts/mocks/curve/MockPlainCurve.sol#L297) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 297
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d7b5d3296cbc5779c5c01217b1900d1878dad2b015f9cb3d09d052f6f1df6271"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function FertilizerPreMint.__mint(uint256) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#57-65) is not in mixedCase\n",
            "markdown": "Function [FertilizerPreMint.__mint(uint256)](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L57-L65) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/FertilizerPreMint.sol"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d80c6e86cfa10db29e36bc1c543dbef218edf2214f78f200f01c916a7fd9fd77"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.addDiamondFunctions(address,address)._diamondCutFacet (contracts/libraries/LibDiamond.sol#77) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.addDiamondFunctions(address,address)._diamondCutFacet](contracts/libraries/LibDiamond.sol#L77) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d89d74282ee979b0fd056097b78cb8b450d202c2c09321eadda5dfe79aeb54d5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool4R.remove_liquidity_imbalance(uint256[4],uint256,address)._max_burn_amount (contracts/interfaces/ICurve.sol#48) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool4R.remove_liquidity_imbalance(uint256[4],uint256,address)._max_burn_amount](contracts/interfaces/ICurve.sol#L48) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d8c6c9e665665d47cb9b686d461d31b578d3d6025c1a667e45e0f2ab5c9211f2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable EIP712._HASHED_NAME (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#31) is not in mixedCase\n",
            "markdown": "Variable [EIP712._HASHED_NAME](node_modules/@openzeppelin/contracts/drafts/EIP712.sol#L31) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/drafts/EIP712.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d95962ad9105e420535beef6f8adb2aef63294fd7b915e33fcc542c62ef06551"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.set_virtual_price(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#110-112) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.set_virtual_price(uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L110-L112) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 112
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "da35a2f76be820157862e9e3a75150f09ab412922fc8be8baf6c0153f01594c6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMockCurvePool.get_balances() (contracts/mocks/curve/MockMeta3Curve.sol#21) is not in mixedCase\n",
            "markdown": "Function [IMockCurvePool.get_balances()](contracts/mocks/curve/MockMeta3Curve.sol#L21) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "da93c8c7c947cb12b817909ca7fa04ea68ee23bd2070f503603b19a24e11af4b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool3R.remove_liquidity(uint256,uint256[3],address) (contracts/interfaces/ICurve.sol#41) is not in mixedCase\n",
            "markdown": "Function [ICurvePool3R.remove_liquidity(uint256,uint256[3],address)](contracts/interfaces/ICurve.sol#L41) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "db70f5e59c5bfac659a423fbfa1f10fe8fe0d4db21588d5df26c77503920c1f9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDibbler.sow(uint256,uint256,address,bool)._morningTemperature (contracts/libraries/LibDibbler.sol#68) is not in mixedCase\n",
            "markdown": "Parameter [LibDibbler.sow(uint256,uint256,address,bool)._morningTemperature](contracts/libraries/LibDibbler.sol#L68) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dd6492a639851699eeeb006edff865f316950387217f7a5a499e419f2dbc918b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.add_liquidity(uint256[2],uint256,address)._min_mint_amount (contracts/mocks/curve/MockMeta3Curve.sol#209) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.add_liquidity(uint256[2],uint256,address)._min_mint_amount](contracts/mocks/curve/MockMeta3Curve.sol#L209) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 209
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dde26f47fdd162235d0ed1c6e9a006a14a19e8943358bbab6007194247ffeb03"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)._amounts (contracts/mocks/curve/MockMeta3Curve.sol#303) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)._amounts](contracts/mocks/curve/MockMeta3Curve.sol#L303) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 303,
                  "endLine": 303
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "de884d189babea5c9067cdb578150fba663a6500ad8b8d10538b7d8de07bd2e1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function Listing.__fillListing(address,Listing.PodListing,uint256,uint256) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#180-203) is not in mixedCase\n",
            "markdown": "Function [Listing.__fillListing(address,Listing.PodListing,uint256,uint256)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L180-L203) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Listing.sol"
                },
                "region": {
                  "startLine": 180,
                  "endLine": 203
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "df3dfa3c9593dd99f40ced0a720f5db9b70c02c479d96780dca21455fbb9eedd"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockSeasonFacet.teleportSunrise(uint32)._s (contracts/mocks/mockFacets/MockSeasonFacet.sol#118) is not in mixedCase\n",
            "markdown": "Parameter [MockSeasonFacet.teleportSunrise(uint32)._s](contracts/mocks/mockFacets/MockSeasonFacet.sol#L118) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e038b33b06f54c25687083d179b32a57e4d7d3eb49d15e686caffaa5309be942"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMockCurvePool.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#23) is not in mixedCase\n",
            "markdown": "Function [IMockCurvePool.add_liquidity(uint256[2],uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L23) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e0cb94f13ddb741187cbb20391d28b7d61a42bd5e8c16070fadd29447d5257e2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2])._burn_amount (contracts/mocks/curve/MockPlainCurve.sol#219) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2])._burn_amount](contracts/mocks/curve/MockPlainCurve.sol#L219) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 219
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e1a23778b1dfa24922a26d673724e37d867458a4ca201df51d49161ea5f5e64f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function I3Curve.get_virtual_price() (contracts/interfaces/ICurve.sol#52) is not in mixedCase\n",
            "markdown": "Function [I3Curve.get_virtual_price()](contracts/interfaces/ICurve.sol#L52) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e1c96d55331242aa4bff0389a24e385f6ff6d581e9660e0a5e2d2c68f38f9173"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)._receiver (contracts/mocks/curve/MockMeta3Curve.sol#276) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)._receiver](contracts/mocks/curve/MockMeta3Curve.sol#L276) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e280674eefad5b420217f88ee748f7b18517d397309f52142f40d53dca732558"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)._receiver (contracts/mocks/curve/MockMeta3Curve.sol#371) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)._receiver](contracts/mocks/curve/MockMeta3Curve.sol#L371) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 371,
                  "endLine": 371
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e2a8ac45d90f632d6dd7c7e6424399f84f85736c08078b8d07a50adc5787076b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMeta3CurveOracle.get_previous_balances() (contracts/libraries/Oracle/LibCurveOracle.sol#17) is not in mixedCase\n",
            "markdown": "Function [IMeta3CurveOracle.get_previous_balances()](contracts/libraries/Oracle/LibCurveOracle.sol#L17) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Oracle/LibCurveOracle.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e4d395dd6b27d4eeb2a5c83abe46d11778f38eadd5d75790f315df0dc7de0854"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.removeFunctions(address,bytes4[])._facetAddress (contracts/libraries/LibDiamond.sol#157) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.removeFunctions(address,bytes4[])._facetAddress](contracts/libraries/LibDiamond.sol#L157) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 157
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e8bb2f91f46a5fa9d6a774edf8e1892ee6d27fa016ec1fcc4100180a7ac91ace"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve._xp_mem(uint256[2],uint256[2])._rates (contracts/mocks/curve/MockPlainCurve.sol#266) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve._xp_mem(uint256[2],uint256[2])._rates](contracts/mocks/curve/MockPlainCurve.sol#L266) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 266
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e8d5f00689c0bdb692d379f37cd1194c7a16149e4c9448333d96a2d5473133b3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.get_D(uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#428-451) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.get_D(uint256[2],uint256)](contracts/mocks/curve/MockMeta3Curve.sol#L428-L451) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 428,
                  "endLine": 451
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e959f875fceb08e20e4bb5677818acd7a80413d54b46e39567fcbd7536975945"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.init(address,address,address)._token (contracts/mocks/curve/MockMeta3Curve.sol#71) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.init(address,address,address)._token](contracts/mocks/curve/MockMeta3Curve.sol#L71) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e96be075b497e21773a6db51c10a05b68635ea38f04ca9f339c23307876e3b82"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMockCurvePool.A_precise() (contracts/mocks/curve/MockMeta3Curve.sol#20) is not in mixedCase\n",
            "markdown": "Function [IMockCurvePool.A_precise()](contracts/mocks/curve/MockMeta3Curve.sol#L20) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e9a86f02ebd79a99888618b943f23519a9188f196a6c63cc4e780a4c8ece58f9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool3R.remove_liquidity_imbalance(uint256[3],uint256,address) (contracts/interfaces/ICurve.sol#42) is not in mixedCase\n",
            "markdown": "Function [ICurvePool3R.remove_liquidity_imbalance(uint256[3],uint256,address)](contracts/interfaces/ICurve.sol#L42) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eace1f701cf3d8d83f8455944b25fce03e9f9dcfa653ae9d14a122e0349f21b8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve._xp_mem(uint256[2],uint256[2]) (contracts/mocks/curve/MockPlainCurve.sol#266-270) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve._xp_mem(uint256[2],uint256[2])](contracts/mocks/curve/MockPlainCurve.sol#L266-L270) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 270
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eadcaeb165b5843d7b50ae0eb82e1dd14eb490ee0cdc69866186c04cd6263c56"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.calc_token_amount(uint256[2],bool) (contracts/mocks/curve/MockPlainCurve.sol#341-354) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.calc_token_amount(uint256[2],bool)](contracts/mocks/curve/MockPlainCurve.sol#L341-L354) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 341,
                  "endLine": 354
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eb3360be8f60d113a0c8e0870c4ebad98f4473ccd9c434d1be3398bcc5f3d647"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ContextUpgradeable.__Context_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#17-19) is not in mixedCase\n",
            "markdown": "Function [ContextUpgradeable.__Context_init()](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L17-L19) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ec47067e22967ab37ddb79c5eae4c225b0c9f1e4e15f1452db70b0a6f86103e0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)](contracts/mocks/curve/MockMeta3Curve.sol#L273-L293) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 273,
                  "endLine": 293
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef115b32d688368cce3ba0559d7da5a5df4cea448f9e4d6f2ea3326e8de14b70"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter FertilizerPreMint.initialize(string)._uri (contracts/tokens/Fertilizer/FertilizerPreMint.sol#37) is not in mixedCase\n",
            "markdown": "Parameter [FertilizerPreMint.initialize(string)._uri](contracts/tokens/Fertilizer/FertilizerPreMint.sol#L37) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/tokens/Fertilizer/FertilizerPreMint.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef60a835d2339cb2b1835c24d26a6f7dbd9a101443f9b9ad977bdfb8385e7385"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool2R.add_liquidity(uint256[2],uint256,address) (contracts/interfaces/ICurve.sol#34) is not in mixedCase\n",
            "markdown": "Function [ICurvePool2R.add_liquidity(uint256[2],uint256,address)](contracts/interfaces/ICurve.sol#L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef8cad3b5dea8bbc4f76d0dd54a24a75b91d9f8e7b44ea307d7e67e3a6be9684"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePoolR.remove_liquidity_one_coin(uint256,int128,uint256,address) (contracts/interfaces/ICurve.sol#30) is not in mixedCase\n",
            "markdown": "Function [ICurvePoolR.remove_liquidity_one_coin(uint256,int128,uint256,address)](contracts/interfaces/ICurve.sol#L30) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "efb6ef94e62f218971ceaf75589699096f170269f813ba4856854a7114b52e35"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256)._min_received (contracts/mocks/curve/MockPlainCurve.sol#204) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256)._min_received](contracts/mocks/curve/MockPlainCurve.sol#L204) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 204
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f01fc4cd9786ff92b3e36dd5558c2f23ff27ca618858ee9e9931f5f0bbf844ee"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ResetPool.reset_cumulative() (contracts/mocks/mockFacets/MockSeasonFacet.sol#21) is not in mixedCase\n",
            "markdown": "Function [ResetPool.reset_cumulative()](contracts/mocks/mockFacets/MockSeasonFacet.sol#L21) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/mockFacets/MockSeasonFacet.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f0ac4827625c9c1125855d05e38d0eb9b4edb08d46b0f6cffe60a9ed66d491d6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IMeta3CurveOracle.get_price_cumulative_last() (contracts/libraries/Oracle/LibCurveOracle.sol#15) is not in mixedCase\n",
            "markdown": "Function [IMeta3CurveOracle.get_price_cumulative_last()](contracts/libraries/Oracle/LibCurveOracle.sol#L15) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Oracle/LibCurveOracle.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f1af4ae86f9c3111da15159be87fed6e9dde9e2a528322ade7eb56cc382ac1ef"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC165Upgradeable.__ERC165_init() (node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#25-27) is not in mixedCase\n",
            "markdown": "Function [ERC165Upgradeable.__ERC165_init()](node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#L25-L27) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f226b70c0c428d938e421293c43b68d973d744168b94b568e0deb7b189c26f50"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable EIP712._CACHED_DOMAIN_SEPARATOR (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#28) is not in mixedCase\n",
            "markdown": "Variable [EIP712._CACHED_DOMAIN_SEPARATOR](node_modules/@openzeppelin/contracts/drafts/EIP712.sol#L28) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/drafts/EIP712.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f27ba4adb32b59400d073508894d8fb5ef55f3fccd5dab06bbf2cf9e1039544c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDiamond.addFunction(LibDiamond.DiamondStorage,bytes4,uint96,address)._selector (contracts/libraries/LibDiamond.sol#176) is not in mixedCase\n",
            "markdown": "Parameter [LibDiamond.addFunction(LibDiamond.DiamondStorage,bytes4,uint96,address)._selector](contracts/libraries/LibDiamond.sol#L176) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDiamond.sol"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f2dec937d92409e17397c8f2ca0f8428d7b9708489fbbaa88c960a4369c549ce"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.add_liquidity(uint256[2],uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L209-L264) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 264
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f38df48b438c1ff63c937a3823311a4917f9f8a98ac0d892bcf5f196334efe05"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#367-384) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)](contracts/mocks/curve/MockMeta3Curve.sol#L367-L384) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 367,
                  "endLine": 384
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f3bb4f5ccff635bd78c3c5d99cf48b28727ca4602ffe375eff56387868ea8777"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter LibDibbler.scaleSoilDown(uint256,uint256,uint256)._morningTemperature (contracts/libraries/LibDibbler.sol#359) is not in mixedCase\n",
            "markdown": "Parameter [LibDibbler.scaleSoilDown(uint256,uint256,uint256)._morningTemperature](contracts/libraries/LibDibbler.sol#L359) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/LibDibbler.sol"
                },
                "region": {
                  "startLine": 359,
                  "endLine": 359
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f4ffebd3ab4477dc1a9a85ead0304066f5f48d6e0a2a998913d0f863ca91f636"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.get_previous_balances() (contracts/mocks/curve/MockPlainCurve.sol#72-74) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.get_previous_balances()](contracts/mocks/curve/MockPlainCurve.sol#L72-L74) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 74
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f539f84e2f6311e8ecab98d9d0357c2d7fb1c4ee8d5a6828ce190007eb533ee0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193) is not in mixedCase\n",
            "markdown": "Function [MockPlainCurve.add_liquidity(uint256[2],uint256)](contracts/mocks/curve/MockPlainCurve.sol#L137-L193) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f597f11a47331f2f001966d7dee0b841315adf496306960c4f1b618b0b5e55d7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip8.beanSproutBudget (contracts/beanstalk/init/InitBip8.sol#23) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip8.beanSproutBudget](contracts/beanstalk/init/InitBip8.sol#L23) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip8.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f5a97f7985a19da72a98124059897807772ff3844a6ea6abdfa36c04ccba2d0c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable MockPlainCurve.virtual_price (contracts/mocks/curve/MockPlainCurve.sol#42) is not in mixedCase\n",
            "markdown": "Variable [MockPlainCurve.virtual_price](contracts/mocks/curve/MockPlainCurve.sol#L42) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f682f427237dfe0fd253b6f6087d6b22ebd6ab9d44afd9efc6bdc7d733c54de6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)._burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#274) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)._burn_amount](contracts/mocks/curve/MockMeta3Curve.sol#L274) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 274,
                  "endLine": 274
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f69e1aa9c06df178377611ed696afb506a18fe18f5126cf249975f3f289d654f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256)._j_ (contracts/mocks/curve/MockMeta3Curve.sol#164) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.exchange(int128,int128,uint256,uint256)._j_](contracts/mocks/curve/MockMeta3Curve.sol#L164) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f7326c2fd62e0a17bc3fbb6e91d85a0efd07d4c920b39e881c6a413800387596"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveCryptoFactory.get_coins(address) (contracts/interfaces/ICurve.sol#61) is not in mixedCase\n",
            "markdown": "Function [ICurveCryptoFactory.get_coins(address)](contracts/interfaces/ICurve.sol#L61) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ICurve.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f7df0da9135d478a821f140518e3dff9c9f1d4284435a40feed5a991e6c799c6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.init(address,address,address)._token2 (contracts/mocks/curve/MockMeta3Curve.sol#71) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.init(address,address,address)._token2](contracts/mocks/curve/MockMeta3Curve.sol#L71) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f836f8e919867f49ac5af9767c26272bd11192dc95ddb1f6076fe461abb76eac"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter InitHotFix2.addBeanDeposit(address,uint32,uint256)._s (contracts/beanstalk/init/InitHotFix2.sol#60) is not in mixedCase\n",
            "markdown": "Parameter [InitHotFix2.addBeanDeposit(address,uint32,uint256)._s](contracts/beanstalk/init/InitHotFix2.sol#L60) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitHotFix2.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f8b0370d7feae06e0500f1a09da6c37e106c5af2e58875bdba47459959dfe29f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockPlainCurve.get_D_mem(uint256[2],uint256[2],uint256)._rates (contracts/mocks/curve/MockPlainCurve.sol#356) is not in mixedCase\n",
            "markdown": "Parameter [MockPlainCurve.get_D_mem(uint256[2],uint256[2],uint256)._rates](contracts/mocks/curve/MockPlainCurve.sol#L356) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 356,
                  "endLine": 356
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f8ecad431ca2478c860ebcae090b5c51301f538c9a38460304103426b1a42728"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DiamondCutFacet.diamondCut(IDiamondCut.FacetCut[],address,bytes)._calldata (contracts/beanstalk/diamond/DiamondCutFacet.sol#25) is not in mixedCase\n",
            "markdown": "Parameter [DiamondCutFacet.diamondCut(IDiamondCut.FacetCut[],address,bytes)._calldata](contracts/beanstalk/diamond/DiamondCutFacet.sol#L25) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/diamond/DiamondCutFacet.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f9541153a1fa3562b1d31096987e444badff1e578d72351ea250c6a2098b1415"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable EIP712._HASHED_VERSION (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#32) is not in mixedCase\n",
            "markdown": "Variable [EIP712._HASHED_VERSION](node_modules/@openzeppelin/contracts/drafts/EIP712.sol#L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/drafts/EIP712.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fa2d3018dd91feb3af39c2059f0ca8ab593b4673bb691dcf3117bd6db96f57b9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockCurveFactory.get_underlying_coins(address) (contracts/mocks/curve/MockCurveFactory.sol#40-42) is not in mixedCase\n",
            "markdown": "Function [MockCurveFactory.get_underlying_coins(address)](contracts/mocks/curve/MockCurveFactory.sol#L40-L42) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockCurveFactory.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fa75067c63d115ae5a25ddf4d12cb04137cbe4ca7934ce05be943d7b1db69ebc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256)._amounts (contracts/mocks/curve/MockMeta3Curve.sol#296) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256)._amounts](contracts/mocks/curve/MockMeta3Curve.sol#L296) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fab059561dc961b0c257203cac32436222f398bfca538f2af9b4333c85425c1d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant InitBip8.beanstalkFarms (contracts/beanstalk/init/InitBip8.sol#21) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [InitBip8.beanstalkFarms](contracts/beanstalk/init/InitBip8.sol#L21) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip8.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fb40473204930a413517124c7458f9e00f414bd0536398d3fed43d768eb3c8d4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)._i_ (contracts/mocks/curve/MockMeta3Curve.sol#369) is not in mixedCase\n",
            "markdown": "Parameter [MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)._i_](contracts/mocks/curve/MockMeta3Curve.sol#L369) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 369,
                  "endLine": 369
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fc350ec9848b314de022c7f448cf7497a4e03d7f9728f8160c0bd78ed3582a6c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant LibBeanMetaCurve.j (contracts/libraries/Curve/LibBeanMetaCurve.sol#22) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [LibBeanMetaCurve.j](contracts/libraries/Curve/LibBeanMetaCurve.sol#L22) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibBeanMetaCurve.sol"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fd4705530f2c6d116232381f8850b882827f92bbf4f1858042a5af73f090aaab"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve.A_precise() (contracts/mocks/curve/MockMeta3Curve.sol#78-80) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve.A_precise()](contracts/mocks/curve/MockMeta3Curve.sol#L78-L80) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 80
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fdedf4c0b44ebe3fd71242f85577629bb1aa91e01a6564df8e8ba58017b15dff"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function MockMeta3Curve._xp_mem(uint256[2],uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#422-426) is not in mixedCase\n",
            "markdown": "Function [MockMeta3Curve._xp_mem(uint256[2],uint256[2])](contracts/mocks/curve/MockMeta3Curve.sol#L422-L426) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 422,
                  "endLine": 426
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fef6b345dbea36ce4af957f422323c392a9e5017e92124bfabfaf5b368db5580"
          }
        },
        {
          "ruleId": "3-0-redundant-statements",
          "message": {
            "text": "Redundant expression \"this (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#28)\" inContextUpgradeable (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#16-32)\n",
            "markdown": "Redundant expression \"[this](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L28)\" in[ContextUpgradeable](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L16-L32)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1469f89007cc910ecdd91a8824867b8ad21026d0d96ca84a0d3464c0941cf11d"
          }
        },
        {
          "ruleId": "3-0-redundant-statements",
          "message": {
            "text": "Redundant expression \"i (contracts/beanstalk/silo/ConvertFacet.sol#313)\" inConvertFacet (contracts/beanstalk/silo/ConvertFacet.sol#24-393)\n",
            "markdown": "Redundant expression \"[i](contracts/beanstalk/silo/ConvertFacet.sol#L313)\" in[ConvertFacet](contracts/beanstalk/silo/ConvertFacet.sol#L24-L393)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/silo/ConvertFacet.sol"
                },
                "region": {
                  "startLine": 313,
                  "endLine": 313
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "16c5a14be777db0132e0cf808eb8f28a217cc3e5a4cfc2b9ff129dff91549e72"
          }
        },
        {
          "ruleId": "3-0-redundant-statements",
          "message": {
            "text": "Redundant expression \"this (node_modules/@openzeppelin/contracts/utils/Context.sol#21)\" inContext (node_modules/@openzeppelin/contracts/utils/Context.sol#15-24)\n",
            "markdown": "Redundant expression \"[this](node_modules/@openzeppelin/contracts/utils/Context.sol#L21)\" in[Context](node_modules/@openzeppelin/contracts/utils/Context.sol#L15-L24)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Context.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6aa2e6b754f321365b5965cdb2c3609a3e42a58fdde208b4a15f0f916842e36e"
          }
        },
        {
          "ruleId": "3-0-redundant-statements",
          "message": {
            "text": "Redundant expression \"this (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#102)\" inEIP712 (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#24-108)\n",
            "markdown": "Redundant expression \"[this](node_modules/@openzeppelin/contracts/drafts/EIP712.sol#L102)\" in[EIP712](node_modules/@openzeppelin/contracts/drafts/EIP712.sol#L24-L108)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/drafts/EIP712.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f79b513e7100d037eb7badf3d4f15acf5917698acc6f21cbe3d4ae75b79d200a"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount0Delta (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#17) is too similar to IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount1Delta (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#18)\n",
            "markdown": "Variable [IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount0Delta](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#L17) is too similar to [IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount1Delta](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#L18)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c338be7db1e86da1ab151f097c07f6672d03c583349c15658cdb05b782a31d1"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#47) is too similar to IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#48)\n",
            "markdown": "Variable [IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L47) is too similar to [IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L48)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "15ed3aef155e3de40668dddb517219a58b60d361d627696dc72f2cd37da3ff1a"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#20) is too similar to IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#21)\n",
            "markdown": "Variable [IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L20) is too similar to [IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L21)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4c9e1ffd407eb74af0f195682db7fce1ab197e20ab55403eadc8f6105adb613d"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#47) is too similar to IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#21)\n",
            "markdown": "Variable [IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L47) is too similar to [IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L21)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5cbb638100b0f8db03de63a5994944abc7a5ab682d5ed43d504db9fcec37a051"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolState.positions(bytes32).tokensOwed0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#95) is too similar to IUniswapV3PoolState.positions(bytes32).tokensOwed1 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#96)\n",
            "markdown": "Variable [IUniswapV3PoolState.positions(bytes32).tokensOwed0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#L95) is too similar to [IUniswapV3PoolState.positions(bytes32).tokensOwed1](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#L96)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8e46299dfe0a973e8782a0583528b7656c6aca38eb84ae1525d6c101bfc0fa08"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolState.positions(bytes32).feeGrowthInside0LastX128 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#93) is too similar to IUniswapV3PoolState.positions(bytes32).feeGrowthInside1LastX128 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#94)\n",
            "markdown": "Variable [IUniswapV3PoolState.positions(bytes32).feeGrowthInside0LastX128](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#L93) is too similar to [IUniswapV3PoolState.positions(bytes32).feeGrowthInside1LastX128](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#L94)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 93
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8eca85afb1816aea50cb0c5fc5499607823996d595eef751e70b1179c8d5338a"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3MintCallback.uniswapV3MintCallback(uint256,uint256,bytes).amount0Owed (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#14) is too similar to IUniswapV3MintCallback.uniswapV3MintCallback(uint256,uint256,bytes).amount1Owed (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#15)\n",
            "markdown": "Variable [IUniswapV3MintCallback.uniswapV3MintCallback(uint256,uint256,bytes).amount0Owed](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#L14) is too similar to [IUniswapV3MintCallback.uniswapV3MintCallback(uint256,uint256,bytes).amount1Owed](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#L15)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9159dfe1b2f9b09ef6531b8d813666aa8dfc97893e20a13bb3ae91958aabc9e3"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolState.ticks(int24).feeGrowthOutside0X128 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#70) is too similar to IUniswapV3PoolState.ticks(int24).feeGrowthOutside1X128 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#71)\n",
            "markdown": "Variable [IUniswapV3PoolState.ticks(int24).feeGrowthOutside0X128](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#L70) is too similar to [IUniswapV3PoolState.ticks(int24).feeGrowthOutside1X128](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#L71)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b401e3c1fdb05d822dcf20db2c9f36ca4e204a135a39707df32ad9392c3fb1ad"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#10) is too similar to IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol1 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#10)\n",
            "markdown": "Variable [IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L10) is too similar to [IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol1](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L10)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c2dc431518a2d418698e6eae62d4ae9d66bcd4e80fa9b421643c65092a1ace9f"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#20) is too similar to IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#48)\n",
            "markdown": "Variable [IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L20) is too similar to [IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L48)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e03acf773ab0af28cd2111f213d24ad87e65df97a7d4212f577216bdb0656a26"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#65) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#66)\n",
            "markdown": "Variable [Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal0X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L65) is too similar to [Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal1X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L66)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "07c5c1bab972da77c7c254afa306c068eff9891cf9fbbfb6459b275725f7d816"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#830) is too similar to IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol1 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#10)\n",
            "markdown": "Variable [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L830) is too similar to [IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol1](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L10)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 830,
                  "endLine": 830
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0bd056682dabdee9ab52ff74e917abe6d7b98d2adbf3d1c055395ca4765937bf"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846) is too similar to IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol1 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#10)\n",
            "markdown": "Variable [MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L846) is too similar to [IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol1](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L10)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 846,
                  "endLine": 846
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "11378ce56077e5c29e612a5a7deacf96bd7a4b5da7fb0453a05e396398462be0"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#811) is too similar to MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#790)\n",
            "markdown": "Variable [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance0Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L811) is too similar to [MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance1Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L790)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 811,
                  "endLine": 811
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "123a33a24f1f595a07976e4bdc700a0031bc4beb2d2f8a2382b71c1f16cc3d2b"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#202) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#203)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L202) is too similar to [SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L203)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "13793e19b95c8444f4c324b129b861cdcacf1201e58d1c6eae028cbdf01efb82"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#171) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#66)\n",
            "markdown": "Variable [Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal0X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L171) is too similar to [Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal1X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L66)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 171
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "164481bbb84c283112161867c8eaeb88c12f8a9861fb61a84b62cf8338b8c0ab"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#218) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#203)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L218) is too similar to [SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L203)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1fb16e10492983eee9ec9149defde5bd00867ec3005ade6e7c3c3178d147da81"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#154) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#203)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L154) is too similar to [SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L203)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 154
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2b9fe743b433ed2292b2f067be825ec51bb16a764e1f9129995fdc3bac24ed2d"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Position.update(Position.Info,int128,uint256,uint256).feeGrowthInside0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#47) is too similar to Position.update(Position.Info,int128,uint256,uint256).feeGrowthInside1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#48)\n",
            "markdown": "Variable [Position.update(Position.Info,int128,uint256,uint256).feeGrowthInside0X128](node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#L47) is too similar to [Position.update(Position.Info,int128,uint256,uint256).feeGrowthInside1X128](node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#L48)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Position.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2d45f0b6ee3675147213f6e5c15c06b338f5d3d5bc635493bb7dbde8e89dcfb8"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#218) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#219)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L218) is too similar to [SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L219)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2e3046e6fc6632f9aeefa421c83aa7395aa106cd9367534e200aa4629a184c63"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#218) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#184)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L218) is too similar to [SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L184)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2e8492559dbaa1e7b51a6744bfafa28a1eef8a9cd3dba05c707c0fd5631f7755"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#218) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#155)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L218) is too similar to [SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L155)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2f362f9d669d403e58d23a8fc91acda50126cb07477d92faf9017225a19d21b2"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#202) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#219)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L202) is too similar to [SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L219)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "30ea48141a741883f86a8122cd386ae3337f06af83bad1470a50da66028676a7"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#20) is too similar to MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#504)\n",
            "markdown": "Variable [IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L20) is too similar to [MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L504)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "37131b979c3503d2db9e716ad85502aaa3758c2a45cc94b20773bd2f502a4ce0"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#115) is too similar to Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#172)\n",
            "markdown": "Variable [Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal0X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L115) is too similar to [Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal1X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L172)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3cf4e5e807011982d37b508f1c3d16584ae7af76c20ca25e987684dc3bf89507"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.feeGrowthGlobal0X128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#83) is too similar to MockUniswapV3Pool.feeGrowthGlobal1X128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#85)\n",
            "markdown": "Variable [MockUniswapV3Pool.feeGrowthGlobal0X128](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L83) is too similar to [MockUniswapV3Pool.feeGrowthGlobal1X128](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L85)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "487afed39033812ddfe2b2906d841c777d2b086857cc9c0537db616f9d262f67"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#154) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#184)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L154) is too similar to [SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L184)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 154
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4996c82bc3de3e91377f7c1c997691a472fe6ed4c5f9487d641b1c1ca040abde"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#65) is too similar to Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#172)\n",
            "markdown": "Variable [Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal0X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L65) is too similar to [Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal1X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L172)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4f5e1ccd2d294f26c1ad19d2db735f1e76a2e170464754ef67415fbb574f67a2"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#503) is too similar to MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#504)\n",
            "markdown": "Variable [MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L503) is too similar to [MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L504)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 503,
                  "endLine": 503
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5277426589050400d35fad8e8b20e6586b07a9b5588aaed045affeea4d10aabe"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#183) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#184)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L183) is too similar to [SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L184)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "53784410e0beb7a93695a98f963d02e1afe38c7da3b67fa0a8630c243be1f860"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.snapshotCumulativesInside(int24,int24).secondsPerLiquidityOutsideLowerX128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#181) is too similar to MockUniswapV3Pool.snapshotCumulativesInside(int24,int24).secondsPerLiquidityOutsideUpperX128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#182)\n",
            "markdown": "Variable [MockUniswapV3Pool.snapshotCumulativesInside(int24,int24).secondsPerLiquidityOutsideLowerX128](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L181) is too similar to [MockUniswapV3Pool.snapshotCumulativesInside(int24,int24).secondsPerLiquidityOutsideUpperX128](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L182)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 181
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "60fc687741bf4367e44557fdfa52c92c438c8c3d164de37ba9d942b223dff0ec"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable CurveFacet.removeLiquidityImbalance(address,address,uint256[],uint256,LibTransfer.From,LibTransfer.To).coins_scope_0 (contracts/beanstalk/farm/CurveFacet.sol#294) is too similar to CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).coins_scope_6 (contracts/beanstalk/farm/CurveFacet.sol#224)\n",
            "markdown": "Variable [CurveFacet.removeLiquidityImbalance(address,address,uint256[],uint256,LibTransfer.From,LibTransfer.To).coins_scope_0](contracts/beanstalk/farm/CurveFacet.sol#L294) is too similar to [CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).coins_scope_6](contracts/beanstalk/farm/CurveFacet.sol#L224)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 294,
                  "endLine": 294
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "62726b1267bbdcc1fe3f4b9fe7d0e7a17d7303a40635c84c133ae84aeca76e16"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#811) is too similar to MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#488)\n",
            "markdown": "Variable [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance0Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L811) is too similar to [MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L488)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 811,
                  "endLine": 811
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "63172f062573df18208646f8ae7ff3d15803c5d360fe8b8579d08426cf195d28"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#859) is too similar to IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#48)\n",
            "markdown": "Variable [MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L859) is too similar to [IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L48)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 859,
                  "endLine": 859
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6541f0abda17fc73cad1f4322a0c65a34e4a3ca525408c6831ffdbc92b3e5335"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24).feeGrowthInside0X128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#448) is too similar to MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24).feeGrowthInside1X128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#448)\n",
            "markdown": "Variable [MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24).feeGrowthInside0X128](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L448) is too similar to [MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24).feeGrowthInside1X128](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L448)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 448,
                  "endLine": 448
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7115a61277508c3754c10dbe1733d68bed1b1dadc41b6ba3b109cad87d15abed"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#183) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#203)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L183) is too similar to [SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L203)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8063513f00274409f29c527ccb961255974ecad86a6141f2291a833162799bbb"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#171) is too similar to Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#172)\n",
            "markdown": "Variable [Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal0X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L171) is too similar to [Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal1X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L172)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 171
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "80ac98a2a226b2de7bbb6c7b3077e72d34564b2eb2620b1e4bf14b0aa76b2c0c"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#503) is too similar to IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#48)\n",
            "markdown": "Variable [MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L503) is too similar to [IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L48)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 503,
                  "endLine": 503
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "85712c3c387053078adffd6736f80a4ccb9d96f44dacd5983f359cc59d5bb52e"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#202) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#155)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L202) is too similar to [SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L155)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8843ec3a5d315bd5b81a179c4255868dff04093cbc260e807df8ecc288a784a8"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#65) is too similar to Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#116)\n",
            "markdown": "Variable [Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal0X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L65) is too similar to [Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal1X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L116)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "908136e4bd67c4d8248cab028a19167f3cc3372c0013170d80429a2d51926404"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#859) is too similar to IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#21)\n",
            "markdown": "Variable [MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L859) is too similar to [IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L21)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 859,
                  "endLine": 859
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "915bfc3e9eef17eb7757c026e061a13aa36464f6c479482364a329673a95e249"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#183) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#155)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L183) is too similar to [SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L155)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a7af0c9547b54e97d3ae83080a7f3be35a42d75743020979a079363f4ecd115"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#487) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#812)\n",
            "markdown": "Variable [MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L487) is too similar to [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance1Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L812)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 487,
                  "endLine": 487
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9e0d585a16462cfe82b728228d9902db169f89747288b6841bc5c0b509d658e2"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#859) is too similar to MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#504)\n",
            "markdown": "Variable [MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L859) is too similar to [MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L504)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 859,
                  "endLine": 859
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a37e37cac6dbef771fc8586e0a46adac16e5e5e8c5dace2a21ee3f890670e81c"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#503) is too similar to MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#860)\n",
            "markdown": "Variable [MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L503) is too similar to [MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L860)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 503,
                  "endLine": 503
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a6258be62a11321e2fd79e4ee43ab3e13da1325fb643aabf1b33dbf53281cfea"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#171) is too similar to Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#116)\n",
            "markdown": "Variable [Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal0X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L171) is too similar to [Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal1X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L116)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 171
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a7c80d23f37f66257a269cec9292f4ea293a811376f3dd1f4f49ac7480b1c554"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#10) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#836)\n",
            "markdown": "Variable [IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L10) is too similar to [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol1](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L836)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "afa2e38e167d4f3ec3a317cb6dd7a4e11f0364cc4f0a1592b66d234c066998fa"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#487) is too similar to MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#790)\n",
            "markdown": "Variable [MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L487) is too similar to [MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance1Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L790)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 487,
                  "endLine": 487
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b098dab9aa9b98d5ccdc9d5314759213268aa9dab8203708d0f5da9ef9f1921f"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#115) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#66)\n",
            "markdown": "Variable [Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal0X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L115) is too similar to [Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal1X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L66)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b63baaa982341f004a9b80e9097626d3fbb3fc141459260c621f165d1913bb02"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#784) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#812)\n",
            "markdown": "Variable [MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance0Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L784) is too similar to [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance1Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L812)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 784,
                  "endLine": 784
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b7973027e9b1713873da0d953a7be3644cbdf8ce7da951e99c22d908736d2895"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance0After (contracts/mocks/uniswap/MockUniswapV3Pool.sol#819) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance1After (contracts/mocks/uniswap/MockUniswapV3Pool.sol#820)\n",
            "markdown": "Variable [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance0After](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L819) is too similar to [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance1After](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L820)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 819,
                  "endLine": 819
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b8e13520bb8e7521e80679bce8ea75a20684ed7253d7c2b52f8dc9e00e6da9c6"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#859) is too similar to MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#860)\n",
            "markdown": "Variable [MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L859) is too similar to [MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L860)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 859,
                  "endLine": 859
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bbbeb61ebac8c471f3587282e233abc7c3ae9c9dca2d788f852246692f5e63e3"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#183) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#219)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L183) is too similar to [SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L219)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bc6f0105c4646357a3cd910090a0ca1b9e223192a3780e78f023fca800c25184"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthBelow0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#72) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthBelow1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#73)\n",
            "markdown": "Variable [Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthBelow0X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L72) is too similar to [Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthBelow1X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L73)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c02c068a1f67b85282e0fe4dd3f4a1fbacf2e0f8a8aa5848ea8ecb0b17563551"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#836)\n",
            "markdown": "Variable [MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L846) is too similar to [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol1](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L836)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 846,
                  "endLine": 846
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c076f7f1603ea92a39cdec3e7c0b0f3a844414bee64c5397e87e0d8d81a881fd"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#202) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#184)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L202) is too similar to [SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L184)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 202,
                  "endLine": 202
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c657b9c79afd47c92ac95b29932cf85ee65dce7fc7927cf5a97a8425dcd153dc"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#154) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#155)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L154) is too similar to [SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L155)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 154
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c6e2c94de57d9a32f198c5fb7bdeb6778215fb4f579ec74ae6f556736276c2f6"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthAbove0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#83) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthAbove1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#84)\n",
            "markdown": "Variable [Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthAbove0X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L83) is too similar to [Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthAbove1X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L84)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c7b68490bee841a3fb63eab5d30387e7698004689e90d5114f8a6d7ba9cc6d58"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#830) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#836)\n",
            "markdown": "Variable [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L830) is too similar to [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol1](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L836)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 830,
                  "endLine": 830
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cee9f0168b3d40610229fdfbe4cec0b6e85c8890251492bb916ea2c25c841333"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#10) is too similar to MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846)\n",
            "markdown": "Variable [IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol0](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L10) is too similar to [MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol1](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L846)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cf89dbf0566c79a4d5720f6c8279a1fc4b0355f9ac1dea00c9808a82467f6e1e"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#811) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#812)\n",
            "markdown": "Variable [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance0Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L811) is too similar to [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance1Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L812)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 811,
                  "endLine": 811
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d15348b12e33f2ab4834f275af84fe872f6a16af0dc564c0bcefa5601feba7fb"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24)._feeGrowthGlobal0X128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#397) is too similar to MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24)._feeGrowthGlobal1X128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#398)\n",
            "markdown": "Variable [MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24)._feeGrowthGlobal0X128](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L397) is too similar to [MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24)._feeGrowthGlobal1X128](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L398)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 397,
                  "endLine": 397
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d1b80abc4612f88107e69fa5fa23c084518def2870407718016838fcc3d81fd9"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#47) is too similar to MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#504)\n",
            "markdown": "Variable [IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L47) is too similar to [MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L504)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d5de02562a15b588ee98ca9b20d795a7e2eb5cb2fbd9d3cff024dfd9ae208996"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).amountsOut_scope_2 (contracts/beanstalk/farm/CurveFacet.sol#204-208) is too similar to CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).amountsOut_scope_4 (contracts/beanstalk/farm/CurveFacet.sol#211-220)\n",
            "markdown": "Variable [CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).amountsOut_scope_2](contracts/beanstalk/farm/CurveFacet.sol#L204-L208) is too similar to [CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).amountsOut_scope_4](contracts/beanstalk/farm/CurveFacet.sol#L211-L220)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/farm/CurveFacet.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 208
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d6f10516bc7b34bd88b9194ff9a5a3aa4b668a0a20767301abaea86198f03f47"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#784) is too similar to MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#488)\n",
            "markdown": "Variable [MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance0Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L784) is too similar to [MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L488)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 784,
                  "endLine": 784
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d8cfd4e72f275e98c5322c590ae45b5647e85fcc8ebcb917d3720a9d6a3184d5"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#20) is too similar to MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#860)\n",
            "markdown": "Variable [IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L20) is too similar to [MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L860)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dadc4129932b1c52ceb3eb9585e52a0f5f890429e0804fd45158c4a9b445698e"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#784) is too similar to MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#790)\n",
            "markdown": "Variable [MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance0Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L784) is too similar to [MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance1Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L790)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 784,
                  "endLine": 784
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "db7d15c7405d5e8d76fe707454420939225a82018d9798548c001961b0a27688"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#503) is too similar to IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#21)\n",
            "markdown": "Variable [MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L503) is too similar to [IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#L21)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 503,
                  "endLine": 503
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "df3be4fdb8dfd23296974ef6ecb2620c43d4e488f152cd60b02312a3c22311b1"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#154) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#219)\n",
            "markdown": "Variable [SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L154) is too similar to [SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96](node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#L219)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 154
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ed481b6f52cdbdf6b7d2ca15fa6056860f050e60cd7869701b4326a32b557231"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Position.update(Position.Info,int128,uint256,uint256).tokensOwed0 (node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#61-68) is too similar to Position.update(Position.Info,int128,uint256,uint256).tokensOwed1 (node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#69-76)\n",
            "markdown": "Variable [Position.update(Position.Info,int128,uint256,uint256).tokensOwed0](node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#L61-L68) is too similar to [Position.update(Position.Info,int128,uint256,uint256).tokensOwed1](node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#L69-L76)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Position.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 68
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eedce5b58f9065d99668a6500f513e815636509d04b36e1509de75e43f3ff59a"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#830) is too similar to MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846)\n",
            "markdown": "Variable [MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L830) is too similar to [MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol1](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L846)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 830,
                  "endLine": 830
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f24c868fafad73b7441009a5071636e17c75b4050aa7c643c3d70e61772c94cd"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#487) is too similar to MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#488)\n",
            "markdown": "Variable [MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L487) is too similar to [MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L488)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 487,
                  "endLine": 487
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f43164a51d521b6c0d91933b07ae1709b2786fffba1dd9857dda4edb8039254e"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthInside0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#67) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthInside1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#67)\n",
            "markdown": "Variable [Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthInside0X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L67) is too similar to [Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthInside1X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L67)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fb17b55df6156db232311391d93adb711a15a2e93891213affc92f27c95d6b38"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846) is too similar to MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846)\n",
            "markdown": "Variable [MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol0](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L846) is too similar to [MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol1](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L846)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Pool.sol"
                },
                "region": {
                  "startLine": 846,
                  "endLine": 846
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fbca28f2c6ae7d21281d5ab556b836e6eabbb26f74e780c51cae30a117055624"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#47) is too similar to MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#860)\n",
            "markdown": "Variable [IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested](node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#L47) is too similar to [MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested](contracts/mocks/uniswap/MockUniswapV3Pool.sol#L860)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fbca91b48416d6d374d2feadab69590212cdc0e3c6bd9d0d000e42f24da21d44"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#115) is too similar to Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#116)\n",
            "markdown": "Variable [Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal0X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L115) is too similar to [Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal1X128](node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#L116)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fdc6b393181c875baa264ebfc0a491f2c3f1cc9bb345f34915feb7065300b7bb"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "BitMath.mostSignificantBit(uint256) (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#13-45) uses literals with too many digits:\n\t- x >= 0x100000000000000000000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#16)\n",
            "markdown": "[BitMath.mostSignificantBit(uint256)](node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#L13-L45) uses literals with too many digits:\n\t- [x >= 0x100000000000000000000000000000000](node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#L16)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5571c103182babd5a05a46d97e3ac137c9e9d4bbffae5450ac4cf1f0593a941d"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "BitMath.mostSignificantBit(uint256) (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#13-45) uses literals with too many digits:\n\t- x >= 0x10000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#20)\n",
            "markdown": "[BitMath.mostSignificantBit(uint256)](node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#L13-L45) uses literals with too many digits:\n\t- [x >= 0x10000000000000000](node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#L20)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b04249b164c9049c98345cca3089b95dbe981f6a5f6d381ee15729dbe809fdb1"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "BitMath.mostSignificantBit(uint256) (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#13-45) uses literals with too many digits:\n\t- x >= 0x100000000 (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#24)\n",
            "markdown": "[BitMath.mostSignificantBit(uint256)](node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#L13-L45) uses literals with too many digits:\n\t- [x >= 0x100000000](node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#L24)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d57079272eeb66db1fbcb2897de66eb1963a87a13558f726e4c53695cb573c48"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "FixedPoint96.slitherConstructorConstantVariables() (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#7-10) uses literals with too many digits:\n\t- Q96 = 0x1000000000000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#9)\n",
            "markdown": "[FixedPoint96.slitherConstructorConstantVariables()](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#L7-L10) uses literals with too many digits:\n\t- [Q96 = 0x1000000000000000000000000](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#L9)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b3fe0e4e23639d45b310c6a0d4a951ec6c8f7ed3e196526d4abc004d297b104b"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "FixedPoint128.slitherConstructorConstantVariables() (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#6-8) uses literals with too many digits:\n\t- Q128 = 0x100000000000000000000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#7)\n",
            "markdown": "[FixedPoint128.slitherConstructorConstantVariables()](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#L6-L8) uses literals with too many digits:\n\t- [Q128 = 0x100000000000000000000000000000000](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#L7)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 8
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f83741f10d959a06db6ef282125d4aeccc2a537f9a5f9c30c3726a2ed9873141"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "InitBip8.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip8.sol#15-33) uses literals with too many digits:\n\t- beanstalkFarmsBudget = 1200000 * 1e6 (contracts/beanstalk/init/InitBip8.sol#24)\n",
            "markdown": "[InitBip8.slitherConstructorConstantVariables()](contracts/beanstalk/init/InitBip8.sol#L15-L33) uses literals with too many digits:\n\t- [beanstalkFarmsBudget = 1200000 * 1e6](contracts/beanstalk/init/InitBip8.sol#L24)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip8.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "009fc149c65222a0f17346a01fc62c2afa23ea6bb59155a18a057403fe49549d"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "MockMeta3Curve.slitherConstructorVariables() (contracts/mocks/curve/MockMeta3Curve.sol#41-710) uses literals with too many digits:\n\t- fee = 4000000 (contracts/mocks/curve/MockMeta3Curve.sol#61)\n",
            "markdown": "[MockMeta3Curve.slitherConstructorVariables()](contracts/mocks/curve/MockMeta3Curve.sol#L41-L710) uses literals with too many digits:\n\t- [fee = 4000000](contracts/mocks/curve/MockMeta3Curve.sol#L61)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 710
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c2514a07792428a3e112ab3ebee13733fec3394a297674f99f8001fde419534"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "MockPlainCurve.slitherConstructorVariables() (contracts/mocks/curve/MockPlainCurve.sol#21-517) uses literals with too many digits:\n\t- fee = 4000000 (contracts/mocks/curve/MockPlainCurve.sol#41)\n",
            "markdown": "[MockPlainCurve.slitherConstructorVariables()](contracts/mocks/curve/MockPlainCurve.sol#L21-L517) uses literals with too many digits:\n\t- [fee = 4000000](contracts/mocks/curve/MockPlainCurve.sol#L41)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 517
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "272471bfba0cf585953d6f4e0dbb1de2f6139bd1e8224f5682067da8fec749e7"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "Listing.getAmountPodsFromFillListing(uint24,uint256,uint256) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#251-256) uses literals with too many digits:\n\t- remainingAmount <= (1000000 / pricePerPod) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#255)\n",
            "markdown": "[Listing.getAmountPodsFromFillListing(uint24,uint256,uint256)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L251-L256) uses literals with too many digits:\n\t- [remainingAmount <= (1000000 / pricePerPod)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L255)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Listing.sol"
                },
                "region": {
                  "startLine": 251,
                  "endLine": 256
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2f8f17d5e782e89be62156657d188997503338273da2513ac6391110432a56cb"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "MockUniswapV3Factory.enableFeeAmount(uint24,int24) (contracts/mocks/uniswap/MockUniswapV3Factory.sol#61-72) uses literals with too many digits:\n\t- require(bool)(fee < 1000000) (contracts/mocks/uniswap/MockUniswapV3Factory.sol#63)\n",
            "markdown": "[MockUniswapV3Factory.enableFeeAmount(uint24,int24)](contracts/mocks/uniswap/MockUniswapV3Factory.sol#L61-L72) uses literals with too many digits:\n\t- [require(bool)(fee < 1000000)](contracts/mocks/uniswap/MockUniswapV3Factory.sol#L63)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/uniswap/MockUniswapV3Factory.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 72
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "35b4998d4a029d71c6b31462bee6ba06a7393172505cff58db3f85daef192312"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "Order.getAmountBeansToFillOrderV2(uint256,uint256,bytes) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#191-198) uses literals with too many digits:\n\t- beanAmount = beanAmount.div(1000000) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#197)\n",
            "markdown": "[Order.getAmountBeansToFillOrderV2(uint256,uint256,bytes)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L191-L198) uses literals with too many digits:\n\t- [beanAmount = beanAmount.div(1000000)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L197)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 191,
                  "endLine": 198
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3b3b9ba48bab980e188e11f84e3a817fc28059cbae9cca43a95e374f8b8a2a7a"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "InitBip12.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip12.sol#19-34) uses literals with too many digits:\n\t- PAYMENT = 5000000000 (contracts/beanstalk/init/InitBip12.sol#22)\n",
            "markdown": "[InitBip12.slitherConstructorConstantVariables()](contracts/beanstalk/init/InitBip12.sol#L19-L34) uses literals with too many digits:\n\t- [PAYMENT = 5000000000](contracts/beanstalk/init/InitBip12.sol#L22)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip12.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "475bb5d59e1ca0f777bddcee003e6d39e9ec940a4b9c03cdc70457525cf6317c"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "InitBip16.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip16.sol#20-34) uses literals with too many digits:\n\t- PAYMENT = 5000000000 (contracts/beanstalk/init/InitBip16.sol#23)\n",
            "markdown": "[InitBip16.slitherConstructorConstantVariables()](contracts/beanstalk/init/InitBip16.sol#L20-L34) uses literals with too many digits:\n\t- [PAYMENT = 5000000000](contracts/beanstalk/init/InitBip16.sol#L23)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip16.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "503553b25eb5e4165ad8df3c6fafc064accb03b04a2d79e3b930500f6687f621"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "Listing.getAmountPodsFromFillListingV2(uint256,uint256,uint256,bytes) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#258-269) uses literals with too many digits:\n\t- remainingAmount <= (1000000 / pricePerPod) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#268)\n",
            "markdown": "[Listing.getAmountPodsFromFillListingV2(uint256,uint256,uint256,bytes)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L258-L269) uses literals with too many digits:\n\t- [remainingAmount <= (1000000 / pricePerPod)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L268)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Listing.sol"
                },
                "region": {
                  "startLine": 258,
                  "endLine": 269
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7a224551790081f9c746eb669ce4c6ceca085a507ecfd284f2808518f682f462"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "MockPlainCurve.slitherConstructorConstantVariables() (contracts/mocks/curve/MockPlainCurve.sol#21-517) uses literals with too many digits:\n\t- ADMIN_FEE = 5000000000 (contracts/mocks/curve/MockPlainCurve.sol#28)\n",
            "markdown": "[MockPlainCurve.slitherConstructorConstantVariables()](contracts/mocks/curve/MockPlainCurve.sol#L21-L517) uses literals with too many digits:\n\t- [ADMIN_FEE = 5000000000](contracts/mocks/curve/MockPlainCurve.sol#L28)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 517
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "83394536420a83bfd4e6697cb8c96aef091b64d8a0ae21e9ffc254ae86f19781"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "LibMetaCurveConvert.slitherConstructorConstantVariables() (contracts/libraries/Convert/LibMetaCurveConvert.sol#17-89) uses literals with too many digits:\n\t- FEED2 = 2000000 (contracts/libraries/Convert/LibMetaCurveConvert.sol#22)\n",
            "markdown": "[LibMetaCurveConvert.slitherConstructorConstantVariables()](contracts/libraries/Convert/LibMetaCurveConvert.sol#L17-L89) uses literals with too many digits:\n\t- [FEED2 = 2000000](contracts/libraries/Convert/LibMetaCurveConvert.sol#L22)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Convert/LibMetaCurveConvert.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 89
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "91651fd40a747c121dae558a230de6d4205d0985bbfc1f9a861bb8a2b13a9d52"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) uses literals with too many digits:\n\t- ratio = 0x100000000000000000000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#27)\n",
            "markdown": "[TickMath.getSqrtRatioAtTick(int24)](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L23-L54) uses literals with too many digits:\n\t- [ratio = 0x100000000000000000000000000000000](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a23304e1cfff0f932f12c2608fe05e6d29287d1e02c6b72bbad5589903947d05"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "Listing.getAmountPodsFromFillListingV2(uint256,uint256,uint256,bytes) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#258-269) uses literals with too many digits:\n\t- amount = (fillBeanAmount.mul(1000000)) / pricePerPod (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#265)\n",
            "markdown": "[Listing.getAmountPodsFromFillListingV2(uint256,uint256,uint256,bytes)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L258-L269) uses literals with too many digits:\n\t- [amount = (fillBeanAmount.mul(1000000)) / pricePerPod](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L265)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Listing.sol"
                },
                "region": {
                  "startLine": 258,
                  "endLine": 269
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a7c71f1c7061796f6dabb17e681dec31113511d54af2d7514619650d3a575c15"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "Order._fillPodOrder(Order.PodOrder,uint256,uint256,uint256,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#92-117) uses literals with too many digits:\n\t- costInBeans = amount.mul(o.pricePerPod).div(1000000) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#105)\n",
            "markdown": "[Order._fillPodOrder(Order.PodOrder,uint256,uint256,uint256,LibTransfer.To)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L92-L117) uses literals with too many digits:\n\t- [costInBeans = amount.mul(o.pricePerPod).div(1000000)](contracts/beanstalk/market/MarketplaceFacet/Order.sol#L105)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Order.sol"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b910f2a1edd1e9f763a2532c7f5b719a5e1c8ec904a6cb71b9271acb9a3d89bc"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "InitBip11.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip11.sol#16-33) uses literals with too many digits:\n\t- DUMPLING_PAYMENT = 1000000000 (contracts/beanstalk/init/InitBip11.sol#26)\n",
            "markdown": "[InitBip11.slitherConstructorConstantVariables()](contracts/beanstalk/init/InitBip11.sol#L16-L33) uses literals with too many digits:\n\t- [DUMPLING_PAYMENT = 1000000000](contracts/beanstalk/init/InitBip11.sol#L26)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip11.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c7773f829adadbcadd97a47f42c87c218cf4ed53a765c9d6e0b0c4402b1c7e19"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "InitBip11.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip11.sol#16-33) uses literals with too many digits:\n\t- PAYMENT = 4000000000 (contracts/beanstalk/init/InitBip11.sol#23)\n",
            "markdown": "[InitBip11.slitherConstructorConstantVariables()](contracts/beanstalk/init/InitBip11.sol#L16-L33) uses literals with too many digits:\n\t- [PAYMENT = 4000000000](contracts/beanstalk/init/InitBip11.sol#L23)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip11.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d01376f1e717608f9541568feb7c3e36b511af6cf282225571f06d3dc5ccd33c"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "MockMeta3Curve.slitherConstructorConstantVariables() (contracts/mocks/curve/MockMeta3Curve.sol#41-710) uses literals with too many digits:\n\t- ADMIN_FEE = 5000000000 (contracts/mocks/curve/MockMeta3Curve.sol#48)\n",
            "markdown": "[MockMeta3Curve.slitherConstructorConstantVariables()](contracts/mocks/curve/MockMeta3Curve.sol#L41-L710) uses literals with too many digits:\n\t- [ADMIN_FEE = 5000000000](contracts/mocks/curve/MockMeta3Curve.sol#L48)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 710
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dbb31ccb7e3544c2cdf020705b501326a7e766bb92ef4a9fee76972d77bf475e"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "InitBip9.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip9.sol#16-33) uses literals with too many digits:\n\t- PAYMENT = 6000000000 (contracts/beanstalk/init/InitBip9.sol#22)\n",
            "markdown": "[InitBip9.slitherConstructorConstantVariables()](contracts/beanstalk/init/InitBip9.sol#L16-L33) uses literals with too many digits:\n\t- [PAYMENT = 6000000000](contracts/beanstalk/init/InitBip9.sol#L22)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip9.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e723219ccd7da9da3ee9b6dc503c34e9418343199d01a3889c52c572e428af56"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "InitBip8.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip8.sol#15-33) uses literals with too many digits:\n\t- beanSproutBudget = 800000 * 1e6 (contracts/beanstalk/init/InitBip8.sol#23)\n",
            "markdown": "[InitBip8.slitherConstructorConstantVariables()](contracts/beanstalk/init/InitBip8.sol#L15-L33) uses literals with too many digits:\n\t- [beanSproutBudget = 800000 * 1e6](contracts/beanstalk/init/InitBip8.sol#L23)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip8.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eb3488a6889094544440e02e3420a9b0b5385c0091adae0b6adbcd51c3405319"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "Listing.getAmountPodsFromFillListing(uint24,uint256,uint256) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#251-256) uses literals with too many digits:\n\t- amount = (fillBeanAmount * 1000000) / pricePerPod (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#252)\n",
            "markdown": "[Listing.getAmountPodsFromFillListing(uint24,uint256,uint256)](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L251-L256) uses literals with too many digits:\n\t- [amount = (fillBeanAmount * 1000000) / pricePerPod](contracts/beanstalk/market/MarketplaceFacet/Listing.sol#L252)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/market/MarketplaceFacet/Listing.sol"
                },
                "region": {
                  "startLine": 251,
                  "endLine": 256
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f250527812dcfed42ec3b10a22cd8fce12f1141294f0067703d1a924feea89ed"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "DecimalExtended.PERCENT_BASE (contracts/beanstalk/sun/SeasonFacet/Weather.sol#11) is never used in DecimalExtended (contracts/beanstalk/sun/SeasonFacet/Weather.sol#10-16)\n",
            "markdown": "[DecimalExtended.PERCENT_BASE](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L11) is never used in [DecimalExtended](contracts/beanstalk/sun/SeasonFacet/Weather.sol#L10-L16)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/sun/SeasonFacet/Weather.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1466b31e0141262fd0d848c1c10fea30c8311b6cf4cb28da76b67da948244e3e"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "C.WETH (contracts/C.sol#69) is never used in C (contracts/C.sol#17-198)\n",
            "markdown": "[C.WETH](contracts/C.sol#L69) is never used in [C](contracts/C.sol#L17-L198)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/C.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3841bf80622618f7c3decbae87de656217ca2064d43ef0f6453d8023efc14bb0"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "C.SOP_PRECISION (contracts/C.sol#33) is never used in C (contracts/C.sol#17-198)\n",
            "markdown": "[C.SOP_PRECISION](contracts/C.sol#L33) is never used in [C](contracts/C.sol#L17-L198)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/C.sol"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3c12106166705ebad21158a05f319f3acc7438a3fb351dc7419ffd3350208fa6"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "C.BASE_FEE_CONTRACT (contracts/C.sol#73) is never used in C (contracts/C.sol#17-198)\n",
            "markdown": "[C.BASE_FEE_CONTRACT](contracts/C.sol#L73) is never used in [C](contracts/C.sol#L17-L198)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/C.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6c1835eb2e373ad3312513156851c0f55a42340b1118b4240a040f5c0668696b"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "InitDiamond.PEG_PAIR (contracts/beanstalk/init/InitDiamond.sol#29) is never used in InitDiamond (contracts/beanstalk/init/InitDiamond.sol#23-71)\n",
            "markdown": "[InitDiamond.PEG_PAIR](contracts/beanstalk/init/InitDiamond.sol#L29) is never used in [InitDiamond](contracts/beanstalk/init/InitDiamond.sol#L23-L71)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitDiamond.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6e70b7f1c95ec6358ee4ef748abc49f4db8cd63cc7b83435fc1420a089d16fa8"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "Diamond.s (contracts/beanstalk/Diamond.sol#21) is never used in Diamond (contracts/beanstalk/Diamond.sol#20-56)\n",
            "markdown": "[Diamond.s](contracts/beanstalk/Diamond.sol#L21) is never used in [Diamond](contracts/beanstalk/Diamond.sol#L20-L56)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/Diamond.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "75f719b28bd0051aae6c97cf53095540e125ac21a4eba44304210dffd3bf1974"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "InitBip11.s (contracts/beanstalk/init/InitBip11.sol#18) is never used in InitBip11 (contracts/beanstalk/init/InitBip11.sol#16-33)\n",
            "markdown": "[InitBip11.s](contracts/beanstalk/init/InitBip11.sol#L18) is never used in [InitBip11](contracts/beanstalk/init/InitBip11.sol#L16-L33)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip11.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "775f8ab97368dfb31fd8e31f80b3c6c02118a129133c2986fe32d87b03148fef"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "MockDiamond.s (contracts/mocks/MockDiamond.sol#20) is never used in MockDiamond (contracts/mocks/MockDiamond.sol#19-55)\n",
            "markdown": "[MockDiamond.s](contracts/mocks/MockDiamond.sol#L20) is never used in [MockDiamond](contracts/mocks/MockDiamond.sol#L19-L55)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockDiamond.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9f7d97a0a83a3a8167df7e83bac86926081783d6919b294cf0866df871bc0687"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "InitOmnisciaAudit.s (contracts/beanstalk/init/InitOmnisciaAudit.sol#15) is never used in InitOmnisciaAudit (contracts/beanstalk/init/InitOmnisciaAudit.sol#13-23)\n",
            "markdown": "[InitOmnisciaAudit.s](contracts/beanstalk/init/InitOmnisciaAudit.sol#L15) is never used in [InitOmnisciaAudit](contracts/beanstalk/init/InitOmnisciaAudit.sol#L13-L23)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitOmnisciaAudit.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cc56d42fe22bda976adca56b6f6582864749568eb9c6f3427898e7649dd6cf68"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "InitBip0.s (contracts/beanstalk/init/InitBip0.sol#21) is never used in InitBip0 (contracts/beanstalk/init/InitBip0.sol#17-78)\n",
            "markdown": "[InitBip0.s](contracts/beanstalk/init/InitBip0.sol#L21) is never used in [InitBip0](contracts/beanstalk/init/InitBip0.sol#L17-L78)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitBip0.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d0fc2bcd0ba8fcd83d5c9a946a4dae1de47936625986a7a749213e05a0d49c56"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "LibBeanMetaCurve.i (contracts/libraries/Curve/LibBeanMetaCurve.sol#21) is never used in LibBeanMetaCurve (contracts/libraries/Curve/LibBeanMetaCurve.sol#16-116)\n",
            "markdown": "[LibBeanMetaCurve.i](contracts/libraries/Curve/LibBeanMetaCurve.sol#L21) is never used in [LibBeanMetaCurve](contracts/libraries/Curve/LibBeanMetaCurve.sol#L16-L116)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibBeanMetaCurve.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ddfd3fb52798a21866389de20c41b78863d1568882aa46e836461b4032d8bb3f"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "InitHotFix4.s (contracts/beanstalk/init/InitHotFix4.sol#16) is never used in InitHotFix4 (contracts/beanstalk/init/InitHotFix4.sol#15-32)\n",
            "markdown": "[InitHotFix4.s](contracts/beanstalk/init/InitHotFix4.sol#L16) is never used in [InitHotFix4](contracts/beanstalk/init/InitHotFix4.sol#L15-L32)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/init/InitHotFix4.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "de16b43e83ee327d1f37b7c675fb595de10b71f219557aa4f76c844bffcca7b9"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "MetadataFacet.s (contracts/beanstalk/metadata/MetadataFacet.sol#31) is never used in MetadataFacet (contracts/beanstalk/metadata/MetadataFacet.sol#28-85)\n",
            "markdown": "[MetadataFacet.s](contracts/beanstalk/metadata/MetadataFacet.sol#L31) is never used in [MetadataFacet](contracts/beanstalk/metadata/MetadataFacet.sol#L28-L85)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/beanstalk/metadata/MetadataFacet.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "efd2eac8f4db4acc599b1fe6b0c082c4a208dda8945f4aecebfb66a33657a3b2"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "LibBeanMetaCurve.j (contracts/libraries/Curve/LibBeanMetaCurve.sol#22) is never used in LibBeanMetaCurve (contracts/libraries/Curve/LibBeanMetaCurve.sol#16-116)\n",
            "markdown": "[LibBeanMetaCurve.j](contracts/libraries/Curve/LibBeanMetaCurve.sol#L22) is never used in [LibBeanMetaCurve](contracts/libraries/Curve/LibBeanMetaCurve.sol#L16-L116)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libraries/Curve/LibBeanMetaCurve.sol"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fcd9c49f6202dc6f60884723080084266928a1ad6898e27df114e2e14490d388"
          }
        },
        {
          "ruleId": "4-0-constable-states",
          "message": {
            "text": "MockMeta3Curve.fee (contracts/mocks/curve/MockMeta3Curve.sol#61) should be constant \n",
            "markdown": "[MockMeta3Curve.fee](contracts/mocks/curve/MockMeta3Curve.sol#L61) should be constant \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockMeta3Curve.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d97ede29025de4f6a46322817c9bfe0a242ab33d6a43dd988e65bab3fbe014d9"
          }
        },
        {
          "ruleId": "4-0-constable-states",
          "message": {
            "text": "MockPlainCurve.fee (contracts/mocks/curve/MockPlainCurve.sol#41) should be constant \n",
            "markdown": "[MockPlainCurve.fee](contracts/mocks/curve/MockPlainCurve.sol#L41) should be constant \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/curve/MockPlainCurve.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f5c28237738881e18cb1ab623ac4d9dea992da0dbd93092e5912cc81b002224f"
          }
        }
      ]
    }
  ]
}