"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

enum Aggregation_interval {
  day
  hour
}

type BeaNFTUser {
  barnRaise: [Int!]
  basin: [Int!]
  genesis: [Int!]
  id: ID!
  winter: [Int!]
}

input BeaNFTUser_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BeaNFTUser_filter]
  barnRaise: [Int!]
  barnRaise_contains: [Int!]
  barnRaise_contains_nocase: [Int!]
  barnRaise_not: [Int!]
  barnRaise_not_contains: [Int!]
  barnRaise_not_contains_nocase: [Int!]
  basin: [Int!]
  basin_contains: [Int!]
  basin_contains_nocase: [Int!]
  basin_not: [Int!]
  basin_not_contains: [Int!]
  basin_not_contains_nocase: [Int!]
  genesis: [Int!]
  genesis_contains: [Int!]
  genesis_contains_nocase: [Int!]
  genesis_not: [Int!]
  genesis_not_contains: [Int!]
  genesis_not_contains_nocase: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [BeaNFTUser_filter]
  winter: [Int!]
  winter_contains: [Int!]
  winter_contains_nocase: [Int!]
  winter_not: [Int!]
  winter_not_contains: [Int!]
  winter_not_contains_nocase: [Int!]
}

enum BeaNFTUser_orderBy {
  barnRaise
  basin
  genesis
  id
  winter
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type CollectionData {
  id: ID!
  minted: [Int!]
}

input CollectionData_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CollectionData_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  minted: [Int!]
  minted_contains: [Int!]
  minted_contains_nocase: [Int!]
  minted_not: [Int!]
  minted_not_contains: [Int!]
  minted_not_contains_nocase: [Int!]
  or: [CollectionData_filter]
}

enum CollectionData_orderBy {
  id
  minted
}

"8 bytes signed integer\n"
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  beaNFTUser(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BeaNFTUser
  beaNFTUsers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: BeaNFTUser_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: BeaNFTUser_filter
  ): [BeaNFTUser!]!
  collectionData(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollectionData
  collectionDatas(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: CollectionData_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: CollectionData_filter
  ): [CollectionData!]!
  version(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Version
  versions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Version_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Version_filter
  ): [Version!]!
}

type Subscription {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  beaNFTUser(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BeaNFTUser
  beaNFTUsers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: BeaNFTUser_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: BeaNFTUser_filter
  ): [BeaNFTUser!]!
  collectionData(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollectionData
  collectionDatas(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: CollectionData_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: CollectionData_filter
  ): [CollectionData!]!
  version(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Version
  versions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Version_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Version_filter
  ): [Version!]!
}

"A string representation of microseconds UNIX timestamp (16 digits)\n"
scalar Timestamp

type Version {
  """Which blockchain is being indexed, i.e. 'ethereum', 'arbitrum', etc."""
  chain: String!

  """= 'subgraph'"""
  id: ID!

  """= 'beanstalk'"""
  subgraphName: String!

  """Verison number of the subgraph"""
  versionNumber: String!
}

input Version_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Version_filter]
  chain: String
  chain_contains: String
  chain_contains_nocase: String
  chain_ends_with: String
  chain_ends_with_nocase: String
  chain_gt: String
  chain_gte: String
  chain_in: [String!]
  chain_lt: String
  chain_lte: String
  chain_not: String
  chain_not_contains: String
  chain_not_contains_nocase: String
  chain_not_ends_with: String
  chain_not_ends_with_nocase: String
  chain_not_in: [String!]
  chain_not_starts_with: String
  chain_not_starts_with_nocase: String
  chain_starts_with: String
  chain_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Version_filter]
  subgraphName: String
  subgraphName_contains: String
  subgraphName_contains_nocase: String
  subgraphName_ends_with: String
  subgraphName_ends_with_nocase: String
  subgraphName_gt: String
  subgraphName_gte: String
  subgraphName_in: [String!]
  subgraphName_lt: String
  subgraphName_lte: String
  subgraphName_not: String
  subgraphName_not_contains: String
  subgraphName_not_contains_nocase: String
  subgraphName_not_ends_with: String
  subgraphName_not_ends_with_nocase: String
  subgraphName_not_in: [String!]
  subgraphName_not_starts_with: String
  subgraphName_not_starts_with_nocase: String
  subgraphName_starts_with: String
  subgraphName_starts_with_nocase: String
  versionNumber: String
  versionNumber_contains: String
  versionNumber_contains_nocase: String
  versionNumber_ends_with: String
  versionNumber_ends_with_nocase: String
  versionNumber_gt: String
  versionNumber_gte: String
  versionNumber_in: [String!]
  versionNumber_lt: String
  versionNumber_lte: String
  versionNumber_not: String
  versionNumber_not_contains: String
  versionNumber_not_contains_nocase: String
  versionNumber_not_ends_with: String
  versionNumber_not_ends_with_nocase: String
  versionNumber_not_in: [String!]
  versionNumber_not_starts_with: String
  versionNumber_not_starts_with_nocase: String
  versionNumber_starts_with: String
  versionNumber_starts_with_nocase: String
}

enum Version_orderBy {
  chain
  id
  subgraphName
  versionNumber
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """The hash of the parent block"""
  parentHash: Bytes

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}