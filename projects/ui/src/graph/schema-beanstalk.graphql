"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

type AddDeposit implements SiloEvent {
  """ Account adding deposit"""
  account: String!

  """ Amount of token added """
  amount: BigInt!

  """ BDV of the deposit """
  bdv: BigInt!

  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """addDeposit-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """ Season of deposit added """
  season: Int!

  """ Stem of deposit added """
  stem: BigInt

  """ Token added"""
  token: String!
}

input AddDeposit_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [AddDeposit_filter]
  bdv: BigInt
  bdv_gt: BigInt
  bdv_gte: BigInt
  bdv_in: [BigInt!]
  bdv_lt: BigInt
  bdv_lte: BigInt
  bdv_not: BigInt
  bdv_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [AddDeposit_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  stem: BigInt
  stem_gt: BigInt
  stem_gte: BigInt
  stem_in: [BigInt!]
  stem_lt: BigInt
  stem_lte: BigInt
  stem_not: BigInt
  stem_not_in: [BigInt!]
  token: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
}

enum AddDeposit_orderBy {
  account
  amount
  bdv
  blockNumber
  createdAt
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  season
  stem
  token
}

type Beanstalk {
  """ Array of the addresses for all active farmers in the silo """
  activeFarmers: [String!]!

  """ Array of the addresses for all farmers that had silo transfers and need stalk/seeds/roots updated 
  """
  farmersToUpdate: [String!]!

  """ Field level data """
  field: Field!

  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: ID!

  """ Last season called """
  lastSeason: Int!

  """ Timestamp of the latest DiamondCut call """
  lastUpgrade: BigInt!

  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!

  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!

  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!

  """ Season specific data """
  seasons(first: Int = 100, orderBy: Season_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Season_filter): [Season!]!

  """ Silo level data """
  silo: Silo!

  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!

  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
}

input Beanstalk_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  activeFarmers: [String!]
  activeFarmers_contains: [String!]
  activeFarmers_contains_nocase: [String!]
  activeFarmers_not: [String!]
  activeFarmers_not_contains: [String!]
  activeFarmers_not_contains_nocase: [String!]
  and: [Beanstalk_filter]
  farmersToUpdate: [String!]
  farmersToUpdate_contains: [String!]
  farmersToUpdate_contains_nocase: [String!]
  farmersToUpdate_not: [String!]
  farmersToUpdate_not_contains: [String!]
  farmersToUpdate_not_contains_nocase: [String!]
  field_: Field_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lastSeason: Int
  lastSeason_gt: Int
  lastSeason_gte: Int
  lastSeason_in: [Int!]
  lastSeason_lt: Int
  lastSeason_lte: Int
  lastSeason_not: Int
  lastSeason_not_in: [Int!]
  lastUpgrade: BigInt
  lastUpgrade_gt: BigInt
  lastUpgrade_gte: BigInt
  lastUpgrade_in: [BigInt!]
  lastUpgrade_lt: BigInt
  lastUpgrade_lte: BigInt
  lastUpgrade_not: BigInt
  lastUpgrade_not_in: [BigInt!]
  methodologyVersion: String
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_gt: String
  methodologyVersion_gte: String
  methodologyVersion_in: [String!]
  methodologyVersion_lt: String
  methodologyVersion_lte: String
  methodologyVersion_not: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  methodologyVersion_not_in: [String!]
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [Beanstalk_filter]
  schemaVersion: String
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_gt: String
  schemaVersion_gte: String
  schemaVersion_in: [String!]
  schemaVersion_lt: String
  schemaVersion_lte: String
  schemaVersion_not: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  schemaVersion_not_in: [String!]
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  seasons_: Season_filter
  silo_: Silo_filter
  slug: String
  slug_contains: String
  slug_contains_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_gt: String
  slug_gte: String
  slug_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_not: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  slug_not_in: [String!]
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  subgraphVersion: String
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_gt: String
  subgraphVersion_gte: String
  subgraphVersion_in: [String!]
  subgraphVersion_lt: String
  subgraphVersion_lte: String
  subgraphVersion_not: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  subgraphVersion_not_in: [String!]
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
}

enum Beanstalk_orderBy {
  activeFarmers
  farmersToUpdate
  field
  field__harvestablePods
  field__harvestedPods
  field__id
  field__numberOfSowers
  field__numberOfSows
  field__podIndex
  field__podRate
  field__realRateOfReturn
  field__season
  field__soil
  field__sownBeans
  field__temperature
  field__unharvestablePods
  id
  lastSeason
  lastUpgrade
  methodologyVersion
  name
  schemaVersion
  seasons
  silo
  silo__activeFarmers
  silo__beanMints
  silo__beanToMaxLpGpPerBdvRatio
  silo__depositedBDV
  silo__germinatingStalk
  silo__grownStalkPerSeason
  silo__id
  silo__plantableStalk
  silo__roots
  silo__seeds
  silo__stalk
  slug
  subgraphVersion
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Chop implements SiloEvent {
  """ Amount being chopped"""
  amount: BigInt!

  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Address chopping """
  farmer: String!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """chop-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """ Underlying token """
  underlying: String!

  """ Unripe token being chopped """
  unripe: String!
}

input Chop_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [Chop_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  farmer: String
  farmer_contains: String
  farmer_contains_nocase: String
  farmer_ends_with: String
  farmer_ends_with_nocase: String
  farmer_gt: String
  farmer_gte: String
  farmer_in: [String!]
  farmer_lt: String
  farmer_lte: String
  farmer_not: String
  farmer_not_contains: String
  farmer_not_contains_nocase: String
  farmer_not_ends_with: String
  farmer_not_ends_with_nocase: String
  farmer_not_in: [String!]
  farmer_not_starts_with: String
  farmer_not_starts_with_nocase: String
  farmer_starts_with: String
  farmer_starts_with_nocase: String
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [Chop_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  underlying: String
  underlying_contains: String
  underlying_contains_nocase: String
  underlying_ends_with: String
  underlying_ends_with_nocase: String
  underlying_gt: String
  underlying_gte: String
  underlying_in: [String!]
  underlying_lt: String
  underlying_lte: String
  underlying_not: String
  underlying_not_contains: String
  underlying_not_contains_nocase: String
  underlying_not_ends_with: String
  underlying_not_ends_with_nocase: String
  underlying_not_in: [String!]
  underlying_not_starts_with: String
  underlying_not_starts_with_nocase: String
  underlying_starts_with: String
  underlying_starts_with_nocase: String
  unripe: String
  unripe_contains: String
  unripe_contains_nocase: String
  unripe_ends_with: String
  unripe_ends_with_nocase: String
  unripe_gt: String
  unripe_gte: String
  unripe_in: [String!]
  unripe_lt: String
  unripe_lte: String
  unripe_not: String
  unripe_not_contains: String
  unripe_not_contains_nocase: String
  unripe_not_ends_with: String
  unripe_not_ends_with_nocase: String
  unripe_not_in: [String!]
  unripe_not_starts_with: String
  unripe_not_starts_with_nocase: String
  unripe_starts_with: String
  unripe_starts_with_nocase: String
}

enum Chop_orderBy {
  amount
  blockNumber
  createdAt
  farmer
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  underlying
  unripe
}

type DewhitelistToken implements SiloEvent {
  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """dewhitelistToken-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """Token address dewhitelisted"""
  token: String!
}

input DewhitelistToken_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DewhitelistToken_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [DewhitelistToken_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  token: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
}

enum DewhitelistToken_orderBy {
  blockNumber
  createdAt
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  token
}

enum EmaWindow {
  ROLLING_7_DAY
  ROLLING_24_HOUR
  ROLLING_30_DAY
}

type Farmer {
  deposits(first: Int = 100, orderBy: SiloDeposit_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: SiloDeposit_filter): [SiloDeposit!]!
  fertilizers(first: Int = 100, orderBy: FertilizerBalance_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: FertilizerBalance_filter): [FertilizerBalance!]!
  field: Field
  fills(first: Int = 100, orderBy: PodFill_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PodFill_filter): [PodFill!]!

  """Address for the farmer"""
  id: ID!
  listings(first: Int = 100, orderBy: PodListing_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PodListing_filter): [PodListing!]!
  orders(first: Int = 100, orderBy: PodOrder_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PodOrder_filter): [PodOrder!]!
  plots(first: Int = 100, orderBy: Plot_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Plot_filter): [Plot!]!
  silo: Silo
  withdraws(first: Int = 100, orderBy: SiloWithdraw_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: SiloWithdraw_filter): [SiloWithdraw!]!
}

input Farmer_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Farmer_filter]
  deposits_: SiloDeposit_filter
  fertilizers_: FertilizerBalance_filter
  field_: Field_filter
  fills_: PodFill_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  listings_: PodListing_filter
  or: [Farmer_filter]
  orders_: PodOrder_filter
  plots_: Plot_filter
  silo_: Silo_filter
  withdraws_: SiloWithdraw_filter
}

enum Farmer_orderBy {
  deposits
  fertilizers
  field
  field__harvestablePods
  field__harvestedPods
  field__id
  field__numberOfSowers
  field__numberOfSows
  field__podIndex
  field__podRate
  field__realRateOfReturn
  field__season
  field__soil
  field__sownBeans
  field__temperature
  field__unharvestablePods
  fills
  id
  listings
  orders
  plots
  silo
  silo__activeFarmers
  silo__beanMints
  silo__beanToMaxLpGpPerBdvRatio
  silo__depositedBDV
  silo__germinatingStalk
  silo__grownStalkPerSeason
  silo__id
  silo__plantableStalk
  silo__roots
  silo__seeds
  silo__stalk
  withdraws
}

type Fertilizer {
  """Token address for fert"""
  id: ID!

  """Total overall suppy of fert tokens"""
  supply: BigInt!
  tokens(first: Int = 100, orderBy: FertilizerToken_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: FertilizerToken_filter): [FertilizerToken!]!
}

type FertilizerBalance {
  """Current balance of token"""
  amount: BigInt!
  farmer: Farmer!
  fertilizerToken: FertilizerToken!

  """Fertilizer Token - Farmer address"""
  id: ID!
}

input FertilizerBalance_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [FertilizerBalance_filter]
  farmer: String
  farmer_: Farmer_filter
  farmer_contains: String
  farmer_contains_nocase: String
  farmer_ends_with: String
  farmer_ends_with_nocase: String
  farmer_gt: String
  farmer_gte: String
  farmer_in: [String!]
  farmer_lt: String
  farmer_lte: String
  farmer_not: String
  farmer_not_contains: String
  farmer_not_contains_nocase: String
  farmer_not_ends_with: String
  farmer_not_ends_with_nocase: String
  farmer_not_in: [String!]
  farmer_not_starts_with: String
  farmer_not_starts_with_nocase: String
  farmer_starts_with: String
  farmer_starts_with_nocase: String
  fertilizerToken: String
  fertilizerToken_: FertilizerToken_filter
  fertilizerToken_contains: String
  fertilizerToken_contains_nocase: String
  fertilizerToken_ends_with: String
  fertilizerToken_ends_with_nocase: String
  fertilizerToken_gt: String
  fertilizerToken_gte: String
  fertilizerToken_in: [String!]
  fertilizerToken_lt: String
  fertilizerToken_lte: String
  fertilizerToken_not: String
  fertilizerToken_not_contains: String
  fertilizerToken_not_contains_nocase: String
  fertilizerToken_not_ends_with: String
  fertilizerToken_not_ends_with_nocase: String
  fertilizerToken_not_in: [String!]
  fertilizerToken_not_starts_with: String
  fertilizerToken_not_starts_with_nocase: String
  fertilizerToken_starts_with: String
  fertilizerToken_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [FertilizerBalance_filter]
}

enum FertilizerBalance_orderBy {
  amount
  farmer
  farmer__id
  fertilizerToken
  fertilizerToken__endBpf
  fertilizerToken__humidity
  fertilizerToken__id
  fertilizerToken__season
  fertilizerToken__startBpf
  fertilizerToken__supply
  id
}

type FertilizerToken {
  balances(first: Int = 100, orderBy: FertilizerBalance_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: FertilizerBalance_filter): [FertilizerBalance!]!

  """Ending BPF on creation"""
  endBpf: BigInt!
  fertilizer: Fertilizer!

  """Humidity paid for this ID"""
  humidity: BigDecimal!

  """Total BPF for purchase"""
  id: ID!

  """Season created"""
  season: Int!

  """Starting BPF on creation"""
  startBpf: BigInt!

  """Total supply for this Humidity"""
  supply: BigInt!
}

input FertilizerToken_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FertilizerToken_filter]
  balances_: FertilizerBalance_filter
  endBpf: BigInt
  endBpf_gt: BigInt
  endBpf_gte: BigInt
  endBpf_in: [BigInt!]
  endBpf_lt: BigInt
  endBpf_lte: BigInt
  endBpf_not: BigInt
  endBpf_not_in: [BigInt!]
  fertilizer: String
  fertilizer_: Fertilizer_filter
  fertilizer_contains: String
  fertilizer_contains_nocase: String
  fertilizer_ends_with: String
  fertilizer_ends_with_nocase: String
  fertilizer_gt: String
  fertilizer_gte: String
  fertilizer_in: [String!]
  fertilizer_lt: String
  fertilizer_lte: String
  fertilizer_not: String
  fertilizer_not_contains: String
  fertilizer_not_contains_nocase: String
  fertilizer_not_ends_with: String
  fertilizer_not_ends_with_nocase: String
  fertilizer_not_in: [String!]
  fertilizer_not_starts_with: String
  fertilizer_not_starts_with_nocase: String
  fertilizer_starts_with: String
  fertilizer_starts_with_nocase: String
  humidity: BigDecimal
  humidity_gt: BigDecimal
  humidity_gte: BigDecimal
  humidity_in: [BigDecimal!]
  humidity_lt: BigDecimal
  humidity_lte: BigDecimal
  humidity_not: BigDecimal
  humidity_not_in: [BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [FertilizerToken_filter]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  startBpf: BigInt
  startBpf_gt: BigInt
  startBpf_gte: BigInt
  startBpf_in: [BigInt!]
  startBpf_lt: BigInt
  startBpf_lte: BigInt
  startBpf_not: BigInt
  startBpf_not_in: [BigInt!]
  supply: BigInt
  supply_gt: BigInt
  supply_gte: BigInt
  supply_in: [BigInt!]
  supply_lt: BigInt
  supply_lte: BigInt
  supply_not: BigInt
  supply_not_in: [BigInt!]
}

enum FertilizerToken_orderBy {
  balances
  endBpf
  fertilizer
  fertilizer__id
  fertilizer__supply
  humidity
  id
  season
  startBpf
  supply
}

type FertilizerYield {
  """Current Bean EMA"""
  beansPerSeasonEMA: BigDecimal!

  """Block timestamp at creation"""
  createdAt: BigInt!

  """BPF delta"""
  deltaBpf: BigDecimal!

  """Current humidity"""
  humidity: BigDecimal!

  """Season of data points"""
  id: ID!

  """Current outstanding fert"""
  outstandingFert: BigInt!

  """Current season"""
  season: Int!

  """Simplified APY for new Fert"""
  simpleAPY: BigDecimal!

  """Bean EMA Window"""
  window: EmaWindow!
}

input FertilizerYield_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FertilizerYield_filter]
  beansPerSeasonEMA: BigDecimal
  beansPerSeasonEMA_gt: BigDecimal
  beansPerSeasonEMA_gte: BigDecimal
  beansPerSeasonEMA_in: [BigDecimal!]
  beansPerSeasonEMA_lt: BigDecimal
  beansPerSeasonEMA_lte: BigDecimal
  beansPerSeasonEMA_not: BigDecimal
  beansPerSeasonEMA_not_in: [BigDecimal!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  deltaBpf: BigDecimal
  deltaBpf_gt: BigDecimal
  deltaBpf_gte: BigDecimal
  deltaBpf_in: [BigDecimal!]
  deltaBpf_lt: BigDecimal
  deltaBpf_lte: BigDecimal
  deltaBpf_not: BigDecimal
  deltaBpf_not_in: [BigDecimal!]
  humidity: BigDecimal
  humidity_gt: BigDecimal
  humidity_gte: BigDecimal
  humidity_in: [BigDecimal!]
  humidity_lt: BigDecimal
  humidity_lte: BigDecimal
  humidity_not: BigDecimal
  humidity_not_in: [BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [FertilizerYield_filter]
  outstandingFert: BigInt
  outstandingFert_gt: BigInt
  outstandingFert_gte: BigInt
  outstandingFert_in: [BigInt!]
  outstandingFert_lt: BigInt
  outstandingFert_lte: BigInt
  outstandingFert_not: BigInt
  outstandingFert_not_in: [BigInt!]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  simpleAPY: BigDecimal
  simpleAPY_gt: BigDecimal
  simpleAPY_gte: BigDecimal
  simpleAPY_in: [BigDecimal!]
  simpleAPY_lt: BigDecimal
  simpleAPY_lte: BigDecimal
  simpleAPY_not: BigDecimal
  simpleAPY_not_in: [BigDecimal!]
  window: EmaWindow
  window_in: [EmaWindow!]
  window_not: EmaWindow
  window_not_in: [EmaWindow!]
}

enum FertilizerYield_orderBy {
  beansPerSeasonEMA
  createdAt
  deltaBpf
  humidity
  id
  outstandingFert
  season
  simpleAPY
  window
}

input Fertilizer_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Fertilizer_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Fertilizer_filter]
  supply: BigInt
  supply_gt: BigInt
  supply_gte: BigInt
  supply_in: [BigInt!]
  supply_lt: BigInt
  supply_lte: BigInt
  supply_not: BigInt
  supply_not_in: [BigInt!]
  tokens_: FertilizerToken_filter
}

enum Fertilizer_orderBy {
  id
  supply
  tokens
}

type Field {
  """Contract address of beanstalk"""
  beanstalk: Beanstalk!

  """Link to daily snapshot data"""
  dailySnapshots(first: Int = 100, orderBy: FieldDailySnapshot_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: FieldDailySnapshot_filter): [FieldDailySnapshot!]!

  """Farmer address if applicable"""
  farmer: Farmer

  """Current harvestable pods"""
  harvestablePods: BigInt!

  """Cumulative harvested pods"""
  harvestedPods: BigInt!

  """Link to hourly snapshot data"""
  hourlySnapshots(first: Int = 100, orderBy: FieldHourlySnapshot_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: FieldHourlySnapshot_filter): [FieldHourlySnapshot!]!

  """ Contract address for this field or farmer """
  id: ID!

  """Cumulative number of unique sowers"""
  numberOfSowers: Int!

  """Cumulative number of sows"""
  numberOfSows: Int!

  """Array of current non-harvestable plots"""
  plotIndexes: [BigInt!]!

  """Current pod index"""
  podIndex: BigInt!

  """Current pod rate: Total unharvestable pods / bean supply"""
  podRate: BigDecimal!

  """Rate of return: Temperature / Bean Price"""
  realRateOfReturn: BigDecimal!

  """Current season number"""
  season: Int!

  """Current amount of soil available"""
  soil: BigInt!

  """Cumulative total of sown beans"""
  sownBeans: BigInt!

  """Current temperature"""
  temperature: Int!

  """Current outstanding non-harvestable pods"""
  unharvestablePods: BigInt!
}

type FieldDailySnapshot {
  """Timestamp of initial snapshot creation"""
  createdAt: BigInt!

  """Point in time delta harvestable pods"""
  deltaHarvestablePods: BigInt!

  """Point in time delta harvested pods"""
  deltaHarvestedPods: BigInt!

  """Point in time delta number of unique sowers"""
  deltaNumberOfSowers: Int!

  """Point in time delta number of sows"""
  deltaNumberOfSows: Int!

  """Point in time delta total of sown beans"""
  deltaSownBeans: BigInt!

  """Point in time delta non-harvestable pods"""
  deltaUnharvestablePods: BigInt!

  """Field associated with this snapshot"""
  field: Field!

  """Point in time harvestable pods"""
  harvestablePods: BigInt!

  """Point in time delta harvested pods"""
  harvestedPods: BigInt!

  """Field ID - Unix Timestamp"""
  id: ID!

  """Point in time amount of soil issued"""
  issuedSoil: BigInt!

  """Point in time cumulative number of unique sowers"""
  numberOfSowers: Int!

  """Point in time cumulative number of sows"""
  numberOfSows: Int!

  """Point in time pod index"""
  podIndex: BigInt!

  """Point in time pod rate: Total unharvestable pods / bean supply"""
  podRate: BigDecimal!

  """Point in time rate of return: Temperature / Bean Price"""
  realRateOfReturn: BigDecimal!

  """Last season in the snapshot"""
  season: Int!

  """Point in time amount of soil remaining"""
  soil: BigInt!

  """Point in time cumulative total of sown beans"""
  sownBeans: BigInt!

  """Point in time temperature"""
  temperature: Int!

  """Point in time outstanding non-harvestable pods"""
  unharvestablePods: BigInt!

  """Timestamp of last entity update"""
  updatedAt: BigInt!
}

input FieldDailySnapshot_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FieldDailySnapshot_filter]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  deltaHarvestablePods: BigInt
  deltaHarvestablePods_gt: BigInt
  deltaHarvestablePods_gte: BigInt
  deltaHarvestablePods_in: [BigInt!]
  deltaHarvestablePods_lt: BigInt
  deltaHarvestablePods_lte: BigInt
  deltaHarvestablePods_not: BigInt
  deltaHarvestablePods_not_in: [BigInt!]
  deltaHarvestedPods: BigInt
  deltaHarvestedPods_gt: BigInt
  deltaHarvestedPods_gte: BigInt
  deltaHarvestedPods_in: [BigInt!]
  deltaHarvestedPods_lt: BigInt
  deltaHarvestedPods_lte: BigInt
  deltaHarvestedPods_not: BigInt
  deltaHarvestedPods_not_in: [BigInt!]
  deltaNumberOfSowers: Int
  deltaNumberOfSowers_gt: Int
  deltaNumberOfSowers_gte: Int
  deltaNumberOfSowers_in: [Int!]
  deltaNumberOfSowers_lt: Int
  deltaNumberOfSowers_lte: Int
  deltaNumberOfSowers_not: Int
  deltaNumberOfSowers_not_in: [Int!]
  deltaNumberOfSows: Int
  deltaNumberOfSows_gt: Int
  deltaNumberOfSows_gte: Int
  deltaNumberOfSows_in: [Int!]
  deltaNumberOfSows_lt: Int
  deltaNumberOfSows_lte: Int
  deltaNumberOfSows_not: Int
  deltaNumberOfSows_not_in: [Int!]
  deltaSownBeans: BigInt
  deltaSownBeans_gt: BigInt
  deltaSownBeans_gte: BigInt
  deltaSownBeans_in: [BigInt!]
  deltaSownBeans_lt: BigInt
  deltaSownBeans_lte: BigInt
  deltaSownBeans_not: BigInt
  deltaSownBeans_not_in: [BigInt!]
  deltaUnharvestablePods: BigInt
  deltaUnharvestablePods_gt: BigInt
  deltaUnharvestablePods_gte: BigInt
  deltaUnharvestablePods_in: [BigInt!]
  deltaUnharvestablePods_lt: BigInt
  deltaUnharvestablePods_lte: BigInt
  deltaUnharvestablePods_not: BigInt
  deltaUnharvestablePods_not_in: [BigInt!]
  field: String
  field_: Field_filter
  field_contains: String
  field_contains_nocase: String
  field_ends_with: String
  field_ends_with_nocase: String
  field_gt: String
  field_gte: String
  field_in: [String!]
  field_lt: String
  field_lte: String
  field_not: String
  field_not_contains: String
  field_not_contains_nocase: String
  field_not_ends_with: String
  field_not_ends_with_nocase: String
  field_not_in: [String!]
  field_not_starts_with: String
  field_not_starts_with_nocase: String
  field_starts_with: String
  field_starts_with_nocase: String
  harvestablePods: BigInt
  harvestablePods_gt: BigInt
  harvestablePods_gte: BigInt
  harvestablePods_in: [BigInt!]
  harvestablePods_lt: BigInt
  harvestablePods_lte: BigInt
  harvestablePods_not: BigInt
  harvestablePods_not_in: [BigInt!]
  harvestedPods: BigInt
  harvestedPods_gt: BigInt
  harvestedPods_gte: BigInt
  harvestedPods_in: [BigInt!]
  harvestedPods_lt: BigInt
  harvestedPods_lte: BigInt
  harvestedPods_not: BigInt
  harvestedPods_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  issuedSoil: BigInt
  issuedSoil_gt: BigInt
  issuedSoil_gte: BigInt
  issuedSoil_in: [BigInt!]
  issuedSoil_lt: BigInt
  issuedSoil_lte: BigInt
  issuedSoil_not: BigInt
  issuedSoil_not_in: [BigInt!]
  numberOfSowers: Int
  numberOfSowers_gt: Int
  numberOfSowers_gte: Int
  numberOfSowers_in: [Int!]
  numberOfSowers_lt: Int
  numberOfSowers_lte: Int
  numberOfSowers_not: Int
  numberOfSowers_not_in: [Int!]
  numberOfSows: Int
  numberOfSows_gt: Int
  numberOfSows_gte: Int
  numberOfSows_in: [Int!]
  numberOfSows_lt: Int
  numberOfSows_lte: Int
  numberOfSows_not: Int
  numberOfSows_not_in: [Int!]
  or: [FieldDailySnapshot_filter]
  podIndex: BigInt
  podIndex_gt: BigInt
  podIndex_gte: BigInt
  podIndex_in: [BigInt!]
  podIndex_lt: BigInt
  podIndex_lte: BigInt
  podIndex_not: BigInt
  podIndex_not_in: [BigInt!]
  podRate: BigDecimal
  podRate_gt: BigDecimal
  podRate_gte: BigDecimal
  podRate_in: [BigDecimal!]
  podRate_lt: BigDecimal
  podRate_lte: BigDecimal
  podRate_not: BigDecimal
  podRate_not_in: [BigDecimal!]
  realRateOfReturn: BigDecimal
  realRateOfReturn_gt: BigDecimal
  realRateOfReturn_gte: BigDecimal
  realRateOfReturn_in: [BigDecimal!]
  realRateOfReturn_lt: BigDecimal
  realRateOfReturn_lte: BigDecimal
  realRateOfReturn_not: BigDecimal
  realRateOfReturn_not_in: [BigDecimal!]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  soil: BigInt
  soil_gt: BigInt
  soil_gte: BigInt
  soil_in: [BigInt!]
  soil_lt: BigInt
  soil_lte: BigInt
  soil_not: BigInt
  soil_not_in: [BigInt!]
  sownBeans: BigInt
  sownBeans_gt: BigInt
  sownBeans_gte: BigInt
  sownBeans_in: [BigInt!]
  sownBeans_lt: BigInt
  sownBeans_lte: BigInt
  sownBeans_not: BigInt
  sownBeans_not_in: [BigInt!]
  temperature: Int
  temperature_gt: Int
  temperature_gte: Int
  temperature_in: [Int!]
  temperature_lt: Int
  temperature_lte: Int
  temperature_not: Int
  temperature_not_in: [Int!]
  unharvestablePods: BigInt
  unharvestablePods_gt: BigInt
  unharvestablePods_gte: BigInt
  unharvestablePods_in: [BigInt!]
  unharvestablePods_lt: BigInt
  unharvestablePods_lte: BigInt
  unharvestablePods_not: BigInt
  unharvestablePods_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum FieldDailySnapshot_orderBy {
  createdAt
  deltaHarvestablePods
  deltaHarvestedPods
  deltaNumberOfSowers
  deltaNumberOfSows
  deltaSownBeans
  deltaUnharvestablePods
  field
  field__harvestablePods
  field__harvestedPods
  field__id
  field__numberOfSowers
  field__numberOfSows
  field__podIndex
  field__podRate
  field__realRateOfReturn
  field__season
  field__soil
  field__sownBeans
  field__temperature
  field__unharvestablePods
  harvestablePods
  harvestedPods
  id
  issuedSoil
  numberOfSowers
  numberOfSows
  podIndex
  podRate
  realRateOfReturn
  season
  soil
  sownBeans
  temperature
  unharvestablePods
  updatedAt
}

interface FieldEvent {
  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """ { Event type }-{ Transaction hash }-{ Log index } """
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!
}

input FieldEvent_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FieldEvent_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [FieldEvent_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
}

enum FieldEvent_orderBy {
  blockNumber
  createdAt
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
}

type FieldHourlySnapshot {
  """Creation Block Number"""
  blockNumber: BigInt!

  """Number of blocks between sunrise and soil being sold out"""
  blocksToSoldOutSoil: BigInt!

  """The caseId used in the seasonal adjustment of temperature"""
  caseId: BigInt!

  """Timestamp of initial snapshot creation"""
  createdAt: BigInt!

  """Point in time delta harvestable pods"""
  deltaHarvestablePods: BigInt!

  """Point in time delta harvested pods"""
  deltaHarvestedPods: BigInt!

  """Point in time delta number of unique sowers"""
  deltaNumberOfSowers: Int!

  """Point in time delta number of sows"""
  deltaNumberOfSows: Int!

  """Point in time delta total of sown beans"""
  deltaSownBeans: BigInt!

  """Point in time delta non-harvestable pods"""
  deltaUnharvestablePods: BigInt!

  """Field associated with this snapshot"""
  field: Field!

  """Point in time harvestable pods"""
  harvestablePods: BigInt!

  """Point in time cumulative harvested pods"""
  harvestedPods: BigInt!

  """Field ID - Unix Timestamp"""
  id: ID!

  """Point in time amount of soil issued"""
  issuedSoil: BigInt!

  """Point in time cumulative number of unique sowers"""
  numberOfSowers: Int!

  """Point in time cumulative number of sows"""
  numberOfSows: Int!

  """Point in time pod index"""
  podIndex: BigInt!

  """Point in time pod rate: Total unharvestable pods / bean supply"""
  podRate: BigDecimal!

  """Point in time rate of return: Temperature / Bean Price"""
  realRateOfReturn: BigDecimal!

  """Season"""
  season: Int!

  """Point in time amount of soil remaining"""
  soil: BigInt!

  """Bool flag if soil sold out for the season"""
  soilSoldOut: Boolean!

  """Point in time cumulative total of sown beans"""
  sownBeans: BigInt!

  """Point in time temperature"""
  temperature: Int!

  """Point in time outstanding non-harvestable pods"""
  unharvestablePods: BigInt!

  """Timestamp of last entity update"""
  updatedAt: BigInt!
}

input FieldHourlySnapshot_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FieldHourlySnapshot_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blocksToSoldOutSoil: BigInt
  blocksToSoldOutSoil_gt: BigInt
  blocksToSoldOutSoil_gte: BigInt
  blocksToSoldOutSoil_in: [BigInt!]
  blocksToSoldOutSoil_lt: BigInt
  blocksToSoldOutSoil_lte: BigInt
  blocksToSoldOutSoil_not: BigInt
  blocksToSoldOutSoil_not_in: [BigInt!]
  caseId: BigInt
  caseId_gt: BigInt
  caseId_gte: BigInt
  caseId_in: [BigInt!]
  caseId_lt: BigInt
  caseId_lte: BigInt
  caseId_not: BigInt
  caseId_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  deltaHarvestablePods: BigInt
  deltaHarvestablePods_gt: BigInt
  deltaHarvestablePods_gte: BigInt
  deltaHarvestablePods_in: [BigInt!]
  deltaHarvestablePods_lt: BigInt
  deltaHarvestablePods_lte: BigInt
  deltaHarvestablePods_not: BigInt
  deltaHarvestablePods_not_in: [BigInt!]
  deltaHarvestedPods: BigInt
  deltaHarvestedPods_gt: BigInt
  deltaHarvestedPods_gte: BigInt
  deltaHarvestedPods_in: [BigInt!]
  deltaHarvestedPods_lt: BigInt
  deltaHarvestedPods_lte: BigInt
  deltaHarvestedPods_not: BigInt
  deltaHarvestedPods_not_in: [BigInt!]
  deltaNumberOfSowers: Int
  deltaNumberOfSowers_gt: Int
  deltaNumberOfSowers_gte: Int
  deltaNumberOfSowers_in: [Int!]
  deltaNumberOfSowers_lt: Int
  deltaNumberOfSowers_lte: Int
  deltaNumberOfSowers_not: Int
  deltaNumberOfSowers_not_in: [Int!]
  deltaNumberOfSows: Int
  deltaNumberOfSows_gt: Int
  deltaNumberOfSows_gte: Int
  deltaNumberOfSows_in: [Int!]
  deltaNumberOfSows_lt: Int
  deltaNumberOfSows_lte: Int
  deltaNumberOfSows_not: Int
  deltaNumberOfSows_not_in: [Int!]
  deltaSownBeans: BigInt
  deltaSownBeans_gt: BigInt
  deltaSownBeans_gte: BigInt
  deltaSownBeans_in: [BigInt!]
  deltaSownBeans_lt: BigInt
  deltaSownBeans_lte: BigInt
  deltaSownBeans_not: BigInt
  deltaSownBeans_not_in: [BigInt!]
  deltaUnharvestablePods: BigInt
  deltaUnharvestablePods_gt: BigInt
  deltaUnharvestablePods_gte: BigInt
  deltaUnharvestablePods_in: [BigInt!]
  deltaUnharvestablePods_lt: BigInt
  deltaUnharvestablePods_lte: BigInt
  deltaUnharvestablePods_not: BigInt
  deltaUnharvestablePods_not_in: [BigInt!]
  field: String
  field_: Field_filter
  field_contains: String
  field_contains_nocase: String
  field_ends_with: String
  field_ends_with_nocase: String
  field_gt: String
  field_gte: String
  field_in: [String!]
  field_lt: String
  field_lte: String
  field_not: String
  field_not_contains: String
  field_not_contains_nocase: String
  field_not_ends_with: String
  field_not_ends_with_nocase: String
  field_not_in: [String!]
  field_not_starts_with: String
  field_not_starts_with_nocase: String
  field_starts_with: String
  field_starts_with_nocase: String
  harvestablePods: BigInt
  harvestablePods_gt: BigInt
  harvestablePods_gte: BigInt
  harvestablePods_in: [BigInt!]
  harvestablePods_lt: BigInt
  harvestablePods_lte: BigInt
  harvestablePods_not: BigInt
  harvestablePods_not_in: [BigInt!]
  harvestedPods: BigInt
  harvestedPods_gt: BigInt
  harvestedPods_gte: BigInt
  harvestedPods_in: [BigInt!]
  harvestedPods_lt: BigInt
  harvestedPods_lte: BigInt
  harvestedPods_not: BigInt
  harvestedPods_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  issuedSoil: BigInt
  issuedSoil_gt: BigInt
  issuedSoil_gte: BigInt
  issuedSoil_in: [BigInt!]
  issuedSoil_lt: BigInt
  issuedSoil_lte: BigInt
  issuedSoil_not: BigInt
  issuedSoil_not_in: [BigInt!]
  numberOfSowers: Int
  numberOfSowers_gt: Int
  numberOfSowers_gte: Int
  numberOfSowers_in: [Int!]
  numberOfSowers_lt: Int
  numberOfSowers_lte: Int
  numberOfSowers_not: Int
  numberOfSowers_not_in: [Int!]
  numberOfSows: Int
  numberOfSows_gt: Int
  numberOfSows_gte: Int
  numberOfSows_in: [Int!]
  numberOfSows_lt: Int
  numberOfSows_lte: Int
  numberOfSows_not: Int
  numberOfSows_not_in: [Int!]
  or: [FieldHourlySnapshot_filter]
  podIndex: BigInt
  podIndex_gt: BigInt
  podIndex_gte: BigInt
  podIndex_in: [BigInt!]
  podIndex_lt: BigInt
  podIndex_lte: BigInt
  podIndex_not: BigInt
  podIndex_not_in: [BigInt!]
  podRate: BigDecimal
  podRate_gt: BigDecimal
  podRate_gte: BigDecimal
  podRate_in: [BigDecimal!]
  podRate_lt: BigDecimal
  podRate_lte: BigDecimal
  podRate_not: BigDecimal
  podRate_not_in: [BigDecimal!]
  realRateOfReturn: BigDecimal
  realRateOfReturn_gt: BigDecimal
  realRateOfReturn_gte: BigDecimal
  realRateOfReturn_in: [BigDecimal!]
  realRateOfReturn_lt: BigDecimal
  realRateOfReturn_lte: BigDecimal
  realRateOfReturn_not: BigDecimal
  realRateOfReturn_not_in: [BigDecimal!]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  soil: BigInt
  soilSoldOut: Boolean
  soilSoldOut_in: [Boolean!]
  soilSoldOut_not: Boolean
  soilSoldOut_not_in: [Boolean!]
  soil_gt: BigInt
  soil_gte: BigInt
  soil_in: [BigInt!]
  soil_lt: BigInt
  soil_lte: BigInt
  soil_not: BigInt
  soil_not_in: [BigInt!]
  sownBeans: BigInt
  sownBeans_gt: BigInt
  sownBeans_gte: BigInt
  sownBeans_in: [BigInt!]
  sownBeans_lt: BigInt
  sownBeans_lte: BigInt
  sownBeans_not: BigInt
  sownBeans_not_in: [BigInt!]
  temperature: Int
  temperature_gt: Int
  temperature_gte: Int
  temperature_in: [Int!]
  temperature_lt: Int
  temperature_lte: Int
  temperature_not: Int
  temperature_not_in: [Int!]
  unharvestablePods: BigInt
  unharvestablePods_gt: BigInt
  unharvestablePods_gte: BigInt
  unharvestablePods_in: [BigInt!]
  unharvestablePods_lt: BigInt
  unharvestablePods_lte: BigInt
  unharvestablePods_not: BigInt
  unharvestablePods_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum FieldHourlySnapshot_orderBy {
  blockNumber
  blocksToSoldOutSoil
  caseId
  createdAt
  deltaHarvestablePods
  deltaHarvestedPods
  deltaNumberOfSowers
  deltaNumberOfSows
  deltaSownBeans
  deltaUnharvestablePods
  field
  field__harvestablePods
  field__harvestedPods
  field__id
  field__numberOfSowers
  field__numberOfSows
  field__podIndex
  field__podRate
  field__realRateOfReturn
  field__season
  field__soil
  field__sownBeans
  field__temperature
  field__unharvestablePods
  harvestablePods
  harvestedPods
  id
  issuedSoil
  numberOfSowers
  numberOfSows
  podIndex
  podRate
  realRateOfReturn
  season
  soil
  soilSoldOut
  sownBeans
  temperature
  unharvestablePods
  updatedAt
}

input Field_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Field_filter]
  beanstalk: String
  beanstalk_: Beanstalk_filter
  beanstalk_contains: String
  beanstalk_contains_nocase: String
  beanstalk_ends_with: String
  beanstalk_ends_with_nocase: String
  beanstalk_gt: String
  beanstalk_gte: String
  beanstalk_in: [String!]
  beanstalk_lt: String
  beanstalk_lte: String
  beanstalk_not: String
  beanstalk_not_contains: String
  beanstalk_not_contains_nocase: String
  beanstalk_not_ends_with: String
  beanstalk_not_ends_with_nocase: String
  beanstalk_not_in: [String!]
  beanstalk_not_starts_with: String
  beanstalk_not_starts_with_nocase: String
  beanstalk_starts_with: String
  beanstalk_starts_with_nocase: String
  dailySnapshots_: FieldDailySnapshot_filter
  farmer: String
  farmer_: Farmer_filter
  farmer_contains: String
  farmer_contains_nocase: String
  farmer_ends_with: String
  farmer_ends_with_nocase: String
  farmer_gt: String
  farmer_gte: String
  farmer_in: [String!]
  farmer_lt: String
  farmer_lte: String
  farmer_not: String
  farmer_not_contains: String
  farmer_not_contains_nocase: String
  farmer_not_ends_with: String
  farmer_not_ends_with_nocase: String
  farmer_not_in: [String!]
  farmer_not_starts_with: String
  farmer_not_starts_with_nocase: String
  farmer_starts_with: String
  farmer_starts_with_nocase: String
  harvestablePods: BigInt
  harvestablePods_gt: BigInt
  harvestablePods_gte: BigInt
  harvestablePods_in: [BigInt!]
  harvestablePods_lt: BigInt
  harvestablePods_lte: BigInt
  harvestablePods_not: BigInt
  harvestablePods_not_in: [BigInt!]
  harvestedPods: BigInt
  harvestedPods_gt: BigInt
  harvestedPods_gte: BigInt
  harvestedPods_in: [BigInt!]
  harvestedPods_lt: BigInt
  harvestedPods_lte: BigInt
  harvestedPods_not: BigInt
  harvestedPods_not_in: [BigInt!]
  hourlySnapshots_: FieldHourlySnapshot_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  numberOfSowers: Int
  numberOfSowers_gt: Int
  numberOfSowers_gte: Int
  numberOfSowers_in: [Int!]
  numberOfSowers_lt: Int
  numberOfSowers_lte: Int
  numberOfSowers_not: Int
  numberOfSowers_not_in: [Int!]
  numberOfSows: Int
  numberOfSows_gt: Int
  numberOfSows_gte: Int
  numberOfSows_in: [Int!]
  numberOfSows_lt: Int
  numberOfSows_lte: Int
  numberOfSows_not: Int
  numberOfSows_not_in: [Int!]
  or: [Field_filter]
  plotIndexes: [BigInt!]
  plotIndexes_contains: [BigInt!]
  plotIndexes_contains_nocase: [BigInt!]
  plotIndexes_not: [BigInt!]
  plotIndexes_not_contains: [BigInt!]
  plotIndexes_not_contains_nocase: [BigInt!]
  podIndex: BigInt
  podIndex_gt: BigInt
  podIndex_gte: BigInt
  podIndex_in: [BigInt!]
  podIndex_lt: BigInt
  podIndex_lte: BigInt
  podIndex_not: BigInt
  podIndex_not_in: [BigInt!]
  podRate: BigDecimal
  podRate_gt: BigDecimal
  podRate_gte: BigDecimal
  podRate_in: [BigDecimal!]
  podRate_lt: BigDecimal
  podRate_lte: BigDecimal
  podRate_not: BigDecimal
  podRate_not_in: [BigDecimal!]
  realRateOfReturn: BigDecimal
  realRateOfReturn_gt: BigDecimal
  realRateOfReturn_gte: BigDecimal
  realRateOfReturn_in: [BigDecimal!]
  realRateOfReturn_lt: BigDecimal
  realRateOfReturn_lte: BigDecimal
  realRateOfReturn_not: BigDecimal
  realRateOfReturn_not_in: [BigDecimal!]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  soil: BigInt
  soil_gt: BigInt
  soil_gte: BigInt
  soil_in: [BigInt!]
  soil_lt: BigInt
  soil_lte: BigInt
  soil_not: BigInt
  soil_not_in: [BigInt!]
  sownBeans: BigInt
  sownBeans_gt: BigInt
  sownBeans_gte: BigInt
  sownBeans_in: [BigInt!]
  sownBeans_lt: BigInt
  sownBeans_lte: BigInt
  sownBeans_not: BigInt
  sownBeans_not_in: [BigInt!]
  temperature: Int
  temperature_gt: Int
  temperature_gte: Int
  temperature_in: [Int!]
  temperature_lt: Int
  temperature_lte: Int
  temperature_not: Int
  temperature_not_in: [Int!]
  unharvestablePods: BigInt
  unharvestablePods_gt: BigInt
  unharvestablePods_gte: BigInt
  unharvestablePods_in: [BigInt!]
  unharvestablePods_lt: BigInt
  unharvestablePods_lte: BigInt
  unharvestablePods_not: BigInt
  unharvestablePods_not_in: [BigInt!]
}

enum Field_orderBy {
  beanstalk
  beanstalk__id
  beanstalk__lastSeason
  beanstalk__lastUpgrade
  beanstalk__methodologyVersion
  beanstalk__name
  beanstalk__schemaVersion
  beanstalk__slug
  beanstalk__subgraphVersion
  dailySnapshots
  farmer
  farmer__id
  harvestablePods
  harvestedPods
  hourlySnapshots
  id
  numberOfSowers
  numberOfSows
  plotIndexes
  podIndex
  podRate
  realRateOfReturn
  season
  soil
  sownBeans
  temperature
  unharvestablePods
}

type Germinating {
  """Germinating bdv. This only applies to a Token address"""
  bdv: BigInt!

  """Address-(EVEN|ODD)"""
  id: ID!

  """The season in which the germination started"""
  season: Int!

  """Germinating stalk. This only applies to farmer/Beanstalk address"""
  stalk: BigInt!

  """Germinating tokens. This only applies to a Token address"""
  tokenAmount: BigInt!
}

input Germinating_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Germinating_filter]
  bdv: BigInt
  bdv_gt: BigInt
  bdv_gte: BigInt
  bdv_in: [BigInt!]
  bdv_lt: BigInt
  bdv_lte: BigInt
  bdv_not: BigInt
  bdv_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Germinating_filter]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  stalk: BigInt
  stalk_gt: BigInt
  stalk_gte: BigInt
  stalk_in: [BigInt!]
  stalk_lt: BigInt
  stalk_lte: BigInt
  stalk_not: BigInt
  stalk_not_in: [BigInt!]
  tokenAmount: BigInt
  tokenAmount_gt: BigInt
  tokenAmount_gte: BigInt
  tokenAmount_in: [BigInt!]
  tokenAmount_lt: BigInt
  tokenAmount_lte: BigInt
  tokenAmount_not: BigInt
  tokenAmount_not_in: [BigInt!]
}

enum Germinating_orderBy {
  bdv
  id
  season
  stalk
  tokenAmount
}

type Harvest implements FieldEvent {
  """ Total beans harvested """
  beans: BigInt!

  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Address harvesting beans """
  farmer: String!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """harvest-{ Transaction hash }-{ Log index } """
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ Plots being harvested """
  plots: [BigInt!]!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!
}

input Harvest_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Harvest_filter]
  beans: BigInt
  beans_gt: BigInt
  beans_gte: BigInt
  beans_in: [BigInt!]
  beans_lt: BigInt
  beans_lte: BigInt
  beans_not: BigInt
  beans_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  farmer: String
  farmer_contains: String
  farmer_contains_nocase: String
  farmer_ends_with: String
  farmer_ends_with_nocase: String
  farmer_gt: String
  farmer_gte: String
  farmer_in: [String!]
  farmer_lt: String
  farmer_lte: String
  farmer_not: String
  farmer_not_contains: String
  farmer_not_contains_nocase: String
  farmer_not_ends_with: String
  farmer_not_ends_with_nocase: String
  farmer_not_in: [String!]
  farmer_not_starts_with: String
  farmer_not_starts_with_nocase: String
  farmer_starts_with: String
  farmer_starts_with_nocase: String
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [Harvest_filter]
  plots: [BigInt!]
  plots_contains: [BigInt!]
  plots_contains_nocase: [BigInt!]
  plots_not: [BigInt!]
  plots_not_contains: [BigInt!]
  plots_not_contains_nocase: [BigInt!]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
}

enum Harvest_orderBy {
  beans
  blockNumber
  createdAt
  farmer
  hash
  id
  logIndex
  plots
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
}

type Incentive implements SiloEvent {
  """ Amount minted as incentive"""
  amount: BigInt!

  """ Block number of this event """
  blockNumber: BigInt!

  """ Address incentivized """
  caller: String!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """incentive-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!
}

input Incentive_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [Incentive_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  caller: String
  caller_contains: String
  caller_contains_nocase: String
  caller_ends_with: String
  caller_ends_with_nocase: String
  caller_gt: String
  caller_gte: String
  caller_in: [String!]
  caller_lt: String
  caller_lte: String
  caller_not: String
  caller_not_contains: String
  caller_not_contains_nocase: String
  caller_not_ends_with: String
  caller_not_ends_with_nocase: String
  caller_not_in: [String!]
  caller_not_starts_with: String
  caller_not_starts_with_nocase: String
  caller_starts_with: String
  caller_starts_with_nocase: String
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [Incentive_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
}

enum Incentive_orderBy {
  amount
  blockNumber
  caller
  createdAt
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
}

enum MarketStatus {
  ACTIVE
  CANCELLED
  CANCELLED_PARTIAL
  EXPIRED
  FILLED
  FILLED_PARTIAL
}

interface MarketplaceEvent {
  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """ { Event type }-{ Transaction hash }-{ Log index } """
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!
}

input MarketplaceEvent_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MarketplaceEvent_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [MarketplaceEvent_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
}

enum MarketplaceEvent_orderBy {
  blockNumber
  createdAt
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
}

type MetapoolOracle implements SiloEvent {
  """ Cumulative balance A"""
  balanceA: BigInt!

  """ Cumulative balance B"""
  balanceB: BigInt!

  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ DeltaB for season"""
  deltaB: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """metapoolOracle-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """ Season of oracle """
  season: Int!
}

input MetapoolOracle_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MetapoolOracle_filter]
  balanceA: BigInt
  balanceA_gt: BigInt
  balanceA_gte: BigInt
  balanceA_in: [BigInt!]
  balanceA_lt: BigInt
  balanceA_lte: BigInt
  balanceA_not: BigInt
  balanceA_not_in: [BigInt!]
  balanceB: BigInt
  balanceB_gt: BigInt
  balanceB_gte: BigInt
  balanceB_in: [BigInt!]
  balanceB_lt: BigInt
  balanceB_lte: BigInt
  balanceB_not: BigInt
  balanceB_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  deltaB: BigInt
  deltaB_gt: BigInt
  deltaB_gte: BigInt
  deltaB_in: [BigInt!]
  deltaB_lt: BigInt
  deltaB_lte: BigInt
  deltaB_not: BigInt
  deltaB_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [MetapoolOracle_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
}

enum MetapoolOracle_orderBy {
  balanceA
  balanceB
  blockNumber
  createdAt
  deltaB
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  season
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Plot {
  """Beans used to sow, if any"""
  beans: BigInt!

  """Timestamp of creation"""
  createdAt: BigInt!

  """Creation transaction hash"""
  creationHash: String!

  """Farmer who owns this plot"""
  farmer: Farmer!

  """Field to which this plot belongs"""
  field: Field!

  """Flag for if plot is fully harvested"""
  fullyHarvested: Boolean!

  """Number of pods harvestable"""
  harvestablePods: BigInt!

  """Number of pods harvested"""
  harvestedPods: BigInt!

  """Plot index"""
  id: ID!

  """Plot Index"""
  index: BigInt!

  """Associated plot listing"""
  listing: PodListing

  """Total pods in plot"""
  pods: BigInt!

  """Season when created"""
  season: Int!

  """Transaction source for this plot"""
  source: PlotSource!

  """Total pods that were sown, if any"""
  sownPods: BigInt!

  """Temperature when the plot was sown"""
  temperature: Int!

  """Timestamp when updated"""
  updatedAt: BigInt!
}

enum PlotSource {
  HARVEST
  SOW
  TRANSFER
}

input Plot_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Plot_filter]
  beans: BigInt
  beans_gt: BigInt
  beans_gte: BigInt
  beans_in: [BigInt!]
  beans_lt: BigInt
  beans_lte: BigInt
  beans_not: BigInt
  beans_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  creationHash: String
  creationHash_contains: String
  creationHash_contains_nocase: String
  creationHash_ends_with: String
  creationHash_ends_with_nocase: String
  creationHash_gt: String
  creationHash_gte: String
  creationHash_in: [String!]
  creationHash_lt: String
  creationHash_lte: String
  creationHash_not: String
  creationHash_not_contains: String
  creationHash_not_contains_nocase: String
  creationHash_not_ends_with: String
  creationHash_not_ends_with_nocase: String
  creationHash_not_in: [String!]
  creationHash_not_starts_with: String
  creationHash_not_starts_with_nocase: String
  creationHash_starts_with: String
  creationHash_starts_with_nocase: String
  farmer: String
  farmer_: Farmer_filter
  farmer_contains: String
  farmer_contains_nocase: String
  farmer_ends_with: String
  farmer_ends_with_nocase: String
  farmer_gt: String
  farmer_gte: String
  farmer_in: [String!]
  farmer_lt: String
  farmer_lte: String
  farmer_not: String
  farmer_not_contains: String
  farmer_not_contains_nocase: String
  farmer_not_ends_with: String
  farmer_not_ends_with_nocase: String
  farmer_not_in: [String!]
  farmer_not_starts_with: String
  farmer_not_starts_with_nocase: String
  farmer_starts_with: String
  farmer_starts_with_nocase: String
  field: String
  field_: Field_filter
  field_contains: String
  field_contains_nocase: String
  field_ends_with: String
  field_ends_with_nocase: String
  field_gt: String
  field_gte: String
  field_in: [String!]
  field_lt: String
  field_lte: String
  field_not: String
  field_not_contains: String
  field_not_contains_nocase: String
  field_not_ends_with: String
  field_not_ends_with_nocase: String
  field_not_in: [String!]
  field_not_starts_with: String
  field_not_starts_with_nocase: String
  field_starts_with: String
  field_starts_with_nocase: String
  fullyHarvested: Boolean
  fullyHarvested_in: [Boolean!]
  fullyHarvested_not: Boolean
  fullyHarvested_not_in: [Boolean!]
  harvestablePods: BigInt
  harvestablePods_gt: BigInt
  harvestablePods_gte: BigInt
  harvestablePods_in: [BigInt!]
  harvestablePods_lt: BigInt
  harvestablePods_lte: BigInt
  harvestablePods_not: BigInt
  harvestablePods_not_in: [BigInt!]
  harvestedPods: BigInt
  harvestedPods_gt: BigInt
  harvestedPods_gte: BigInt
  harvestedPods_in: [BigInt!]
  harvestedPods_lt: BigInt
  harvestedPods_lte: BigInt
  harvestedPods_not: BigInt
  harvestedPods_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  index: BigInt
  index_gt: BigInt
  index_gte: BigInt
  index_in: [BigInt!]
  index_lt: BigInt
  index_lte: BigInt
  index_not: BigInt
  index_not_in: [BigInt!]
  listing: String
  listing_: PodListing_filter
  listing_contains: String
  listing_contains_nocase: String
  listing_ends_with: String
  listing_ends_with_nocase: String
  listing_gt: String
  listing_gte: String
  listing_in: [String!]
  listing_lt: String
  listing_lte: String
  listing_not: String
  listing_not_contains: String
  listing_not_contains_nocase: String
  listing_not_ends_with: String
  listing_not_ends_with_nocase: String
  listing_not_in: [String!]
  listing_not_starts_with: String
  listing_not_starts_with_nocase: String
  listing_starts_with: String
  listing_starts_with_nocase: String
  or: [Plot_filter]
  pods: BigInt
  pods_gt: BigInt
  pods_gte: BigInt
  pods_in: [BigInt!]
  pods_lt: BigInt
  pods_lte: BigInt
  pods_not: BigInt
  pods_not_in: [BigInt!]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  source: PlotSource
  source_in: [PlotSource!]
  source_not: PlotSource
  source_not_in: [PlotSource!]
  sownPods: BigInt
  sownPods_gt: BigInt
  sownPods_gte: BigInt
  sownPods_in: [BigInt!]
  sownPods_lt: BigInt
  sownPods_lte: BigInt
  sownPods_not: BigInt
  sownPods_not_in: [BigInt!]
  temperature: Int
  temperature_gt: Int
  temperature_gte: Int
  temperature_in: [Int!]
  temperature_lt: Int
  temperature_lte: Int
  temperature_not: Int
  temperature_not_in: [Int!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum Plot_orderBy {
  beans
  createdAt
  creationHash
  farmer
  farmer__id
  field
  field__harvestablePods
  field__harvestedPods
  field__id
  field__numberOfSowers
  field__numberOfSows
  field__podIndex
  field__podRate
  field__realRateOfReturn
  field__season
  field__soil
  field__sownBeans
  field__temperature
  field__unharvestablePods
  fullyHarvested
  harvestablePods
  harvestedPods
  id
  index
  listing
  listing__amount
  listing__cancelledAmount
  listing__createdAt
  listing__creationHash
  listing__filled
  listing__filledAmount
  listing__historyID
  listing__id
  listing__index
  listing__maxHarvestableIndex
  listing__minFillAmount
  listing__mode
  listing__originalAmount
  listing__originalIndex
  listing__pricePerPod
  listing__pricingFunction
  listing__pricingType
  listing__remainingAmount
  listing__start
  listing__status
  listing__updatedAt
  pods
  season
  source
  sownPods
  temperature
  updatedAt
}

type PodFill {
  """Number of pods filled"""
  amount: BigInt!

  """Total beans used to fill listing/order"""
  costInBeans: BigInt

  """Creation timestamp"""
  createdAt: BigInt!

  """Account fulfilling the order"""
  from: String!

  """Beanstalk address - Order/Listing index - transaction hash"""
  id: ID!

  """Index of plot transferred"""
  index: BigInt!

  """Associated listing, if any"""
  listing: PodListing

  """Associated order, if any"""
  order: PodOrder

  """Marketplace associated with this fill"""
  podMarketplace: PodMarketplace!

  """Start of plot transferred"""
  start: BigInt!

  """Account filling the order"""
  to: Farmer!
}

input PodFill_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [PodFill_filter]
  costInBeans: BigInt
  costInBeans_gt: BigInt
  costInBeans_gte: BigInt
  costInBeans_in: [BigInt!]
  costInBeans_lt: BigInt
  costInBeans_lte: BigInt
  costInBeans_not: BigInt
  costInBeans_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  from: String
  from_contains: String
  from_contains_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_gt: String
  from_gte: String
  from_in: [String!]
  from_lt: String
  from_lte: String
  from_not: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_not_in: [String!]
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  index: BigInt
  index_gt: BigInt
  index_gte: BigInt
  index_in: [BigInt!]
  index_lt: BigInt
  index_lte: BigInt
  index_not: BigInt
  index_not_in: [BigInt!]
  listing: String
  listing_: PodListing_filter
  listing_contains: String
  listing_contains_nocase: String
  listing_ends_with: String
  listing_ends_with_nocase: String
  listing_gt: String
  listing_gte: String
  listing_in: [String!]
  listing_lt: String
  listing_lte: String
  listing_not: String
  listing_not_contains: String
  listing_not_contains_nocase: String
  listing_not_ends_with: String
  listing_not_ends_with_nocase: String
  listing_not_in: [String!]
  listing_not_starts_with: String
  listing_not_starts_with_nocase: String
  listing_starts_with: String
  listing_starts_with_nocase: String
  or: [PodFill_filter]
  order: String
  order_: PodOrder_filter
  order_contains: String
  order_contains_nocase: String
  order_ends_with: String
  order_ends_with_nocase: String
  order_gt: String
  order_gte: String
  order_in: [String!]
  order_lt: String
  order_lte: String
  order_not: String
  order_not_contains: String
  order_not_contains_nocase: String
  order_not_ends_with: String
  order_not_ends_with_nocase: String
  order_not_in: [String!]
  order_not_starts_with: String
  order_not_starts_with_nocase: String
  order_starts_with: String
  order_starts_with_nocase: String
  podMarketplace: String
  podMarketplace_: PodMarketplace_filter
  podMarketplace_contains: String
  podMarketplace_contains_nocase: String
  podMarketplace_ends_with: String
  podMarketplace_ends_with_nocase: String
  podMarketplace_gt: String
  podMarketplace_gte: String
  podMarketplace_in: [String!]
  podMarketplace_lt: String
  podMarketplace_lte: String
  podMarketplace_not: String
  podMarketplace_not_contains: String
  podMarketplace_not_contains_nocase: String
  podMarketplace_not_ends_with: String
  podMarketplace_not_ends_with_nocase: String
  podMarketplace_not_in: [String!]
  podMarketplace_not_starts_with: String
  podMarketplace_not_starts_with_nocase: String
  podMarketplace_starts_with: String
  podMarketplace_starts_with_nocase: String
  start: BigInt
  start_gt: BigInt
  start_gte: BigInt
  start_in: [BigInt!]
  start_lt: BigInt
  start_lte: BigInt
  start_not: BigInt
  start_not_in: [BigInt!]
  to: String
  to_: Farmer_filter
  to_contains: String
  to_contains_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_gt: String
  to_gte: String
  to_in: [String!]
  to_lt: String
  to_lte: String
  to_not: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_not_in: [String!]
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
}

enum PodFill_orderBy {
  amount
  costInBeans
  createdAt
  from
  id
  index
  listing
  listing__amount
  listing__cancelledAmount
  listing__createdAt
  listing__creationHash
  listing__filled
  listing__filledAmount
  listing__historyID
  listing__id
  listing__index
  listing__maxHarvestableIndex
  listing__minFillAmount
  listing__mode
  listing__originalAmount
  listing__originalIndex
  listing__pricePerPod
  listing__pricingFunction
  listing__pricingType
  listing__remainingAmount
  listing__start
  listing__status
  listing__updatedAt
  order
  order__beanAmount
  order__beanAmountFilled
  order__createdAt
  order__creationHash
  order__historyID
  order__id
  order__maxPlaceInLine
  order__minFillAmount
  order__podAmount
  order__podAmountFilled
  order__pricePerPod
  order__pricingFunction
  order__pricingType
  order__status
  order__updatedAt
  podMarketplace
  podMarketplace__availableListedPods
  podMarketplace__beanVolume
  podMarketplace__cancelledListedPods
  podMarketplace__cancelledOrderedPods
  podMarketplace__expiredListedPods
  podMarketplace__filledListedPods
  podMarketplace__filledOrderedPods
  podMarketplace__id
  podMarketplace__listedPods
  podMarketplace__orderedPods
  podMarketplace__podVolume
  podMarketplace__season
  start
  to
  to__id
}

type PodListing {
  "The maximum amount of Pods remaining to be sold by *this* PodListing.\n\nWhen this PodListing is Filled or Cancelled, `amount` does NOT change.\n"
  amount: BigInt!

  "The number of Pods that were remaining in *this* PodListing when it was Cancelled.\n"
  cancelledAmount: BigInt!

  """Timestamp of PodListing creation."""
  createdAt: BigInt!

  """Transaction hash when this PodListing entity was created."""
  creationHash: String!

  """The Farmer that created the PodListing."""
  farmer: Farmer!

  """Any Fills associated with this PodListing."""
  fill: PodFill

  "The amount of Pods Filled since the initial PodListing was Created.\n\n`0 <= filled <= originalAmount`\n"
  filled: BigInt!

  "The number of Pods purchased from *this* PodListing.\n\nIf not yet Filled or the PodListing is CANCELLED: `filledAmount = 0`\n"
  filledAmount: BigInt!

  """Historical ID for joins"""
  historyID: String!

  "The PodListing ID is a unique subgraph ID: `{account}-{index}\"\n\nThe on-chain identifier for a PodListing is the `index`.\n"
  id: ID!

  "The absolute index of the listed Plot in the Pod Line.\n\nMeasured from the front, so the Listing contains all Pods between\n(index) and (index + totalAmount).\n\nAn example where the podLine is 50,000 but the index is 150,000:\n   0         the first Pod issued\n   100,000   harvestableIndex\n   150,000   index\n"
  index: BigInt!

  "When the `harvestableIndex` reaches this number, the Listing becomes EXPIRED.\n"
  maxHarvestableIndex: BigInt!

  """Minimum number of Beans required to perform a Fill."""
  minFillAmount: BigInt!

  """Where Beans are sent when the PodListing is Filled. See `FarmToMode`."""
  mode: Int!

  "The total number of Pods listed during the first emission of PodListingCreated.\n"
  originalAmount: BigInt!

  "The original index from the first emission of PodListingCreated in a chain.\n\nIf `originalIndex !== index`, then this PodListing was created when a parent\nPodListing was partially filled.\n"
  originalIndex: BigInt!

  """Plot being Listed."""
  plot: Plot!

  """Marketplace used for listing"""
  podMarketplace: PodMarketplace!

  "[V1] The FIXED price per Pod denominated in Beans.\n\nEx. `pricePerPod = 10000` indicates a price of 0.01 Beans per Pod.\n\nIf `pricingType = 1`, this field is set to `0` and should be ignored.\n"
  pricePerPod: Int!

  "[V2] The FIXED or DYNAMIC pricing function, encoded as bytes.\n\nThis must be decoded client-side, see `LibPolynomial.sol` for more info.\n"
  pricingFunction: Bytes

  "The Pricing Type states whether this PodListing uses FIXED or DYNAMIC pricing.\n\nnull = V1 FIXED  = use `pricePerPod`\n0    = V2 FIXED  = use `pricePerPod`\n1    = V2 DYNAMIC = use `pricingFunction`\n"
  pricingType: Int

  "The number of Pods remaining in *this* PodListing.\n\nWhen a Fill occurs, `remainingAmount` is decremented on this PodListing. A new\nPodListing is created with an updated `index` and `amount` equal to this\nPodListing's remainingAmount.\n\nIf this PodListing has NOT been Filled: `remainingAmount = amount`\nIf this PodListing has been Filled: `remainingAmount < amount`\nIf this PodListing has been Cancelled: `remainingAmount = 0`\n"
  remainingAmount: BigInt!

  "The position within the Plot from which to sell Pods.\n\n0 <= `start` <= (plot size - `amount`)\n"
  start: BigInt!

  """Current market status of listing"""
  status: MarketStatus!

  """
  Timestamp of last update to this PodListing, including Fills and Cancellations.
  """
  updatedAt: BigInt!
}

type PodListingCancelled implements MarketplaceEvent {
  """ Account cancelling listing"""
  account: String!

  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """ Historical ID for joins"""
  historyID: String!

  """seedChange-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Index of plot listing being cancelled"""
  index: BigInt!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!
}

input PodListingCancelled_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  and: [PodListingCancelled_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  historyID: String
  historyID_contains: String
  historyID_contains_nocase: String
  historyID_ends_with: String
  historyID_ends_with_nocase: String
  historyID_gt: String
  historyID_gte: String
  historyID_in: [String!]
  historyID_lt: String
  historyID_lte: String
  historyID_not: String
  historyID_not_contains: String
  historyID_not_contains_nocase: String
  historyID_not_ends_with: String
  historyID_not_ends_with_nocase: String
  historyID_not_in: [String!]
  historyID_not_starts_with: String
  historyID_not_starts_with_nocase: String
  historyID_starts_with: String
  historyID_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  index: BigInt
  index_gt: BigInt
  index_gte: BigInt
  index_in: [BigInt!]
  index_lt: BigInt
  index_lte: BigInt
  index_not: BigInt
  index_not_in: [BigInt!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [PodListingCancelled_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
}

enum PodListingCancelled_orderBy {
  account
  blockNumber
  createdAt
  hash
  historyID
  id
  index
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
}

type PodListingCreated implements MarketplaceEvent {
  """ Account creating the listing"""
  account: String!

  """Amount of pods listed"""
  amount: BigInt!

  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """ Historical ID for joins"""
  historyID: String!

  """podListingCreated-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Index of the plot listed"""
  index: BigInt!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """Max index for listing"""
  maxHarvestableIndex: BigInt!

  """Minimum fill amount"""
  minFillAmount: BigInt!

  """Claim to location"""
  mode: Int!

  """Price per pod"""
  pricePerPod: Int!

  """Pricing Function Data"""
  pricingFunction: Bytes

  """Pricing Type"""
  pricingType: Int

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """ Start value of the plot listed """
  start: BigInt!
}

input PodListingCreated_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [PodListingCreated_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  historyID: String
  historyID_contains: String
  historyID_contains_nocase: String
  historyID_ends_with: String
  historyID_ends_with_nocase: String
  historyID_gt: String
  historyID_gte: String
  historyID_in: [String!]
  historyID_lt: String
  historyID_lte: String
  historyID_not: String
  historyID_not_contains: String
  historyID_not_contains_nocase: String
  historyID_not_ends_with: String
  historyID_not_ends_with_nocase: String
  historyID_not_in: [String!]
  historyID_not_starts_with: String
  historyID_not_starts_with_nocase: String
  historyID_starts_with: String
  historyID_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  index: BigInt
  index_gt: BigInt
  index_gte: BigInt
  index_in: [BigInt!]
  index_lt: BigInt
  index_lte: BigInt
  index_not: BigInt
  index_not_in: [BigInt!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  maxHarvestableIndex: BigInt
  maxHarvestableIndex_gt: BigInt
  maxHarvestableIndex_gte: BigInt
  maxHarvestableIndex_in: [BigInt!]
  maxHarvestableIndex_lt: BigInt
  maxHarvestableIndex_lte: BigInt
  maxHarvestableIndex_not: BigInt
  maxHarvestableIndex_not_in: [BigInt!]
  minFillAmount: BigInt
  minFillAmount_gt: BigInt
  minFillAmount_gte: BigInt
  minFillAmount_in: [BigInt!]
  minFillAmount_lt: BigInt
  minFillAmount_lte: BigInt
  minFillAmount_not: BigInt
  minFillAmount_not_in: [BigInt!]
  mode: Int
  mode_gt: Int
  mode_gte: Int
  mode_in: [Int!]
  mode_lt: Int
  mode_lte: Int
  mode_not: Int
  mode_not_in: [Int!]
  or: [PodListingCreated_filter]
  pricePerPod: Int
  pricePerPod_gt: Int
  pricePerPod_gte: Int
  pricePerPod_in: [Int!]
  pricePerPod_lt: Int
  pricePerPod_lte: Int
  pricePerPod_not: Int
  pricePerPod_not_in: [Int!]
  pricingFunction: Bytes
  pricingFunction_contains: Bytes
  pricingFunction_gt: Bytes
  pricingFunction_gte: Bytes
  pricingFunction_in: [Bytes!]
  pricingFunction_lt: Bytes
  pricingFunction_lte: Bytes
  pricingFunction_not: Bytes
  pricingFunction_not_contains: Bytes
  pricingFunction_not_in: [Bytes!]
  pricingType: Int
  pricingType_gt: Int
  pricingType_gte: Int
  pricingType_in: [Int!]
  pricingType_lt: Int
  pricingType_lte: Int
  pricingType_not: Int
  pricingType_not_in: [Int!]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  start: BigInt
  start_gt: BigInt
  start_gte: BigInt
  start_in: [BigInt!]
  start_lt: BigInt
  start_lte: BigInt
  start_not: BigInt
  start_not_in: [BigInt!]
}

enum PodListingCreated_orderBy {
  account
  amount
  blockNumber
  createdAt
  hash
  historyID
  id
  index
  logIndex
  maxHarvestableIndex
  minFillAmount
  mode
  pricePerPod
  pricingFunction
  pricingType
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  start
}

type PodListingFilled implements MarketplaceEvent {
  """Number of pods transferred"""
  amount: BigInt!

  """ Block number of this event """
  blockNumber: BigInt!

  """Beans paid to fill the listing"""
  costInBeans: BigInt

  """ Timestamp of this event """
  createdAt: BigInt!

  """Account selling pods"""
  from: String!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """ Historical ID for joins"""
  historyID: String!

  """podListingFilled-{ Transaction hash }-{ Log index }"""
  id: ID!

  """Index of the plot transferred"""
  index: BigInt!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """Start of the plot transferred"""
  start: BigInt!

  """Account buying pods"""
  to: String!
}

input PodListingFilled_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [PodListingFilled_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  costInBeans: BigInt
  costInBeans_gt: BigInt
  costInBeans_gte: BigInt
  costInBeans_in: [BigInt!]
  costInBeans_lt: BigInt
  costInBeans_lte: BigInt
  costInBeans_not: BigInt
  costInBeans_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  from: String
  from_contains: String
  from_contains_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_gt: String
  from_gte: String
  from_in: [String!]
  from_lt: String
  from_lte: String
  from_not: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_not_in: [String!]
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  historyID: String
  historyID_contains: String
  historyID_contains_nocase: String
  historyID_ends_with: String
  historyID_ends_with_nocase: String
  historyID_gt: String
  historyID_gte: String
  historyID_in: [String!]
  historyID_lt: String
  historyID_lte: String
  historyID_not: String
  historyID_not_contains: String
  historyID_not_contains_nocase: String
  historyID_not_ends_with: String
  historyID_not_ends_with_nocase: String
  historyID_not_in: [String!]
  historyID_not_starts_with: String
  historyID_not_starts_with_nocase: String
  historyID_starts_with: String
  historyID_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  index: BigInt
  index_gt: BigInt
  index_gte: BigInt
  index_in: [BigInt!]
  index_lt: BigInt
  index_lte: BigInt
  index_not: BigInt
  index_not_in: [BigInt!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [PodListingFilled_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  start: BigInt
  start_gt: BigInt
  start_gte: BigInt
  start_in: [BigInt!]
  start_lt: BigInt
  start_lte: BigInt
  start_not: BigInt
  start_not_in: [BigInt!]
  to: String
  to_contains: String
  to_contains_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_gt: String
  to_gte: String
  to_in: [String!]
  to_lt: String
  to_lte: String
  to_not: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_not_in: [String!]
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
}

enum PodListingFilled_orderBy {
  amount
  blockNumber
  costInBeans
  createdAt
  from
  hash
  historyID
  id
  index
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  start
  to
}

input PodListing_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [PodListing_filter]
  cancelledAmount: BigInt
  cancelledAmount_gt: BigInt
  cancelledAmount_gte: BigInt
  cancelledAmount_in: [BigInt!]
  cancelledAmount_lt: BigInt
  cancelledAmount_lte: BigInt
  cancelledAmount_not: BigInt
  cancelledAmount_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  creationHash: String
  creationHash_contains: String
  creationHash_contains_nocase: String
  creationHash_ends_with: String
  creationHash_ends_with_nocase: String
  creationHash_gt: String
  creationHash_gte: String
  creationHash_in: [String!]
  creationHash_lt: String
  creationHash_lte: String
  creationHash_not: String
  creationHash_not_contains: String
  creationHash_not_contains_nocase: String
  creationHash_not_ends_with: String
  creationHash_not_ends_with_nocase: String
  creationHash_not_in: [String!]
  creationHash_not_starts_with: String
  creationHash_not_starts_with_nocase: String
  creationHash_starts_with: String
  creationHash_starts_with_nocase: String
  farmer: String
  farmer_: Farmer_filter
  farmer_contains: String
  farmer_contains_nocase: String
  farmer_ends_with: String
  farmer_ends_with_nocase: String
  farmer_gt: String
  farmer_gte: String
  farmer_in: [String!]
  farmer_lt: String
  farmer_lte: String
  farmer_not: String
  farmer_not_contains: String
  farmer_not_contains_nocase: String
  farmer_not_ends_with: String
  farmer_not_ends_with_nocase: String
  farmer_not_in: [String!]
  farmer_not_starts_with: String
  farmer_not_starts_with_nocase: String
  farmer_starts_with: String
  farmer_starts_with_nocase: String
  fill: String
  fill_: PodFill_filter
  fill_contains: String
  fill_contains_nocase: String
  fill_ends_with: String
  fill_ends_with_nocase: String
  fill_gt: String
  fill_gte: String
  fill_in: [String!]
  fill_lt: String
  fill_lte: String
  fill_not: String
  fill_not_contains: String
  fill_not_contains_nocase: String
  fill_not_ends_with: String
  fill_not_ends_with_nocase: String
  fill_not_in: [String!]
  fill_not_starts_with: String
  fill_not_starts_with_nocase: String
  fill_starts_with: String
  fill_starts_with_nocase: String
  filled: BigInt
  filledAmount: BigInt
  filledAmount_gt: BigInt
  filledAmount_gte: BigInt
  filledAmount_in: [BigInt!]
  filledAmount_lt: BigInt
  filledAmount_lte: BigInt
  filledAmount_not: BigInt
  filledAmount_not_in: [BigInt!]
  filled_gt: BigInt
  filled_gte: BigInt
  filled_in: [BigInt!]
  filled_lt: BigInt
  filled_lte: BigInt
  filled_not: BigInt
  filled_not_in: [BigInt!]
  historyID: String
  historyID_contains: String
  historyID_contains_nocase: String
  historyID_ends_with: String
  historyID_ends_with_nocase: String
  historyID_gt: String
  historyID_gte: String
  historyID_in: [String!]
  historyID_lt: String
  historyID_lte: String
  historyID_not: String
  historyID_not_contains: String
  historyID_not_contains_nocase: String
  historyID_not_ends_with: String
  historyID_not_ends_with_nocase: String
  historyID_not_in: [String!]
  historyID_not_starts_with: String
  historyID_not_starts_with_nocase: String
  historyID_starts_with: String
  historyID_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  index: BigInt
  index_gt: BigInt
  index_gte: BigInt
  index_in: [BigInt!]
  index_lt: BigInt
  index_lte: BigInt
  index_not: BigInt
  index_not_in: [BigInt!]
  maxHarvestableIndex: BigInt
  maxHarvestableIndex_gt: BigInt
  maxHarvestableIndex_gte: BigInt
  maxHarvestableIndex_in: [BigInt!]
  maxHarvestableIndex_lt: BigInt
  maxHarvestableIndex_lte: BigInt
  maxHarvestableIndex_not: BigInt
  maxHarvestableIndex_not_in: [BigInt!]
  minFillAmount: BigInt
  minFillAmount_gt: BigInt
  minFillAmount_gte: BigInt
  minFillAmount_in: [BigInt!]
  minFillAmount_lt: BigInt
  minFillAmount_lte: BigInt
  minFillAmount_not: BigInt
  minFillAmount_not_in: [BigInt!]
  mode: Int
  mode_gt: Int
  mode_gte: Int
  mode_in: [Int!]
  mode_lt: Int
  mode_lte: Int
  mode_not: Int
  mode_not_in: [Int!]
  or: [PodListing_filter]
  originalAmount: BigInt
  originalAmount_gt: BigInt
  originalAmount_gte: BigInt
  originalAmount_in: [BigInt!]
  originalAmount_lt: BigInt
  originalAmount_lte: BigInt
  originalAmount_not: BigInt
  originalAmount_not_in: [BigInt!]
  originalIndex: BigInt
  originalIndex_gt: BigInt
  originalIndex_gte: BigInt
  originalIndex_in: [BigInt!]
  originalIndex_lt: BigInt
  originalIndex_lte: BigInt
  originalIndex_not: BigInt
  originalIndex_not_in: [BigInt!]
  plot: String
  plot_: Plot_filter
  plot_contains: String
  plot_contains_nocase: String
  plot_ends_with: String
  plot_ends_with_nocase: String
  plot_gt: String
  plot_gte: String
  plot_in: [String!]
  plot_lt: String
  plot_lte: String
  plot_not: String
  plot_not_contains: String
  plot_not_contains_nocase: String
  plot_not_ends_with: String
  plot_not_ends_with_nocase: String
  plot_not_in: [String!]
  plot_not_starts_with: String
  plot_not_starts_with_nocase: String
  plot_starts_with: String
  plot_starts_with_nocase: String
  podMarketplace: String
  podMarketplace_: PodMarketplace_filter
  podMarketplace_contains: String
  podMarketplace_contains_nocase: String
  podMarketplace_ends_with: String
  podMarketplace_ends_with_nocase: String
  podMarketplace_gt: String
  podMarketplace_gte: String
  podMarketplace_in: [String!]
  podMarketplace_lt: String
  podMarketplace_lte: String
  podMarketplace_not: String
  podMarketplace_not_contains: String
  podMarketplace_not_contains_nocase: String
  podMarketplace_not_ends_with: String
  podMarketplace_not_ends_with_nocase: String
  podMarketplace_not_in: [String!]
  podMarketplace_not_starts_with: String
  podMarketplace_not_starts_with_nocase: String
  podMarketplace_starts_with: String
  podMarketplace_starts_with_nocase: String
  pricePerPod: Int
  pricePerPod_gt: Int
  pricePerPod_gte: Int
  pricePerPod_in: [Int!]
  pricePerPod_lt: Int
  pricePerPod_lte: Int
  pricePerPod_not: Int
  pricePerPod_not_in: [Int!]
  pricingFunction: Bytes
  pricingFunction_contains: Bytes
  pricingFunction_gt: Bytes
  pricingFunction_gte: Bytes
  pricingFunction_in: [Bytes!]
  pricingFunction_lt: Bytes
  pricingFunction_lte: Bytes
  pricingFunction_not: Bytes
  pricingFunction_not_contains: Bytes
  pricingFunction_not_in: [Bytes!]
  pricingType: Int
  pricingType_gt: Int
  pricingType_gte: Int
  pricingType_in: [Int!]
  pricingType_lt: Int
  pricingType_lte: Int
  pricingType_not: Int
  pricingType_not_in: [Int!]
  remainingAmount: BigInt
  remainingAmount_gt: BigInt
  remainingAmount_gte: BigInt
  remainingAmount_in: [BigInt!]
  remainingAmount_lt: BigInt
  remainingAmount_lte: BigInt
  remainingAmount_not: BigInt
  remainingAmount_not_in: [BigInt!]
  start: BigInt
  start_gt: BigInt
  start_gte: BigInt
  start_in: [BigInt!]
  start_lt: BigInt
  start_lte: BigInt
  start_not: BigInt
  start_not_in: [BigInt!]
  status: MarketStatus
  status_in: [MarketStatus!]
  status_not: MarketStatus
  status_not_in: [MarketStatus!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum PodListing_orderBy {
  amount
  cancelledAmount
  createdAt
  creationHash
  farmer
  farmer__id
  fill
  fill__amount
  fill__costInBeans
  fill__createdAt
  fill__from
  fill__id
  fill__index
  fill__start
  filled
  filledAmount
  historyID
  id
  index
  maxHarvestableIndex
  minFillAmount
  mode
  originalAmount
  originalIndex
  plot
  plot__beans
  plot__createdAt
  plot__creationHash
  plot__fullyHarvested
  plot__harvestablePods
  plot__harvestedPods
  plot__id
  plot__index
  plot__pods
  plot__season
  plot__source
  plot__sownPods
  plot__temperature
  plot__updatedAt
  podMarketplace
  podMarketplace__availableListedPods
  podMarketplace__beanVolume
  podMarketplace__cancelledListedPods
  podMarketplace__cancelledOrderedPods
  podMarketplace__expiredListedPods
  podMarketplace__filledListedPods
  podMarketplace__filledOrderedPods
  podMarketplace__id
  podMarketplace__listedPods
  podMarketplace__orderedPods
  podMarketplace__podVolume
  podMarketplace__season
  pricePerPod
  pricingFunction
  pricingType
  remainingAmount
  start
  status
  updatedAt
}

type PodMarketplace {
  """All historical listings"""
  allListings(first: Int = 100, orderBy: PodListing_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PodListing_filter): [PodListing!]!

  """All historical orders"""
  allOrders(first: Int = 100, orderBy: PodOrder_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PodOrder_filter): [PodOrder!]!

  """Current amount of total pods listed"""
  availableListedPods: BigInt!

  """Cumulative bean volume between listings and orders"""
  beanVolume: BigInt!

  """Current cumulative pod listings that were cancelled"""
  cancelledListedPods: BigInt!

  """Current cumulative pod orders cancelled"""
  cancelledOrderedPods: BigInt!

  """Link to daily snapshot data"""
  dailySnapshots(first: Int = 100, orderBy: PodMarketplaceDailySnapshot_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PodMarketplaceDailySnapshot_filter): [PodMarketplaceDailySnapshot!]!

  """Current cumulative pod listings that expired"""
  expiredListedPods: BigInt!

  """Current cumulative pod listings filled"""
  filledListedPods: BigInt!

  """Current cumulative pod orders filled"""
  filledOrderedPods: BigInt!

  """All historical marketplace fills"""
  fills(first: Int = 100, orderBy: PodFill_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PodFill_filter): [PodFill!]!

  """Link to hourly snapshot data"""
  hourlySnapshots(first: Int = 100, orderBy: PodMarketplaceHourlySnapshot_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PodMarketplaceHourlySnapshot_filter): [PodMarketplaceHourlySnapshot!]!

  """ Contract address of beanstalk """
  id: ID!

  """Current cumulative pods listed for sale"""
  listedPods: BigInt!

  """Indexes of actively listed plots"""
  listingIndexes: [BigInt!]!

  """Current cumulative pod orders created"""
  orderedPods: BigInt!

  """Active pod order IDs"""
  orders(first: Int = 100, orderBy: PodOrder_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PodOrder_filter): [PodOrder!]!

  """Cumulative pod volume between listings and orders"""
  podVolume: BigInt!

  """Current season of the marketplace"""
  season: Int!
}

type PodMarketplaceDailySnapshot {
  """Point in time current amount of total pods listed"""
  availableListedPods: BigInt!

  """
  Point in time current cumulative bean volume between listings and orders
  """
  beanVolume: BigInt!

  """Point in time current cumulative pod listings that were cancelled"""
  cancelledListedPods: BigInt!

  """Point in time current cumulative pod orders cancelled"""
  cancelledOrderedPods: BigInt!

  """Timestamp of initial snapshot creation"""
  createdAt: BigInt!

  """Point in time current delta of total pods listed"""
  deltaAvailableListedPods: BigInt!

  """Point in time current delta bean volume between listings and orders"""
  deltaBeanVolume: BigInt!

  """Point in time current delta pod listings that were cancelled"""
  deltaCancelledListedPods: BigInt!

  """Point in time current delta pod orders cancelled"""
  deltaCancelledOrderedPods: BigInt!

  """Point in time current delta pod listings that expired"""
  deltaExpiredListedPods: BigInt!

  """Point in time current delta pod listings filled"""
  deltaFilledListedPods: BigInt!

  """Point in time current delta pod orders filled"""
  deltaFilledOrderedPods: BigInt!

  """Point in time current delta pods listed for sale"""
  deltaListedPods: BigInt!

  """Point in time current delta pod orders created"""
  deltaOrderedPods: BigInt!

  """Point in time current delta pod volume between listings and orders"""
  deltaPodVolume: BigInt!

  """Point in time current cumulative pod listings that expired"""
  expiredListedPods: BigInt!

  """Point in time current cumulative pod listings filled"""
  filledListedPods: BigInt!

  """Point in time current cumulative pod orders filled"""
  filledOrderedPods: BigInt!

  """Marketplace ID - Unix Timestamp"""
  id: ID!

  """Point in time current cumulative pods listed for sale"""
  listedPods: BigInt!

  """Point in time current cumulative pod orders created"""
  orderedPods: BigInt!

  """Marketplace associated with snapshot"""
  podMarketplace: PodMarketplace!

  """
  Point in time current cumulative pod volume between listings and orders
  """
  podVolume: BigInt!

  """Point in time latest season"""
  season: Int!

  """Timestamp of last entity update"""
  updatedAt: BigInt!
}

input PodMarketplaceDailySnapshot_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PodMarketplaceDailySnapshot_filter]
  availableListedPods: BigInt
  availableListedPods_gt: BigInt
  availableListedPods_gte: BigInt
  availableListedPods_in: [BigInt!]
  availableListedPods_lt: BigInt
  availableListedPods_lte: BigInt
  availableListedPods_not: BigInt
  availableListedPods_not_in: [BigInt!]
  beanVolume: BigInt
  beanVolume_gt: BigInt
  beanVolume_gte: BigInt
  beanVolume_in: [BigInt!]
  beanVolume_lt: BigInt
  beanVolume_lte: BigInt
  beanVolume_not: BigInt
  beanVolume_not_in: [BigInt!]
  cancelledListedPods: BigInt
  cancelledListedPods_gt: BigInt
  cancelledListedPods_gte: BigInt
  cancelledListedPods_in: [BigInt!]
  cancelledListedPods_lt: BigInt
  cancelledListedPods_lte: BigInt
  cancelledListedPods_not: BigInt
  cancelledListedPods_not_in: [BigInt!]
  cancelledOrderedPods: BigInt
  cancelledOrderedPods_gt: BigInt
  cancelledOrderedPods_gte: BigInt
  cancelledOrderedPods_in: [BigInt!]
  cancelledOrderedPods_lt: BigInt
  cancelledOrderedPods_lte: BigInt
  cancelledOrderedPods_not: BigInt
  cancelledOrderedPods_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  deltaAvailableListedPods: BigInt
  deltaAvailableListedPods_gt: BigInt
  deltaAvailableListedPods_gte: BigInt
  deltaAvailableListedPods_in: [BigInt!]
  deltaAvailableListedPods_lt: BigInt
  deltaAvailableListedPods_lte: BigInt
  deltaAvailableListedPods_not: BigInt
  deltaAvailableListedPods_not_in: [BigInt!]
  deltaBeanVolume: BigInt
  deltaBeanVolume_gt: BigInt
  deltaBeanVolume_gte: BigInt
  deltaBeanVolume_in: [BigInt!]
  deltaBeanVolume_lt: BigInt
  deltaBeanVolume_lte: BigInt
  deltaBeanVolume_not: BigInt
  deltaBeanVolume_not_in: [BigInt!]
  deltaCancelledListedPods: BigInt
  deltaCancelledListedPods_gt: BigInt
  deltaCancelledListedPods_gte: BigInt
  deltaCancelledListedPods_in: [BigInt!]
  deltaCancelledListedPods_lt: BigInt
  deltaCancelledListedPods_lte: BigInt
  deltaCancelledListedPods_not: BigInt
  deltaCancelledListedPods_not_in: [BigInt!]
  deltaCancelledOrderedPods: BigInt
  deltaCancelledOrderedPods_gt: BigInt
  deltaCancelledOrderedPods_gte: BigInt
  deltaCancelledOrderedPods_in: [BigInt!]
  deltaCancelledOrderedPods_lt: BigInt
  deltaCancelledOrderedPods_lte: BigInt
  deltaCancelledOrderedPods_not: BigInt
  deltaCancelledOrderedPods_not_in: [BigInt!]
  deltaExpiredListedPods: BigInt
  deltaExpiredListedPods_gt: BigInt
  deltaExpiredListedPods_gte: BigInt
  deltaExpiredListedPods_in: [BigInt!]
  deltaExpiredListedPods_lt: BigInt
  deltaExpiredListedPods_lte: BigInt
  deltaExpiredListedPods_not: BigInt
  deltaExpiredListedPods_not_in: [BigInt!]
  deltaFilledListedPods: BigInt
  deltaFilledListedPods_gt: BigInt
  deltaFilledListedPods_gte: BigInt
  deltaFilledListedPods_in: [BigInt!]
  deltaFilledListedPods_lt: BigInt
  deltaFilledListedPods_lte: BigInt
  deltaFilledListedPods_not: BigInt
  deltaFilledListedPods_not_in: [BigInt!]
  deltaFilledOrderedPods: BigInt
  deltaFilledOrderedPods_gt: BigInt
  deltaFilledOrderedPods_gte: BigInt
  deltaFilledOrderedPods_in: [BigInt!]
  deltaFilledOrderedPods_lt: BigInt
  deltaFilledOrderedPods_lte: BigInt
  deltaFilledOrderedPods_not: BigInt
  deltaFilledOrderedPods_not_in: [BigInt!]
  deltaListedPods: BigInt
  deltaListedPods_gt: BigInt
  deltaListedPods_gte: BigInt
  deltaListedPods_in: [BigInt!]
  deltaListedPods_lt: BigInt
  deltaListedPods_lte: BigInt
  deltaListedPods_not: BigInt
  deltaListedPods_not_in: [BigInt!]
  deltaOrderedPods: BigInt
  deltaOrderedPods_gt: BigInt
  deltaOrderedPods_gte: BigInt
  deltaOrderedPods_in: [BigInt!]
  deltaOrderedPods_lt: BigInt
  deltaOrderedPods_lte: BigInt
  deltaOrderedPods_not: BigInt
  deltaOrderedPods_not_in: [BigInt!]
  deltaPodVolume: BigInt
  deltaPodVolume_gt: BigInt
  deltaPodVolume_gte: BigInt
  deltaPodVolume_in: [BigInt!]
  deltaPodVolume_lt: BigInt
  deltaPodVolume_lte: BigInt
  deltaPodVolume_not: BigInt
  deltaPodVolume_not_in: [BigInt!]
  expiredListedPods: BigInt
  expiredListedPods_gt: BigInt
  expiredListedPods_gte: BigInt
  expiredListedPods_in: [BigInt!]
  expiredListedPods_lt: BigInt
  expiredListedPods_lte: BigInt
  expiredListedPods_not: BigInt
  expiredListedPods_not_in: [BigInt!]
  filledListedPods: BigInt
  filledListedPods_gt: BigInt
  filledListedPods_gte: BigInt
  filledListedPods_in: [BigInt!]
  filledListedPods_lt: BigInt
  filledListedPods_lte: BigInt
  filledListedPods_not: BigInt
  filledListedPods_not_in: [BigInt!]
  filledOrderedPods: BigInt
  filledOrderedPods_gt: BigInt
  filledOrderedPods_gte: BigInt
  filledOrderedPods_in: [BigInt!]
  filledOrderedPods_lt: BigInt
  filledOrderedPods_lte: BigInt
  filledOrderedPods_not: BigInt
  filledOrderedPods_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  listedPods: BigInt
  listedPods_gt: BigInt
  listedPods_gte: BigInt
  listedPods_in: [BigInt!]
  listedPods_lt: BigInt
  listedPods_lte: BigInt
  listedPods_not: BigInt
  listedPods_not_in: [BigInt!]
  or: [PodMarketplaceDailySnapshot_filter]
  orderedPods: BigInt
  orderedPods_gt: BigInt
  orderedPods_gte: BigInt
  orderedPods_in: [BigInt!]
  orderedPods_lt: BigInt
  orderedPods_lte: BigInt
  orderedPods_not: BigInt
  orderedPods_not_in: [BigInt!]
  podMarketplace: String
  podMarketplace_: PodMarketplace_filter
  podMarketplace_contains: String
  podMarketplace_contains_nocase: String
  podMarketplace_ends_with: String
  podMarketplace_ends_with_nocase: String
  podMarketplace_gt: String
  podMarketplace_gte: String
  podMarketplace_in: [String!]
  podMarketplace_lt: String
  podMarketplace_lte: String
  podMarketplace_not: String
  podMarketplace_not_contains: String
  podMarketplace_not_contains_nocase: String
  podMarketplace_not_ends_with: String
  podMarketplace_not_ends_with_nocase: String
  podMarketplace_not_in: [String!]
  podMarketplace_not_starts_with: String
  podMarketplace_not_starts_with_nocase: String
  podMarketplace_starts_with: String
  podMarketplace_starts_with_nocase: String
  podVolume: BigInt
  podVolume_gt: BigInt
  podVolume_gte: BigInt
  podVolume_in: [BigInt!]
  podVolume_lt: BigInt
  podVolume_lte: BigInt
  podVolume_not: BigInt
  podVolume_not_in: [BigInt!]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum PodMarketplaceDailySnapshot_orderBy {
  availableListedPods
  beanVolume
  cancelledListedPods
  cancelledOrderedPods
  createdAt
  deltaAvailableListedPods
  deltaBeanVolume
  deltaCancelledListedPods
  deltaCancelledOrderedPods
  deltaExpiredListedPods
  deltaFilledListedPods
  deltaFilledOrderedPods
  deltaListedPods
  deltaOrderedPods
  deltaPodVolume
  expiredListedPods
  filledListedPods
  filledOrderedPods
  id
  listedPods
  orderedPods
  podMarketplace
  podMarketplace__availableListedPods
  podMarketplace__beanVolume
  podMarketplace__cancelledListedPods
  podMarketplace__cancelledOrderedPods
  podMarketplace__expiredListedPods
  podMarketplace__filledListedPods
  podMarketplace__filledOrderedPods
  podMarketplace__id
  podMarketplace__listedPods
  podMarketplace__orderedPods
  podMarketplace__podVolume
  podMarketplace__season
  podVolume
  season
  updatedAt
}

type PodMarketplaceHourlySnapshot {
  """Point in time current amount of total pods listed"""
  availableListedPods: BigInt!

  """
  Point in time current cumulative bean volume between listings and orders
  """
  beanVolume: BigInt!

  """Point in time current cumulative pod listings that were cancelled"""
  cancelledListedPods: BigInt!

  """Point in time current cumulative pod orders cancelled"""
  cancelledOrderedPods: BigInt!

  """Timestamp of initial snapshot creation"""
  createdAt: BigInt!

  """Point in time current delta of total pods listed"""
  deltaAvailableListedPods: BigInt!

  """Point in time current delta bean volume between listings and orders"""
  deltaBeanVolume: BigInt!

  """Point in time current delta pod listings that were cancelled"""
  deltaCancelledListedPods: BigInt!

  """Point in time current delta pod orders cancelled"""
  deltaCancelledOrderedPods: BigInt!

  """Point in time current delta pod listings that expired"""
  deltaExpiredListedPods: BigInt!

  """Point in time current delta pod listings filled"""
  deltaFilledListedPods: BigInt!

  """Point in time current delta pod orders filled"""
  deltaFilledOrderedPods: BigInt!

  """Point in time current delta pods listed for sale"""
  deltaListedPods: BigInt!

  """Point in time current delta pod orders created"""
  deltaOrderedPods: BigInt!

  """Point in time current delta pod volume between listings and orders"""
  deltaPodVolume: BigInt!

  """Point in time current cumulative pod listings that expired"""
  expiredListedPods: BigInt!

  """Point in time current cumulative pod listings filled"""
  filledListedPods: BigInt!

  """Point in time current cumulative pod orders filled"""
  filledOrderedPods: BigInt!

  """Marketplace ID - Unix Timestamp"""
  id: ID!

  """Point in time current cumulative pods listed for sale"""
  listedPods: BigInt!

  """Point in time current cumulative pod orders created"""
  orderedPods: BigInt!

  """Marketplace associated with snapshot"""
  podMarketplace: PodMarketplace!

  """
  Point in time current cumulative pod volume between listings and orders
  """
  podVolume: BigInt!

  """Point in time latest season"""
  season: Int!

  """Timestamp of last entity update"""
  updatedAt: BigInt!
}

input PodMarketplaceHourlySnapshot_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PodMarketplaceHourlySnapshot_filter]
  availableListedPods: BigInt
  availableListedPods_gt: BigInt
  availableListedPods_gte: BigInt
  availableListedPods_in: [BigInt!]
  availableListedPods_lt: BigInt
  availableListedPods_lte: BigInt
  availableListedPods_not: BigInt
  availableListedPods_not_in: [BigInt!]
  beanVolume: BigInt
  beanVolume_gt: BigInt
  beanVolume_gte: BigInt
  beanVolume_in: [BigInt!]
  beanVolume_lt: BigInt
  beanVolume_lte: BigInt
  beanVolume_not: BigInt
  beanVolume_not_in: [BigInt!]
  cancelledListedPods: BigInt
  cancelledListedPods_gt: BigInt
  cancelledListedPods_gte: BigInt
  cancelledListedPods_in: [BigInt!]
  cancelledListedPods_lt: BigInt
  cancelledListedPods_lte: BigInt
  cancelledListedPods_not: BigInt
  cancelledListedPods_not_in: [BigInt!]
  cancelledOrderedPods: BigInt
  cancelledOrderedPods_gt: BigInt
  cancelledOrderedPods_gte: BigInt
  cancelledOrderedPods_in: [BigInt!]
  cancelledOrderedPods_lt: BigInt
  cancelledOrderedPods_lte: BigInt
  cancelledOrderedPods_not: BigInt
  cancelledOrderedPods_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  deltaAvailableListedPods: BigInt
  deltaAvailableListedPods_gt: BigInt
  deltaAvailableListedPods_gte: BigInt
  deltaAvailableListedPods_in: [BigInt!]
  deltaAvailableListedPods_lt: BigInt
  deltaAvailableListedPods_lte: BigInt
  deltaAvailableListedPods_not: BigInt
  deltaAvailableListedPods_not_in: [BigInt!]
  deltaBeanVolume: BigInt
  deltaBeanVolume_gt: BigInt
  deltaBeanVolume_gte: BigInt
  deltaBeanVolume_in: [BigInt!]
  deltaBeanVolume_lt: BigInt
  deltaBeanVolume_lte: BigInt
  deltaBeanVolume_not: BigInt
  deltaBeanVolume_not_in: [BigInt!]
  deltaCancelledListedPods: BigInt
  deltaCancelledListedPods_gt: BigInt
  deltaCancelledListedPods_gte: BigInt
  deltaCancelledListedPods_in: [BigInt!]
  deltaCancelledListedPods_lt: BigInt
  deltaCancelledListedPods_lte: BigInt
  deltaCancelledListedPods_not: BigInt
  deltaCancelledListedPods_not_in: [BigInt!]
  deltaCancelledOrderedPods: BigInt
  deltaCancelledOrderedPods_gt: BigInt
  deltaCancelledOrderedPods_gte: BigInt
  deltaCancelledOrderedPods_in: [BigInt!]
  deltaCancelledOrderedPods_lt: BigInt
  deltaCancelledOrderedPods_lte: BigInt
  deltaCancelledOrderedPods_not: BigInt
  deltaCancelledOrderedPods_not_in: [BigInt!]
  deltaExpiredListedPods: BigInt
  deltaExpiredListedPods_gt: BigInt
  deltaExpiredListedPods_gte: BigInt
  deltaExpiredListedPods_in: [BigInt!]
  deltaExpiredListedPods_lt: BigInt
  deltaExpiredListedPods_lte: BigInt
  deltaExpiredListedPods_not: BigInt
  deltaExpiredListedPods_not_in: [BigInt!]
  deltaFilledListedPods: BigInt
  deltaFilledListedPods_gt: BigInt
  deltaFilledListedPods_gte: BigInt
  deltaFilledListedPods_in: [BigInt!]
  deltaFilledListedPods_lt: BigInt
  deltaFilledListedPods_lte: BigInt
  deltaFilledListedPods_not: BigInt
  deltaFilledListedPods_not_in: [BigInt!]
  deltaFilledOrderedPods: BigInt
  deltaFilledOrderedPods_gt: BigInt
  deltaFilledOrderedPods_gte: BigInt
  deltaFilledOrderedPods_in: [BigInt!]
  deltaFilledOrderedPods_lt: BigInt
  deltaFilledOrderedPods_lte: BigInt
  deltaFilledOrderedPods_not: BigInt
  deltaFilledOrderedPods_not_in: [BigInt!]
  deltaListedPods: BigInt
  deltaListedPods_gt: BigInt
  deltaListedPods_gte: BigInt
  deltaListedPods_in: [BigInt!]
  deltaListedPods_lt: BigInt
  deltaListedPods_lte: BigInt
  deltaListedPods_not: BigInt
  deltaListedPods_not_in: [BigInt!]
  deltaOrderedPods: BigInt
  deltaOrderedPods_gt: BigInt
  deltaOrderedPods_gte: BigInt
  deltaOrderedPods_in: [BigInt!]
  deltaOrderedPods_lt: BigInt
  deltaOrderedPods_lte: BigInt
  deltaOrderedPods_not: BigInt
  deltaOrderedPods_not_in: [BigInt!]
  deltaPodVolume: BigInt
  deltaPodVolume_gt: BigInt
  deltaPodVolume_gte: BigInt
  deltaPodVolume_in: [BigInt!]
  deltaPodVolume_lt: BigInt
  deltaPodVolume_lte: BigInt
  deltaPodVolume_not: BigInt
  deltaPodVolume_not_in: [BigInt!]
  expiredListedPods: BigInt
  expiredListedPods_gt: BigInt
  expiredListedPods_gte: BigInt
  expiredListedPods_in: [BigInt!]
  expiredListedPods_lt: BigInt
  expiredListedPods_lte: BigInt
  expiredListedPods_not: BigInt
  expiredListedPods_not_in: [BigInt!]
  filledListedPods: BigInt
  filledListedPods_gt: BigInt
  filledListedPods_gte: BigInt
  filledListedPods_in: [BigInt!]
  filledListedPods_lt: BigInt
  filledListedPods_lte: BigInt
  filledListedPods_not: BigInt
  filledListedPods_not_in: [BigInt!]
  filledOrderedPods: BigInt
  filledOrderedPods_gt: BigInt
  filledOrderedPods_gte: BigInt
  filledOrderedPods_in: [BigInt!]
  filledOrderedPods_lt: BigInt
  filledOrderedPods_lte: BigInt
  filledOrderedPods_not: BigInt
  filledOrderedPods_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  listedPods: BigInt
  listedPods_gt: BigInt
  listedPods_gte: BigInt
  listedPods_in: [BigInt!]
  listedPods_lt: BigInt
  listedPods_lte: BigInt
  listedPods_not: BigInt
  listedPods_not_in: [BigInt!]
  or: [PodMarketplaceHourlySnapshot_filter]
  orderedPods: BigInt
  orderedPods_gt: BigInt
  orderedPods_gte: BigInt
  orderedPods_in: [BigInt!]
  orderedPods_lt: BigInt
  orderedPods_lte: BigInt
  orderedPods_not: BigInt
  orderedPods_not_in: [BigInt!]
  podMarketplace: String
  podMarketplace_: PodMarketplace_filter
  podMarketplace_contains: String
  podMarketplace_contains_nocase: String
  podMarketplace_ends_with: String
  podMarketplace_ends_with_nocase: String
  podMarketplace_gt: String
  podMarketplace_gte: String
  podMarketplace_in: [String!]
  podMarketplace_lt: String
  podMarketplace_lte: String
  podMarketplace_not: String
  podMarketplace_not_contains: String
  podMarketplace_not_contains_nocase: String
  podMarketplace_not_ends_with: String
  podMarketplace_not_ends_with_nocase: String
  podMarketplace_not_in: [String!]
  podMarketplace_not_starts_with: String
  podMarketplace_not_starts_with_nocase: String
  podMarketplace_starts_with: String
  podMarketplace_starts_with_nocase: String
  podVolume: BigInt
  podVolume_gt: BigInt
  podVolume_gte: BigInt
  podVolume_in: [BigInt!]
  podVolume_lt: BigInt
  podVolume_lte: BigInt
  podVolume_not: BigInt
  podVolume_not_in: [BigInt!]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum PodMarketplaceHourlySnapshot_orderBy {
  availableListedPods
  beanVolume
  cancelledListedPods
  cancelledOrderedPods
  createdAt
  deltaAvailableListedPods
  deltaBeanVolume
  deltaCancelledListedPods
  deltaCancelledOrderedPods
  deltaExpiredListedPods
  deltaFilledListedPods
  deltaFilledOrderedPods
  deltaListedPods
  deltaOrderedPods
  deltaPodVolume
  expiredListedPods
  filledListedPods
  filledOrderedPods
  id
  listedPods
  orderedPods
  podMarketplace
  podMarketplace__availableListedPods
  podMarketplace__beanVolume
  podMarketplace__cancelledListedPods
  podMarketplace__cancelledOrderedPods
  podMarketplace__expiredListedPods
  podMarketplace__filledListedPods
  podMarketplace__filledOrderedPods
  podMarketplace__id
  podMarketplace__listedPods
  podMarketplace__orderedPods
  podMarketplace__podVolume
  podMarketplace__season
  podVolume
  season
  updatedAt
}

input PodMarketplace_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  allListings_: PodListing_filter
  allOrders_: PodOrder_filter
  and: [PodMarketplace_filter]
  availableListedPods: BigInt
  availableListedPods_gt: BigInt
  availableListedPods_gte: BigInt
  availableListedPods_in: [BigInt!]
  availableListedPods_lt: BigInt
  availableListedPods_lte: BigInt
  availableListedPods_not: BigInt
  availableListedPods_not_in: [BigInt!]
  beanVolume: BigInt
  beanVolume_gt: BigInt
  beanVolume_gte: BigInt
  beanVolume_in: [BigInt!]
  beanVolume_lt: BigInt
  beanVolume_lte: BigInt
  beanVolume_not: BigInt
  beanVolume_not_in: [BigInt!]
  cancelledListedPods: BigInt
  cancelledListedPods_gt: BigInt
  cancelledListedPods_gte: BigInt
  cancelledListedPods_in: [BigInt!]
  cancelledListedPods_lt: BigInt
  cancelledListedPods_lte: BigInt
  cancelledListedPods_not: BigInt
  cancelledListedPods_not_in: [BigInt!]
  cancelledOrderedPods: BigInt
  cancelledOrderedPods_gt: BigInt
  cancelledOrderedPods_gte: BigInt
  cancelledOrderedPods_in: [BigInt!]
  cancelledOrderedPods_lt: BigInt
  cancelledOrderedPods_lte: BigInt
  cancelledOrderedPods_not: BigInt
  cancelledOrderedPods_not_in: [BigInt!]
  dailySnapshots_: PodMarketplaceDailySnapshot_filter
  expiredListedPods: BigInt
  expiredListedPods_gt: BigInt
  expiredListedPods_gte: BigInt
  expiredListedPods_in: [BigInt!]
  expiredListedPods_lt: BigInt
  expiredListedPods_lte: BigInt
  expiredListedPods_not: BigInt
  expiredListedPods_not_in: [BigInt!]
  filledListedPods: BigInt
  filledListedPods_gt: BigInt
  filledListedPods_gte: BigInt
  filledListedPods_in: [BigInt!]
  filledListedPods_lt: BigInt
  filledListedPods_lte: BigInt
  filledListedPods_not: BigInt
  filledListedPods_not_in: [BigInt!]
  filledOrderedPods: BigInt
  filledOrderedPods_gt: BigInt
  filledOrderedPods_gte: BigInt
  filledOrderedPods_in: [BigInt!]
  filledOrderedPods_lt: BigInt
  filledOrderedPods_lte: BigInt
  filledOrderedPods_not: BigInt
  filledOrderedPods_not_in: [BigInt!]
  fills_: PodFill_filter
  hourlySnapshots_: PodMarketplaceHourlySnapshot_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  listedPods: BigInt
  listedPods_gt: BigInt
  listedPods_gte: BigInt
  listedPods_in: [BigInt!]
  listedPods_lt: BigInt
  listedPods_lte: BigInt
  listedPods_not: BigInt
  listedPods_not_in: [BigInt!]
  listingIndexes: [BigInt!]
  listingIndexes_contains: [BigInt!]
  listingIndexes_contains_nocase: [BigInt!]
  listingIndexes_not: [BigInt!]
  listingIndexes_not_contains: [BigInt!]
  listingIndexes_not_contains_nocase: [BigInt!]
  or: [PodMarketplace_filter]
  orderedPods: BigInt
  orderedPods_gt: BigInt
  orderedPods_gte: BigInt
  orderedPods_in: [BigInt!]
  orderedPods_lt: BigInt
  orderedPods_lte: BigInt
  orderedPods_not: BigInt
  orderedPods_not_in: [BigInt!]
  orders: [String!]
  orders_: PodOrder_filter
  orders_contains: [String!]
  orders_contains_nocase: [String!]
  orders_not: [String!]
  orders_not_contains: [String!]
  orders_not_contains_nocase: [String!]
  podVolume: BigInt
  podVolume_gt: BigInt
  podVolume_gte: BigInt
  podVolume_in: [BigInt!]
  podVolume_lt: BigInt
  podVolume_lte: BigInt
  podVolume_not: BigInt
  podVolume_not_in: [BigInt!]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
}

enum PodMarketplace_orderBy {
  allListings
  allOrders
  availableListedPods
  beanVolume
  cancelledListedPods
  cancelledOrderedPods
  dailySnapshots
  expiredListedPods
  filledListedPods
  filledOrderedPods
  fills
  hourlySnapshots
  id
  listedPods
  listingIndexes
  orderedPods
  orders
  podVolume
  season
}

type PodOrder {
  "The original number of Beans locked in the PodOrder.\n\nDoes NOT change as Fills occur.\nAlways deterministic, since the Farmer must lock Beans for PodOrder fulfillment.\n\nIf FIXED (V1): `amount * pricePerPod` fields emitted in PodOrderCreated.\nIf FIXED (V2): `amount` field emitted in PodOrderCreated.\nIf DYNAMIC (V2): `amount` field emitted in PodOrderCreated.\n"
  beanAmount: BigInt!

  "The current number of Beans spent to acquire Pods.\n\nIncreases during each subsequent Fill:\n`0 <= beanAmountFilled <= beanAmount`\n\nUpon PodOrder cancellation, this value is locked.\n"
  beanAmountFilled: BigInt!

  """Timestamp of PodOrder creation."""
  createdAt: BigInt!

  """Transaction hash when this PodOrder entity was created."""
  creationHash: String!

  """The Farmer that created the Pod Order."""
  farmer: Farmer!

  """All Fills associated with this PodOrder."""
  fills(first: Int = 100, orderBy: PodFill_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: PodFill_filter): [PodFill!]!

  "Historical ID for joins: `{account}-{createdAt}`\n"
  historyID: String!

  "The PodOrder ID matchces the `id` stored on-chain:\n\n`keccak256(abi.encodePacked(account, pricePerPod, maxPlaceInLine, minFillAmount))`\n"
  id: ID!

  "The Farmer is willing to buy any Pod that is before maxPlaceInLine at pricePerPod.\nAs the Pod Line moves, this value stays the same because new Pods meet the criteria.\n"
  maxPlaceInLine: BigInt!

  """Minimum number of Pods required to perform a Fill."""
  minFillAmount: BigInt!

  "The original number of Pods requested by this PodOrder.\n\nDoes NOT change as Fills occur.\nNot deterministic for PodOrders with pricingType = DYNAMIC.\n\nIf pricingType = FIXED:\n  Set to the number of Pods which can be purchased by the Order.\n  If FIXED (V1): `amount` field emitted in PodOrderCreated.\n  If FIXED (V2): `amount / pricePerPod` fields emitted in PodOrderCreated.\n\nIf pricingType = DYNAMIC:\n  Set to `0`. The number of Pods that will be provided is unknown, since\n  the price is calculated based on the place in line of supplied Pods.\n"
  podAmount: BigInt!

  "The current number of Pods that have been purchased by this PodOrder.\n\nIncreases during each subsequent Fill.\nIf pricingType = FIXED: `0 <= podAmountFilled <= podAmount`\nIf pricingType = DYNAMIC: No constraint, since `podAmount` is unknown.\n\nUpon PodOrder cancellation, this value is locked.\n"
  podAmountFilled: BigInt!

  """Marketplace used for Pod Order."""
  podMarketplace: PodMarketplace!

  "[V1] The FIXED price per Pod denominated in Beans.\n\nEx. `pricePerPod = 10000` indicates a price of 0.01 Beans per Pod.\n\nIf `pricingType = 1`, this field is initialized to `0` and should be ignored.\n"
  pricePerPod: Int!

  "[V2] The FIXED or DYNAMIC pricing function, encoded as bytes.\n\nThis must be decoded client-side, see `LibPolynomial.sol` for more info.\n\nnull    = V1 FIXED    = use `pricePerPod`\n\"0x\"    = V2 FIXED    = use `pricePerPod`\n\"0x...\" = V2 DYNAMIC  = use `pricingFunction`\n"
  pricingFunction: Bytes

  "The Pricing Type states whether this PodOrder uses FIXED or DYNAMIC pricing.\n\nnull = V1 FIXED  = use `pricePerPod`\n0    = V2 FIXED  = use `pricePerPod`\n1    = V2 DYNAMIC = use `pricingFunction`\n"
  pricingType: Int

  """Current status of order."""
  status: MarketStatus!

  """
  Timestamp of last PodOrder update. Changes when a PodOrder is Filled or Cancelled.
  """
  updatedAt: BigInt!
}

type PodOrderCancelled implements MarketplaceEvent {
  """ Account cancelling listing"""
  account: String!

  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """ Historical ID for joins"""
  historyID: String!

  """podOrderCancelled-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ ID of order cancelled"""
  orderId: String!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!
}

input PodOrderCancelled_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  and: [PodOrderCancelled_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  historyID: String
  historyID_contains: String
  historyID_contains_nocase: String
  historyID_ends_with: String
  historyID_ends_with_nocase: String
  historyID_gt: String
  historyID_gte: String
  historyID_in: [String!]
  historyID_lt: String
  historyID_lte: String
  historyID_not: String
  historyID_not_contains: String
  historyID_not_contains_nocase: String
  historyID_not_ends_with: String
  historyID_not_ends_with_nocase: String
  historyID_not_in: [String!]
  historyID_not_starts_with: String
  historyID_not_starts_with_nocase: String
  historyID_starts_with: String
  historyID_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [PodOrderCancelled_filter]
  orderId: String
  orderId_contains: String
  orderId_contains_nocase: String
  orderId_ends_with: String
  orderId_ends_with_nocase: String
  orderId_gt: String
  orderId_gte: String
  orderId_in: [String!]
  orderId_lt: String
  orderId_lte: String
  orderId_not: String
  orderId_not_contains: String
  orderId_not_contains_nocase: String
  orderId_not_ends_with: String
  orderId_not_ends_with_nocase: String
  orderId_not_in: [String!]
  orderId_not_starts_with: String
  orderId_not_starts_with_nocase: String
  orderId_starts_with: String
  orderId_starts_with_nocase: String
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
}

enum PodOrderCancelled_orderBy {
  account
  blockNumber
  createdAt
  hash
  historyID
  id
  logIndex
  orderId
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
}

type PodOrderCreated implements MarketplaceEvent {
  """ Account creating the listing"""
  account: String!

  "The represented value emitted with this event changed with BIP-29 at block 15277986\nPre  BIP-29: The number of pods ordered is emitted\nPost BIP-29: The number of beans supplied for the order is emitted.\n"
  amount: BigInt!

  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """ Historical ID for joins"""
  historyID: String!

  """podOrderCreated-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """Max place in line"""
  maxPlaceInLine: BigInt!

  """ ID of the pod order"""
  orderId: String!

  """Price per pod"""
  pricePerPod: Int!

  """Pricing Function Data"""
  pricingFunction: Bytes

  """Pricing Type"""
  pricingType: Int

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!
}

input PodOrderCreated_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [PodOrderCreated_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  historyID: String
  historyID_contains: String
  historyID_contains_nocase: String
  historyID_ends_with: String
  historyID_ends_with_nocase: String
  historyID_gt: String
  historyID_gte: String
  historyID_in: [String!]
  historyID_lt: String
  historyID_lte: String
  historyID_not: String
  historyID_not_contains: String
  historyID_not_contains_nocase: String
  historyID_not_ends_with: String
  historyID_not_ends_with_nocase: String
  historyID_not_in: [String!]
  historyID_not_starts_with: String
  historyID_not_starts_with_nocase: String
  historyID_starts_with: String
  historyID_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  maxPlaceInLine: BigInt
  maxPlaceInLine_gt: BigInt
  maxPlaceInLine_gte: BigInt
  maxPlaceInLine_in: [BigInt!]
  maxPlaceInLine_lt: BigInt
  maxPlaceInLine_lte: BigInt
  maxPlaceInLine_not: BigInt
  maxPlaceInLine_not_in: [BigInt!]
  or: [PodOrderCreated_filter]
  orderId: String
  orderId_contains: String
  orderId_contains_nocase: String
  orderId_ends_with: String
  orderId_ends_with_nocase: String
  orderId_gt: String
  orderId_gte: String
  orderId_in: [String!]
  orderId_lt: String
  orderId_lte: String
  orderId_not: String
  orderId_not_contains: String
  orderId_not_contains_nocase: String
  orderId_not_ends_with: String
  orderId_not_ends_with_nocase: String
  orderId_not_in: [String!]
  orderId_not_starts_with: String
  orderId_not_starts_with_nocase: String
  orderId_starts_with: String
  orderId_starts_with_nocase: String
  pricePerPod: Int
  pricePerPod_gt: Int
  pricePerPod_gte: Int
  pricePerPod_in: [Int!]
  pricePerPod_lt: Int
  pricePerPod_lte: Int
  pricePerPod_not: Int
  pricePerPod_not_in: [Int!]
  pricingFunction: Bytes
  pricingFunction_contains: Bytes
  pricingFunction_gt: Bytes
  pricingFunction_gte: Bytes
  pricingFunction_in: [Bytes!]
  pricingFunction_lt: Bytes
  pricingFunction_lte: Bytes
  pricingFunction_not: Bytes
  pricingFunction_not_contains: Bytes
  pricingFunction_not_in: [Bytes!]
  pricingType: Int
  pricingType_gt: Int
  pricingType_gte: Int
  pricingType_in: [Int!]
  pricingType_lt: Int
  pricingType_lte: Int
  pricingType_not: Int
  pricingType_not_in: [Int!]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
}

enum PodOrderCreated_orderBy {
  account
  amount
  blockNumber
  createdAt
  hash
  historyID
  id
  logIndex
  maxPlaceInLine
  orderId
  pricePerPod
  pricingFunction
  pricingType
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
}

type PodOrderFilled implements MarketplaceEvent {
  """Number of pods transferred"""
  amount: BigInt!

  """ Block number of this event """
  blockNumber: BigInt!

  """Beans paid to fill the order"""
  costInBeans: BigInt

  """ Timestamp of this event """
  createdAt: BigInt!

  """Account selling pods"""
  from: String!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """ Historical ID for joins"""
  historyID: String!

  """podOrderFilled-{ Transaction hash }-{ Log index }"""
  id: ID!

  """Index of the plot transferred"""
  index: BigInt!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """Start of the plot transferred"""
  start: BigInt!

  """Account buying pods"""
  to: String!
}

input PodOrderFilled_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [PodOrderFilled_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  costInBeans: BigInt
  costInBeans_gt: BigInt
  costInBeans_gte: BigInt
  costInBeans_in: [BigInt!]
  costInBeans_lt: BigInt
  costInBeans_lte: BigInt
  costInBeans_not: BigInt
  costInBeans_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  from: String
  from_contains: String
  from_contains_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_gt: String
  from_gte: String
  from_in: [String!]
  from_lt: String
  from_lte: String
  from_not: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_not_in: [String!]
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  historyID: String
  historyID_contains: String
  historyID_contains_nocase: String
  historyID_ends_with: String
  historyID_ends_with_nocase: String
  historyID_gt: String
  historyID_gte: String
  historyID_in: [String!]
  historyID_lt: String
  historyID_lte: String
  historyID_not: String
  historyID_not_contains: String
  historyID_not_contains_nocase: String
  historyID_not_ends_with: String
  historyID_not_ends_with_nocase: String
  historyID_not_in: [String!]
  historyID_not_starts_with: String
  historyID_not_starts_with_nocase: String
  historyID_starts_with: String
  historyID_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  index: BigInt
  index_gt: BigInt
  index_gte: BigInt
  index_in: [BigInt!]
  index_lt: BigInt
  index_lte: BigInt
  index_not: BigInt
  index_not_in: [BigInt!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [PodOrderFilled_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  start: BigInt
  start_gt: BigInt
  start_gte: BigInt
  start_in: [BigInt!]
  start_lt: BigInt
  start_lte: BigInt
  start_not: BigInt
  start_not_in: [BigInt!]
  to: String
  to_contains: String
  to_contains_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_gt: String
  to_gte: String
  to_in: [String!]
  to_lt: String
  to_lte: String
  to_not: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_not_in: [String!]
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
}

enum PodOrderFilled_orderBy {
  amount
  blockNumber
  costInBeans
  createdAt
  from
  hash
  historyID
  id
  index
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  start
  to
}

input PodOrder_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PodOrder_filter]
  beanAmount: BigInt
  beanAmountFilled: BigInt
  beanAmountFilled_gt: BigInt
  beanAmountFilled_gte: BigInt
  beanAmountFilled_in: [BigInt!]
  beanAmountFilled_lt: BigInt
  beanAmountFilled_lte: BigInt
  beanAmountFilled_not: BigInt
  beanAmountFilled_not_in: [BigInt!]
  beanAmount_gt: BigInt
  beanAmount_gte: BigInt
  beanAmount_in: [BigInt!]
  beanAmount_lt: BigInt
  beanAmount_lte: BigInt
  beanAmount_not: BigInt
  beanAmount_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  creationHash: String
  creationHash_contains: String
  creationHash_contains_nocase: String
  creationHash_ends_with: String
  creationHash_ends_with_nocase: String
  creationHash_gt: String
  creationHash_gte: String
  creationHash_in: [String!]
  creationHash_lt: String
  creationHash_lte: String
  creationHash_not: String
  creationHash_not_contains: String
  creationHash_not_contains_nocase: String
  creationHash_not_ends_with: String
  creationHash_not_ends_with_nocase: String
  creationHash_not_in: [String!]
  creationHash_not_starts_with: String
  creationHash_not_starts_with_nocase: String
  creationHash_starts_with: String
  creationHash_starts_with_nocase: String
  farmer: String
  farmer_: Farmer_filter
  farmer_contains: String
  farmer_contains_nocase: String
  farmer_ends_with: String
  farmer_ends_with_nocase: String
  farmer_gt: String
  farmer_gte: String
  farmer_in: [String!]
  farmer_lt: String
  farmer_lte: String
  farmer_not: String
  farmer_not_contains: String
  farmer_not_contains_nocase: String
  farmer_not_ends_with: String
  farmer_not_ends_with_nocase: String
  farmer_not_in: [String!]
  farmer_not_starts_with: String
  farmer_not_starts_with_nocase: String
  farmer_starts_with: String
  farmer_starts_with_nocase: String
  fills: [String!]
  fills_: PodFill_filter
  fills_contains: [String!]
  fills_contains_nocase: [String!]
  fills_not: [String!]
  fills_not_contains: [String!]
  fills_not_contains_nocase: [String!]
  historyID: String
  historyID_contains: String
  historyID_contains_nocase: String
  historyID_ends_with: String
  historyID_ends_with_nocase: String
  historyID_gt: String
  historyID_gte: String
  historyID_in: [String!]
  historyID_lt: String
  historyID_lte: String
  historyID_not: String
  historyID_not_contains: String
  historyID_not_contains_nocase: String
  historyID_not_ends_with: String
  historyID_not_ends_with_nocase: String
  historyID_not_in: [String!]
  historyID_not_starts_with: String
  historyID_not_starts_with_nocase: String
  historyID_starts_with: String
  historyID_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  maxPlaceInLine: BigInt
  maxPlaceInLine_gt: BigInt
  maxPlaceInLine_gte: BigInt
  maxPlaceInLine_in: [BigInt!]
  maxPlaceInLine_lt: BigInt
  maxPlaceInLine_lte: BigInt
  maxPlaceInLine_not: BigInt
  maxPlaceInLine_not_in: [BigInt!]
  minFillAmount: BigInt
  minFillAmount_gt: BigInt
  minFillAmount_gte: BigInt
  minFillAmount_in: [BigInt!]
  minFillAmount_lt: BigInt
  minFillAmount_lte: BigInt
  minFillAmount_not: BigInt
  minFillAmount_not_in: [BigInt!]
  or: [PodOrder_filter]
  podAmount: BigInt
  podAmountFilled: BigInt
  podAmountFilled_gt: BigInt
  podAmountFilled_gte: BigInt
  podAmountFilled_in: [BigInt!]
  podAmountFilled_lt: BigInt
  podAmountFilled_lte: BigInt
  podAmountFilled_not: BigInt
  podAmountFilled_not_in: [BigInt!]
  podAmount_gt: BigInt
  podAmount_gte: BigInt
  podAmount_in: [BigInt!]
  podAmount_lt: BigInt
  podAmount_lte: BigInt
  podAmount_not: BigInt
  podAmount_not_in: [BigInt!]
  podMarketplace: String
  podMarketplace_: PodMarketplace_filter
  podMarketplace_contains: String
  podMarketplace_contains_nocase: String
  podMarketplace_ends_with: String
  podMarketplace_ends_with_nocase: String
  podMarketplace_gt: String
  podMarketplace_gte: String
  podMarketplace_in: [String!]
  podMarketplace_lt: String
  podMarketplace_lte: String
  podMarketplace_not: String
  podMarketplace_not_contains: String
  podMarketplace_not_contains_nocase: String
  podMarketplace_not_ends_with: String
  podMarketplace_not_ends_with_nocase: String
  podMarketplace_not_in: [String!]
  podMarketplace_not_starts_with: String
  podMarketplace_not_starts_with_nocase: String
  podMarketplace_starts_with: String
  podMarketplace_starts_with_nocase: String
  pricePerPod: Int
  pricePerPod_gt: Int
  pricePerPod_gte: Int
  pricePerPod_in: [Int!]
  pricePerPod_lt: Int
  pricePerPod_lte: Int
  pricePerPod_not: Int
  pricePerPod_not_in: [Int!]
  pricingFunction: Bytes
  pricingFunction_contains: Bytes
  pricingFunction_gt: Bytes
  pricingFunction_gte: Bytes
  pricingFunction_in: [Bytes!]
  pricingFunction_lt: Bytes
  pricingFunction_lte: Bytes
  pricingFunction_not: Bytes
  pricingFunction_not_contains: Bytes
  pricingFunction_not_in: [Bytes!]
  pricingType: Int
  pricingType_gt: Int
  pricingType_gte: Int
  pricingType_in: [Int!]
  pricingType_lt: Int
  pricingType_lte: Int
  pricingType_not: Int
  pricingType_not_in: [Int!]
  status: MarketStatus
  status_in: [MarketStatus!]
  status_not: MarketStatus
  status_not_in: [MarketStatus!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum PodOrder_orderBy {
  beanAmount
  beanAmountFilled
  createdAt
  creationHash
  farmer
  farmer__id
  fills
  historyID
  id
  maxPlaceInLine
  minFillAmount
  podAmount
  podAmountFilled
  podMarketplace
  podMarketplace__availableListedPods
  podMarketplace__beanVolume
  podMarketplace__cancelledListedPods
  podMarketplace__cancelledOrderedPods
  podMarketplace__expiredListedPods
  podMarketplace__filledListedPods
  podMarketplace__filledOrderedPods
  podMarketplace__id
  podMarketplace__listedPods
  podMarketplace__orderedPods
  podMarketplace__podVolume
  podMarketplace__season
  pricePerPod
  pricingFunction
  pricingType
  status
  updatedAt
}

type PodTransfer implements FieldEvent {
  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Address that sent the pods """
  from: String!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """ podtransfer-{ Transaction hash }-{ Log index } """
  id: ID!

  """ Index of the pods sent"""
  index: BigInt!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ Total pods being sent"""
  pods: BigInt!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """ Address that received the pods """
  to: String!
}

input PodTransfer_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PodTransfer_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  from: String
  from_contains: String
  from_contains_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_gt: String
  from_gte: String
  from_in: [String!]
  from_lt: String
  from_lte: String
  from_not: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_not_in: [String!]
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  index: BigInt
  index_gt: BigInt
  index_gte: BigInt
  index_in: [BigInt!]
  index_lt: BigInt
  index_lte: BigInt
  index_not: BigInt
  index_not_in: [BigInt!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [PodTransfer_filter]
  pods: BigInt
  pods_gt: BigInt
  pods_gte: BigInt
  pods_in: [BigInt!]
  pods_lt: BigInt
  pods_lte: BigInt
  pods_not: BigInt
  pods_not_in: [BigInt!]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  to: String
  to_contains: String
  to_contains_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_gt: String
  to_gte: String
  to_in: [String!]
  to_lt: String
  to_lte: String
  to_not: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_not_in: [String!]
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
}

enum PodTransfer_orderBy {
  blockNumber
  createdAt
  from
  hash
  id
  index
  logIndex
  pods
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  to
}

type Query {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  addDeposit(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AddDeposit
  addDeposits(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AddDeposit_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AddDeposit_filter
  ): [AddDeposit!]!
  beanstalk(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Beanstalk
  beanstalks(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Beanstalk_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Beanstalk_filter
  ): [Beanstalk!]!
  chop(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Chop
  chops(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Chop_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Chop_filter
  ): [Chop!]!
  dewhitelistToken(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DewhitelistToken
  dewhitelistTokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: DewhitelistToken_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: DewhitelistToken_filter
  ): [DewhitelistToken!]!
  farmer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Farmer
  farmers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Farmer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Farmer_filter
  ): [Farmer!]!
  fertilizer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Fertilizer
  fertilizerBalance(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FertilizerBalance
  fertilizerBalances(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FertilizerBalance_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FertilizerBalance_filter
  ): [FertilizerBalance!]!
  fertilizerToken(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FertilizerToken
  fertilizerTokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FertilizerToken_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FertilizerToken_filter
  ): [FertilizerToken!]!
  fertilizerYield(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FertilizerYield
  fertilizerYields(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FertilizerYield_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FertilizerYield_filter
  ): [FertilizerYield!]!
  fertilizers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Fertilizer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Fertilizer_filter
  ): [Fertilizer!]!
  field(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Field
  fieldDailySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FieldDailySnapshot
  fieldDailySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FieldDailySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FieldDailySnapshot_filter
  ): [FieldDailySnapshot!]!
  fieldEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FieldEvent
  fieldEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FieldEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FieldEvent_filter
  ): [FieldEvent!]!
  fieldHourlySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FieldHourlySnapshot
  fieldHourlySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FieldHourlySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FieldHourlySnapshot_filter
  ): [FieldHourlySnapshot!]!
  fields(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Field_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Field_filter
  ): [Field!]!
  germinating(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Germinating
  germinatings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Germinating_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Germinating_filter
  ): [Germinating!]!
  harvest(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Harvest
  harvests(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Harvest_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Harvest_filter
  ): [Harvest!]!
  incentive(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Incentive
  incentives(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Incentive_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Incentive_filter
  ): [Incentive!]!
  marketplaceEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketplaceEvent
  marketplaceEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: MarketplaceEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: MarketplaceEvent_filter
  ): [MarketplaceEvent!]!
  metapoolOracle(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetapoolOracle
  metapoolOracles(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: MetapoolOracle_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: MetapoolOracle_filter
  ): [MetapoolOracle!]!
  plot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Plot
  plots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Plot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Plot_filter
  ): [Plot!]!
  podFill(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodFill
  podFills(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodFill_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodFill_filter
  ): [PodFill!]!
  podListing(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodListing
  podListingCancelled(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodListingCancelled
  podListingCancelleds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodListingCancelled_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodListingCancelled_filter
  ): [PodListingCancelled!]!
  podListingCreated(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodListingCreated
  podListingCreateds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodListingCreated_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodListingCreated_filter
  ): [PodListingCreated!]!
  podListingFilled(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodListingFilled
  podListingFilleds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodListingFilled_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodListingFilled_filter
  ): [PodListingFilled!]!
  podListings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodListing_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodListing_filter
  ): [PodListing!]!
  podMarketplace(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodMarketplace
  podMarketplaceDailySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodMarketplaceDailySnapshot
  podMarketplaceDailySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodMarketplaceDailySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodMarketplaceDailySnapshot_filter
  ): [PodMarketplaceDailySnapshot!]!
  podMarketplaceHourlySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodMarketplaceHourlySnapshot
  podMarketplaceHourlySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodMarketplaceHourlySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodMarketplaceHourlySnapshot_filter
  ): [PodMarketplaceHourlySnapshot!]!
  podMarketplaces(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodMarketplace_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodMarketplace_filter
  ): [PodMarketplace!]!
  podOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodOrder
  podOrderCancelled(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodOrderCancelled
  podOrderCancelleds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodOrderCancelled_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodOrderCancelled_filter
  ): [PodOrderCancelled!]!
  podOrderCreated(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodOrderCreated
  podOrderCreateds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodOrderCreated_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodOrderCreated_filter
  ): [PodOrderCreated!]!
  podOrderFilled(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodOrderFilled
  podOrderFilleds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodOrderFilled_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodOrderFilled_filter
  ): [PodOrderFilled!]!
  podOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodOrder_filter
  ): [PodOrder!]!
  podTransfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodTransfer
  podTransfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodTransfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodTransfer_filter
  ): [PodTransfer!]!
  removeDeposit(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RemoveDeposit
  removeDeposits(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RemoveDeposit_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RemoveDeposit_filter
  ): [RemoveDeposit!]!
  reward(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Reward
  rewards(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Reward_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Reward_filter
  ): [Reward!]!
  season(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Season
  seasons(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Season_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Season_filter
  ): [Season!]!
  seedChange(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SeedChange
  seedChanges(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SeedChange_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SeedChange_filter
  ): [SeedChange!]!
  silo(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Silo
  siloAsset(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloAsset
  siloAssetDailySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloAssetDailySnapshot
  siloAssetDailySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloAssetDailySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloAssetDailySnapshot_filter
  ): [SiloAssetDailySnapshot!]!
  siloAssetHourlySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloAssetHourlySnapshot
  siloAssetHourlySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloAssetHourlySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloAssetHourlySnapshot_filter
  ): [SiloAssetHourlySnapshot!]!
  siloAssets(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloAsset_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloAsset_filter
  ): [SiloAsset!]!
  siloDailySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloDailySnapshot
  siloDailySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloDailySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloDailySnapshot_filter
  ): [SiloDailySnapshot!]!
  siloDeposit(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloDeposit
  siloDeposits(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloDeposit_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloDeposit_filter
  ): [SiloDeposit!]!
  siloEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloEvent
  siloEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloEvent_filter
  ): [SiloEvent!]!
  siloHourlySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloHourlySnapshot
  siloHourlySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloHourlySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloHourlySnapshot_filter
  ): [SiloHourlySnapshot!]!
  siloWithdraw(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloWithdraw
  siloWithdraws(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloWithdraw_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloWithdraw_filter
  ): [SiloWithdraw!]!
  siloYield(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloYield
  siloYields(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloYield_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloYield_filter
  ): [SiloYield!]!
  silos(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Silo_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Silo_filter
  ): [Silo!]!
  stalkChange(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StalkChange
  stalkChanges(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: StalkChange_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: StalkChange_filter
  ): [StalkChange!]!
  tokenYield(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenYield
  tokenYields(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TokenYield_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TokenYield_filter
  ): [TokenYield!]!
  wellOracle(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WellOracle
  wellOracles(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WellOracle_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WellOracle_filter
  ): [WellOracle!]!
  whitelistToken(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WhitelistToken
  whitelistTokenDailySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WhitelistTokenDailySnapshot
  whitelistTokenDailySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WhitelistTokenDailySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WhitelistTokenDailySnapshot_filter
  ): [WhitelistTokenDailySnapshot!]!
  whitelistTokenHourlySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WhitelistTokenHourlySnapshot
  whitelistTokenHourlySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WhitelistTokenHourlySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WhitelistTokenHourlySnapshot_filter
  ): [WhitelistTokenHourlySnapshot!]!
  whitelistTokenSetting(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WhitelistTokenSetting
  whitelistTokenSettings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WhitelistTokenSetting_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WhitelistTokenSetting_filter
  ): [WhitelistTokenSetting!]!
  whitelistTokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WhitelistToken_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WhitelistToken_filter
  ): [WhitelistToken!]!
}

type RemoveDeposit implements SiloEvent {
  """ Account removing deposit"""
  account: String!

  """ Amount of token removed """
  amount: BigInt!

  """ BDV of deposit removed """
  bdv: BigInt

  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """removeDeposit-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """ Season of deposit removed """
  season: Int!

  """ Stem of deposit removed """
  stem: BigInt

  """ Token removed"""
  token: String!
}

input RemoveDeposit_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [RemoveDeposit_filter]
  bdv: BigInt
  bdv_gt: BigInt
  bdv_gte: BigInt
  bdv_in: [BigInt!]
  bdv_lt: BigInt
  bdv_lte: BigInt
  bdv_not: BigInt
  bdv_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [RemoveDeposit_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  stem: BigInt
  stem_gt: BigInt
  stem_gte: BigInt
  stem_in: [BigInt!]
  stem_lt: BigInt
  stem_lte: BigInt
  stem_not: BigInt
  stem_not_in: [BigInt!]
  token: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
}

enum RemoveDeposit_orderBy {
  account
  amount
  bdv
  blockNumber
  createdAt
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  season
  stem
  token
}

type Reward implements SiloEvent {
  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """reward-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """ Season of reward """
  season: Int!

  """ Amount minted to fertilizer"""
  toFertilizer: BigInt!

  """ Amount minted to pod line"""
  toField: BigInt!

  """ Amount minted to silo"""
  toSilo: BigInt!
}

input Reward_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Reward_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [Reward_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  toFertilizer: BigInt
  toFertilizer_gt: BigInt
  toFertilizer_gte: BigInt
  toFertilizer_in: [BigInt!]
  toFertilizer_lt: BigInt
  toFertilizer_lte: BigInt
  toFertilizer_not: BigInt
  toFertilizer_not_in: [BigInt!]
  toField: BigInt
  toField_gt: BigInt
  toField_gte: BigInt
  toField_in: [BigInt!]
  toField_lt: BigInt
  toField_lte: BigInt
  toField_not: BigInt
  toField_not_in: [BigInt!]
  toSilo: BigInt
  toSilo_gt: BigInt
  toSilo_gte: BigInt
  toSilo_in: [BigInt!]
  toSilo_lt: BigInt
  toSilo_lte: BigInt
  toSilo_not: BigInt
  toSilo_not_in: [BigInt!]
}

enum Reward_orderBy {
  blockNumber
  createdAt
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  season
  toFertilizer
  toField
  toSilo
}

type Season {
  """ Total Bean supply """
  beans: BigInt!

  """ Beanstalk Contract Address """
  beanstalk: Beanstalk!

  """ Block timestamp when sunrise was called """
  createdAt: BigInt!

  """ Time weighted deltaB """
  deltaB: BigInt!

  """ Change in Bean supply """
  deltaBeans: BigInt!

  """ New harvestable index for the season """
  harvestableIndex: BigInt!

  """ Season Number"""
  id: ID!

  """ Amount of Beans paid to sunrise caller """
  incentiveBeans: BigInt!

  """ Bean Market Cap """
  marketCap: BigDecimal!

  """ Price of BEAN during sunrise """
  price: BigDecimal!

  """ Amount of Beans minted during sunrise """
  rewardBeans: BigInt!

  """ Season number in Int form for sorting """
  season: Int!
}

input Season_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Season_filter]
  beans: BigInt
  beans_gt: BigInt
  beans_gte: BigInt
  beans_in: [BigInt!]
  beans_lt: BigInt
  beans_lte: BigInt
  beans_not: BigInt
  beans_not_in: [BigInt!]
  beanstalk: String
  beanstalk_: Beanstalk_filter
  beanstalk_contains: String
  beanstalk_contains_nocase: String
  beanstalk_ends_with: String
  beanstalk_ends_with_nocase: String
  beanstalk_gt: String
  beanstalk_gte: String
  beanstalk_in: [String!]
  beanstalk_lt: String
  beanstalk_lte: String
  beanstalk_not: String
  beanstalk_not_contains: String
  beanstalk_not_contains_nocase: String
  beanstalk_not_ends_with: String
  beanstalk_not_ends_with_nocase: String
  beanstalk_not_in: [String!]
  beanstalk_not_starts_with: String
  beanstalk_not_starts_with_nocase: String
  beanstalk_starts_with: String
  beanstalk_starts_with_nocase: String
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  deltaB: BigInt
  deltaB_gt: BigInt
  deltaB_gte: BigInt
  deltaB_in: [BigInt!]
  deltaB_lt: BigInt
  deltaB_lte: BigInt
  deltaB_not: BigInt
  deltaB_not_in: [BigInt!]
  deltaBeans: BigInt
  deltaBeans_gt: BigInt
  deltaBeans_gte: BigInt
  deltaBeans_in: [BigInt!]
  deltaBeans_lt: BigInt
  deltaBeans_lte: BigInt
  deltaBeans_not: BigInt
  deltaBeans_not_in: [BigInt!]
  harvestableIndex: BigInt
  harvestableIndex_gt: BigInt
  harvestableIndex_gte: BigInt
  harvestableIndex_in: [BigInt!]
  harvestableIndex_lt: BigInt
  harvestableIndex_lte: BigInt
  harvestableIndex_not: BigInt
  harvestableIndex_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  incentiveBeans: BigInt
  incentiveBeans_gt: BigInt
  incentiveBeans_gte: BigInt
  incentiveBeans_in: [BigInt!]
  incentiveBeans_lt: BigInt
  incentiveBeans_lte: BigInt
  incentiveBeans_not: BigInt
  incentiveBeans_not_in: [BigInt!]
  marketCap: BigDecimal
  marketCap_gt: BigDecimal
  marketCap_gte: BigDecimal
  marketCap_in: [BigDecimal!]
  marketCap_lt: BigDecimal
  marketCap_lte: BigDecimal
  marketCap_not: BigDecimal
  marketCap_not_in: [BigDecimal!]
  or: [Season_filter]
  price: BigDecimal
  price_gt: BigDecimal
  price_gte: BigDecimal
  price_in: [BigDecimal!]
  price_lt: BigDecimal
  price_lte: BigDecimal
  price_not: BigDecimal
  price_not_in: [BigDecimal!]
  rewardBeans: BigInt
  rewardBeans_gt: BigInt
  rewardBeans_gte: BigInt
  rewardBeans_in: [BigInt!]
  rewardBeans_lt: BigInt
  rewardBeans_lte: BigInt
  rewardBeans_not: BigInt
  rewardBeans_not_in: [BigInt!]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
}

enum Season_orderBy {
  beans
  beanstalk
  beanstalk__id
  beanstalk__lastSeason
  beanstalk__lastUpgrade
  beanstalk__methodologyVersion
  beanstalk__name
  beanstalk__schemaVersion
  beanstalk__slug
  beanstalk__subgraphVersion
  createdAt
  deltaB
  deltaBeans
  harvestableIndex
  id
  incentiveBeans
  marketCap
  price
  rewardBeans
  season
}

type SeedChange implements SiloEvent {
  """ Account removing deposit"""
  account: String!

  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Token removed"""
  delta: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """seedChange-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """ Season when the change happened """
  season: Int!
}

input SeedChange_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  and: [SeedChange_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  delta: BigInt
  delta_gt: BigInt
  delta_gte: BigInt
  delta_in: [BigInt!]
  delta_lt: BigInt
  delta_lte: BigInt
  delta_not: BigInt
  delta_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [SeedChange_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
}

enum SeedChange_orderBy {
  account
  blockNumber
  createdAt
  delta
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  season
}

type Silo {
  """Current number of active farmers deposited in the silo"""
  activeFarmers: Int!

  """Link to all silo assets currently associated with this silo"""
  assets(first: Int = 100, orderBy: SiloAsset_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: SiloAsset_filter): [SiloAsset!]!

  """Cumulative total for bean mints sent to the silo"""
  beanMints: BigInt!

  """[Seed Gauge] Current target ratio of Bean to LP deposits"""
  beanToMaxLpGpPerBdvRatio: BigInt

  """Beanstalk diamond address"""
  beanstalk: Beanstalk!

  """Link to daily snapshot data"""
  dailySnapshots(first: Int = 100, orderBy: SiloDailySnapshot_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: SiloDailySnapshot_filter): [SiloDailySnapshot!]!

  """Current BDV of all deposited assets"""
  depositedBDV: BigInt!

  """Tokens that have been removed from the silo deposit whitelist"""
  dewhitelistedTokens: [String!]!

  """Farmer address if applicable"""
  farmer: Farmer

  """[Seed Gauge] Stalk that is currently Germinating"""
  germinatingStalk: BigInt!

  """Current grown stalk per season"""
  grownStalkPerSeason: BigInt!

  """Link to hourly snapshot data"""
  hourlySnapshots(first: Int = 100, orderBy: SiloHourlySnapshot_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: SiloHourlySnapshot_filter): [SiloHourlySnapshot!]!

  """Address for the farmer or Beanstalk"""
  id: ID!

  """Current plantable stalk for bean seigniorage not yet claimed"""
  plantableStalk: BigInt!

  """Current roots balance"""
  roots: BigInt!

  """Current seeds balance"""
  seeds: BigInt!

  """Current stalk balance"""
  stalk: BigInt!

  """Tokens whitelisted for deposit within the silo"""
  whitelistedTokens: [String!]!
}

type SiloAsset {
  """Link to daily snapshot data"""
  dailySnapshots(first: Int = 100, orderBy: SiloAssetDailySnapshot_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: SiloAssetDailySnapshot_filter): [SiloAssetDailySnapshot!]!

  """Current Token amount of deposits"""
  depositedAmount: BigInt!

  """Current BDV of deposits"""
  depositedBDV: BigInt!

  """Current internal (farm) balance of the asset"""
  farmAmount: BigInt!

  """Link to hourly snapshot data"""
  hourlySnapshots(first: Int = 100, orderBy: SiloAssetHourlySnapshot_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: SiloAssetHourlySnapshot_filter): [SiloAssetHourlySnapshot!]!

  """Silo ID - Asset Token Address"""
  id: ID!

  """Silo for this asset"""
  silo: Silo!

  """Token address for this asset"""
  token: String!

  """Current Token amount of silo withdrawals"""
  withdrawnAmount: BigInt!
}

type SiloAssetDailySnapshot {
  """Timestamp of initial snapshot creation"""
  createdAt: BigInt!

  """Point in time delta Token amount of deposits"""
  deltaDepositedAmount: BigInt!

  """Point in time delta BDV of deposits"""
  deltaDepositedBDV: BigInt!

  """Point in time delta internal (farm) balance of the asset"""
  deltaFarmAmount: BigInt!

  """Point in time delta Token amount of silo withdrawals"""
  deltaWithdrawnAmount: BigInt!

  """Point in time current Token amount of deposits"""
  depositedAmount: BigInt!

  """Point in time current BDV of deposits"""
  depositedBDV: BigInt!

  """Point in time current internal (farm) balance of the asset"""
  farmAmount: BigInt!

  """Silo Asset ID - Unix Timestamp"""
  id: ID!

  """Last season for the snapshot"""
  season: Int!

  """Silo asset associated with this snapshot"""
  siloAsset: SiloAsset!

  """Timestamp of last entity update"""
  updatedAt: BigInt!

  """Point in time current Token amount of silo withdrawals"""
  withdrawnAmount: BigInt!
}

input SiloAssetDailySnapshot_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SiloAssetDailySnapshot_filter]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  deltaDepositedAmount: BigInt
  deltaDepositedAmount_gt: BigInt
  deltaDepositedAmount_gte: BigInt
  deltaDepositedAmount_in: [BigInt!]
  deltaDepositedAmount_lt: BigInt
  deltaDepositedAmount_lte: BigInt
  deltaDepositedAmount_not: BigInt
  deltaDepositedAmount_not_in: [BigInt!]
  deltaDepositedBDV: BigInt
  deltaDepositedBDV_gt: BigInt
  deltaDepositedBDV_gte: BigInt
  deltaDepositedBDV_in: [BigInt!]
  deltaDepositedBDV_lt: BigInt
  deltaDepositedBDV_lte: BigInt
  deltaDepositedBDV_not: BigInt
  deltaDepositedBDV_not_in: [BigInt!]
  deltaFarmAmount: BigInt
  deltaFarmAmount_gt: BigInt
  deltaFarmAmount_gte: BigInt
  deltaFarmAmount_in: [BigInt!]
  deltaFarmAmount_lt: BigInt
  deltaFarmAmount_lte: BigInt
  deltaFarmAmount_not: BigInt
  deltaFarmAmount_not_in: [BigInt!]
  deltaWithdrawnAmount: BigInt
  deltaWithdrawnAmount_gt: BigInt
  deltaWithdrawnAmount_gte: BigInt
  deltaWithdrawnAmount_in: [BigInt!]
  deltaWithdrawnAmount_lt: BigInt
  deltaWithdrawnAmount_lte: BigInt
  deltaWithdrawnAmount_not: BigInt
  deltaWithdrawnAmount_not_in: [BigInt!]
  depositedAmount: BigInt
  depositedAmount_gt: BigInt
  depositedAmount_gte: BigInt
  depositedAmount_in: [BigInt!]
  depositedAmount_lt: BigInt
  depositedAmount_lte: BigInt
  depositedAmount_not: BigInt
  depositedAmount_not_in: [BigInt!]
  depositedBDV: BigInt
  depositedBDV_gt: BigInt
  depositedBDV_gte: BigInt
  depositedBDV_in: [BigInt!]
  depositedBDV_lt: BigInt
  depositedBDV_lte: BigInt
  depositedBDV_not: BigInt
  depositedBDV_not_in: [BigInt!]
  farmAmount: BigInt
  farmAmount_gt: BigInt
  farmAmount_gte: BigInt
  farmAmount_in: [BigInt!]
  farmAmount_lt: BigInt
  farmAmount_lte: BigInt
  farmAmount_not: BigInt
  farmAmount_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [SiloAssetDailySnapshot_filter]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  siloAsset: String
  siloAsset_: SiloAsset_filter
  siloAsset_contains: String
  siloAsset_contains_nocase: String
  siloAsset_ends_with: String
  siloAsset_ends_with_nocase: String
  siloAsset_gt: String
  siloAsset_gte: String
  siloAsset_in: [String!]
  siloAsset_lt: String
  siloAsset_lte: String
  siloAsset_not: String
  siloAsset_not_contains: String
  siloAsset_not_contains_nocase: String
  siloAsset_not_ends_with: String
  siloAsset_not_ends_with_nocase: String
  siloAsset_not_in: [String!]
  siloAsset_not_starts_with: String
  siloAsset_not_starts_with_nocase: String
  siloAsset_starts_with: String
  siloAsset_starts_with_nocase: String
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
  withdrawnAmount: BigInt
  withdrawnAmount_gt: BigInt
  withdrawnAmount_gte: BigInt
  withdrawnAmount_in: [BigInt!]
  withdrawnAmount_lt: BigInt
  withdrawnAmount_lte: BigInt
  withdrawnAmount_not: BigInt
  withdrawnAmount_not_in: [BigInt!]
}

enum SiloAssetDailySnapshot_orderBy {
  createdAt
  deltaDepositedAmount
  deltaDepositedBDV
  deltaFarmAmount
  deltaWithdrawnAmount
  depositedAmount
  depositedBDV
  farmAmount
  id
  season
  siloAsset
  siloAsset__depositedAmount
  siloAsset__depositedBDV
  siloAsset__farmAmount
  siloAsset__id
  siloAsset__token
  siloAsset__withdrawnAmount
  updatedAt
  withdrawnAmount
}

type SiloAssetHourlySnapshot {
  """Timestamp of initial snapshot creation"""
  createdAt: BigInt!

  """Point in time delta Token amount of deposits"""
  deltaDepositedAmount: BigInt!

  """Point in time delta BDV of deposits"""
  deltaDepositedBDV: BigInt!

  """Point in time delta internal (farm) balance of the asset"""
  deltaFarmAmount: BigInt!

  """Point in time delta Token amount of silo withdrawals"""
  deltaWithdrawnAmount: BigInt!

  """Point in time current Token amount of deposits"""
  depositedAmount: BigInt!

  """Point in time current BDV of deposits"""
  depositedBDV: BigInt!

  """Point in time current internal (farm) balance of the asset"""
  farmAmount: BigInt!

  """Silo Asset ID - Unix Timestamp"""
  id: ID!

  """Season for the snapshot"""
  season: Int!

  """Silo asset associated with this snapshot"""
  siloAsset: SiloAsset!

  """Timestamp of last entity update"""
  updatedAt: BigInt!

  """Point in time current Token amount of silo withdrawals"""
  withdrawnAmount: BigInt!
}

input SiloAssetHourlySnapshot_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SiloAssetHourlySnapshot_filter]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  deltaDepositedAmount: BigInt
  deltaDepositedAmount_gt: BigInt
  deltaDepositedAmount_gte: BigInt
  deltaDepositedAmount_in: [BigInt!]
  deltaDepositedAmount_lt: BigInt
  deltaDepositedAmount_lte: BigInt
  deltaDepositedAmount_not: BigInt
  deltaDepositedAmount_not_in: [BigInt!]
  deltaDepositedBDV: BigInt
  deltaDepositedBDV_gt: BigInt
  deltaDepositedBDV_gte: BigInt
  deltaDepositedBDV_in: [BigInt!]
  deltaDepositedBDV_lt: BigInt
  deltaDepositedBDV_lte: BigInt
  deltaDepositedBDV_not: BigInt
  deltaDepositedBDV_not_in: [BigInt!]
  deltaFarmAmount: BigInt
  deltaFarmAmount_gt: BigInt
  deltaFarmAmount_gte: BigInt
  deltaFarmAmount_in: [BigInt!]
  deltaFarmAmount_lt: BigInt
  deltaFarmAmount_lte: BigInt
  deltaFarmAmount_not: BigInt
  deltaFarmAmount_not_in: [BigInt!]
  deltaWithdrawnAmount: BigInt
  deltaWithdrawnAmount_gt: BigInt
  deltaWithdrawnAmount_gte: BigInt
  deltaWithdrawnAmount_in: [BigInt!]
  deltaWithdrawnAmount_lt: BigInt
  deltaWithdrawnAmount_lte: BigInt
  deltaWithdrawnAmount_not: BigInt
  deltaWithdrawnAmount_not_in: [BigInt!]
  depositedAmount: BigInt
  depositedAmount_gt: BigInt
  depositedAmount_gte: BigInt
  depositedAmount_in: [BigInt!]
  depositedAmount_lt: BigInt
  depositedAmount_lte: BigInt
  depositedAmount_not: BigInt
  depositedAmount_not_in: [BigInt!]
  depositedBDV: BigInt
  depositedBDV_gt: BigInt
  depositedBDV_gte: BigInt
  depositedBDV_in: [BigInt!]
  depositedBDV_lt: BigInt
  depositedBDV_lte: BigInt
  depositedBDV_not: BigInt
  depositedBDV_not_in: [BigInt!]
  farmAmount: BigInt
  farmAmount_gt: BigInt
  farmAmount_gte: BigInt
  farmAmount_in: [BigInt!]
  farmAmount_lt: BigInt
  farmAmount_lte: BigInt
  farmAmount_not: BigInt
  farmAmount_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [SiloAssetHourlySnapshot_filter]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  siloAsset: String
  siloAsset_: SiloAsset_filter
  siloAsset_contains: String
  siloAsset_contains_nocase: String
  siloAsset_ends_with: String
  siloAsset_ends_with_nocase: String
  siloAsset_gt: String
  siloAsset_gte: String
  siloAsset_in: [String!]
  siloAsset_lt: String
  siloAsset_lte: String
  siloAsset_not: String
  siloAsset_not_contains: String
  siloAsset_not_contains_nocase: String
  siloAsset_not_ends_with: String
  siloAsset_not_ends_with_nocase: String
  siloAsset_not_in: [String!]
  siloAsset_not_starts_with: String
  siloAsset_not_starts_with_nocase: String
  siloAsset_starts_with: String
  siloAsset_starts_with_nocase: String
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
  withdrawnAmount: BigInt
  withdrawnAmount_gt: BigInt
  withdrawnAmount_gte: BigInt
  withdrawnAmount_in: [BigInt!]
  withdrawnAmount_lt: BigInt
  withdrawnAmount_lte: BigInt
  withdrawnAmount_not: BigInt
  withdrawnAmount_not_in: [BigInt!]
}

enum SiloAssetHourlySnapshot_orderBy {
  createdAt
  deltaDepositedAmount
  deltaDepositedBDV
  deltaFarmAmount
  deltaWithdrawnAmount
  depositedAmount
  depositedBDV
  farmAmount
  id
  season
  siloAsset
  siloAsset__depositedAmount
  siloAsset__depositedBDV
  siloAsset__farmAmount
  siloAsset__id
  siloAsset__token
  siloAsset__withdrawnAmount
  updatedAt
  withdrawnAmount
}

input SiloAsset_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SiloAsset_filter]
  dailySnapshots_: SiloAssetDailySnapshot_filter
  depositedAmount: BigInt
  depositedAmount_gt: BigInt
  depositedAmount_gte: BigInt
  depositedAmount_in: [BigInt!]
  depositedAmount_lt: BigInt
  depositedAmount_lte: BigInt
  depositedAmount_not: BigInt
  depositedAmount_not_in: [BigInt!]
  depositedBDV: BigInt
  depositedBDV_gt: BigInt
  depositedBDV_gte: BigInt
  depositedBDV_in: [BigInt!]
  depositedBDV_lt: BigInt
  depositedBDV_lte: BigInt
  depositedBDV_not: BigInt
  depositedBDV_not_in: [BigInt!]
  farmAmount: BigInt
  farmAmount_gt: BigInt
  farmAmount_gte: BigInt
  farmAmount_in: [BigInt!]
  farmAmount_lt: BigInt
  farmAmount_lte: BigInt
  farmAmount_not: BigInt
  farmAmount_not_in: [BigInt!]
  hourlySnapshots_: SiloAssetHourlySnapshot_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [SiloAsset_filter]
  silo: String
  silo_: Silo_filter
  silo_contains: String
  silo_contains_nocase: String
  silo_ends_with: String
  silo_ends_with_nocase: String
  silo_gt: String
  silo_gte: String
  silo_in: [String!]
  silo_lt: String
  silo_lte: String
  silo_not: String
  silo_not_contains: String
  silo_not_contains_nocase: String
  silo_not_ends_with: String
  silo_not_ends_with_nocase: String
  silo_not_in: [String!]
  silo_not_starts_with: String
  silo_not_starts_with_nocase: String
  silo_starts_with: String
  silo_starts_with_nocase: String
  token: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  withdrawnAmount: BigInt
  withdrawnAmount_gt: BigInt
  withdrawnAmount_gte: BigInt
  withdrawnAmount_in: [BigInt!]
  withdrawnAmount_lt: BigInt
  withdrawnAmount_lte: BigInt
  withdrawnAmount_not: BigInt
  withdrawnAmount_not_in: [BigInt!]
}

enum SiloAsset_orderBy {
  dailySnapshots
  depositedAmount
  depositedBDV
  farmAmount
  hourlySnapshots
  id
  silo
  silo__activeFarmers
  silo__beanMints
  silo__beanToMaxLpGpPerBdvRatio
  silo__depositedBDV
  silo__germinatingStalk
  silo__grownStalkPerSeason
  silo__id
  silo__plantableStalk
  silo__roots
  silo__seeds
  silo__stalk
  token
  withdrawnAmount
}

type SiloDailySnapshot {
  """Point in time current number of active farmers deposited in the silo"""
  activeFarmers: Int!

  """Point in time cumulative total for bean mints sent to the silo"""
  beanMints: BigInt!

  """[Seed Gauge] Current target ratio of Bean to LP deposits"""
  beanToMaxLpGpPerBdvRatio: BigInt

  """Timestamp of initial snapshot creation"""
  createdAt: BigInt!

  """Point in time delta number of active farmers deposited in the silo"""
  deltaActiveFarmers: Int!

  """Point in time delta total for bean mints sent to the silo"""
  deltaBeanMints: BigInt!

  """Point in time delta BDV of all deposited assets"""
  deltaDepositedBDV: BigInt!

  """Point in time germinating stalk balance"""
  deltaGerminatingStalk: BigInt!

  """
  Point in time current plantable stalk for bean seigniorage not yet claimed
  """
  deltaPlantableStalk: BigInt!

  """Point in time delta roots balance"""
  deltaRoots: BigInt!

  """Point in time delta seeds balance"""
  deltaSeeds: BigInt!

  """Point in time delta stalk balance"""
  deltaStalk: BigInt!

  """Point in time current BDV of all deposited assets"""
  depositedBDV: BigInt!

  """[Seed Gauge] Stalk that is currently Germinating"""
  germinatingStalk: BigInt!

  """Point in time grown stalk per season"""
  grownStalkPerSeason: BigInt!

  """ID of silo-Unix Hour Timestamp"""
  id: ID!

  """
  Point in time current plantable stalk for bean seigniorage not yet claimed
  """
  plantableStalk: BigInt!

  """Point in time current roots balance"""
  roots: BigInt!

  """Last season for the snapshot"""
  season: Int!

  """Point in time current seeds balance"""
  seeds: BigInt!

  """Silo associated with the snapshot"""
  silo: Silo!

  """Point in time current stalk balance"""
  stalk: BigInt!

  """Timestamp of last entity update"""
  updatedAt: BigInt!
}

input SiloDailySnapshot_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  activeFarmers: Int
  activeFarmers_gt: Int
  activeFarmers_gte: Int
  activeFarmers_in: [Int!]
  activeFarmers_lt: Int
  activeFarmers_lte: Int
  activeFarmers_not: Int
  activeFarmers_not_in: [Int!]
  and: [SiloDailySnapshot_filter]
  beanMints: BigInt
  beanMints_gt: BigInt
  beanMints_gte: BigInt
  beanMints_in: [BigInt!]
  beanMints_lt: BigInt
  beanMints_lte: BigInt
  beanMints_not: BigInt
  beanMints_not_in: [BigInt!]
  beanToMaxLpGpPerBdvRatio: BigInt
  beanToMaxLpGpPerBdvRatio_gt: BigInt
  beanToMaxLpGpPerBdvRatio_gte: BigInt
  beanToMaxLpGpPerBdvRatio_in: [BigInt!]
  beanToMaxLpGpPerBdvRatio_lt: BigInt
  beanToMaxLpGpPerBdvRatio_lte: BigInt
  beanToMaxLpGpPerBdvRatio_not: BigInt
  beanToMaxLpGpPerBdvRatio_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  deltaActiveFarmers: Int
  deltaActiveFarmers_gt: Int
  deltaActiveFarmers_gte: Int
  deltaActiveFarmers_in: [Int!]
  deltaActiveFarmers_lt: Int
  deltaActiveFarmers_lte: Int
  deltaActiveFarmers_not: Int
  deltaActiveFarmers_not_in: [Int!]
  deltaBeanMints: BigInt
  deltaBeanMints_gt: BigInt
  deltaBeanMints_gte: BigInt
  deltaBeanMints_in: [BigInt!]
  deltaBeanMints_lt: BigInt
  deltaBeanMints_lte: BigInt
  deltaBeanMints_not: BigInt
  deltaBeanMints_not_in: [BigInt!]
  deltaDepositedBDV: BigInt
  deltaDepositedBDV_gt: BigInt
  deltaDepositedBDV_gte: BigInt
  deltaDepositedBDV_in: [BigInt!]
  deltaDepositedBDV_lt: BigInt
  deltaDepositedBDV_lte: BigInt
  deltaDepositedBDV_not: BigInt
  deltaDepositedBDV_not_in: [BigInt!]
  deltaGerminatingStalk: BigInt
  deltaGerminatingStalk_gt: BigInt
  deltaGerminatingStalk_gte: BigInt
  deltaGerminatingStalk_in: [BigInt!]
  deltaGerminatingStalk_lt: BigInt
  deltaGerminatingStalk_lte: BigInt
  deltaGerminatingStalk_not: BigInt
  deltaGerminatingStalk_not_in: [BigInt!]
  deltaPlantableStalk: BigInt
  deltaPlantableStalk_gt: BigInt
  deltaPlantableStalk_gte: BigInt
  deltaPlantableStalk_in: [BigInt!]
  deltaPlantableStalk_lt: BigInt
  deltaPlantableStalk_lte: BigInt
  deltaPlantableStalk_not: BigInt
  deltaPlantableStalk_not_in: [BigInt!]
  deltaRoots: BigInt
  deltaRoots_gt: BigInt
  deltaRoots_gte: BigInt
  deltaRoots_in: [BigInt!]
  deltaRoots_lt: BigInt
  deltaRoots_lte: BigInt
  deltaRoots_not: BigInt
  deltaRoots_not_in: [BigInt!]
  deltaSeeds: BigInt
  deltaSeeds_gt: BigInt
  deltaSeeds_gte: BigInt
  deltaSeeds_in: [BigInt!]
  deltaSeeds_lt: BigInt
  deltaSeeds_lte: BigInt
  deltaSeeds_not: BigInt
  deltaSeeds_not_in: [BigInt!]
  deltaStalk: BigInt
  deltaStalk_gt: BigInt
  deltaStalk_gte: BigInt
  deltaStalk_in: [BigInt!]
  deltaStalk_lt: BigInt
  deltaStalk_lte: BigInt
  deltaStalk_not: BigInt
  deltaStalk_not_in: [BigInt!]
  depositedBDV: BigInt
  depositedBDV_gt: BigInt
  depositedBDV_gte: BigInt
  depositedBDV_in: [BigInt!]
  depositedBDV_lt: BigInt
  depositedBDV_lte: BigInt
  depositedBDV_not: BigInt
  depositedBDV_not_in: [BigInt!]
  germinatingStalk: BigInt
  germinatingStalk_gt: BigInt
  germinatingStalk_gte: BigInt
  germinatingStalk_in: [BigInt!]
  germinatingStalk_lt: BigInt
  germinatingStalk_lte: BigInt
  germinatingStalk_not: BigInt
  germinatingStalk_not_in: [BigInt!]
  grownStalkPerSeason: BigInt
  grownStalkPerSeason_gt: BigInt
  grownStalkPerSeason_gte: BigInt
  grownStalkPerSeason_in: [BigInt!]
  grownStalkPerSeason_lt: BigInt
  grownStalkPerSeason_lte: BigInt
  grownStalkPerSeason_not: BigInt
  grownStalkPerSeason_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [SiloDailySnapshot_filter]
  plantableStalk: BigInt
  plantableStalk_gt: BigInt
  plantableStalk_gte: BigInt
  plantableStalk_in: [BigInt!]
  plantableStalk_lt: BigInt
  plantableStalk_lte: BigInt
  plantableStalk_not: BigInt
  plantableStalk_not_in: [BigInt!]
  roots: BigInt
  roots_gt: BigInt
  roots_gte: BigInt
  roots_in: [BigInt!]
  roots_lt: BigInt
  roots_lte: BigInt
  roots_not: BigInt
  roots_not_in: [BigInt!]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  seeds: BigInt
  seeds_gt: BigInt
  seeds_gte: BigInt
  seeds_in: [BigInt!]
  seeds_lt: BigInt
  seeds_lte: BigInt
  seeds_not: BigInt
  seeds_not_in: [BigInt!]
  silo: String
  silo_: Silo_filter
  silo_contains: String
  silo_contains_nocase: String
  silo_ends_with: String
  silo_ends_with_nocase: String
  silo_gt: String
  silo_gte: String
  silo_in: [String!]
  silo_lt: String
  silo_lte: String
  silo_not: String
  silo_not_contains: String
  silo_not_contains_nocase: String
  silo_not_ends_with: String
  silo_not_ends_with_nocase: String
  silo_not_in: [String!]
  silo_not_starts_with: String
  silo_not_starts_with_nocase: String
  silo_starts_with: String
  silo_starts_with_nocase: String
  stalk: BigInt
  stalk_gt: BigInt
  stalk_gte: BigInt
  stalk_in: [BigInt!]
  stalk_lt: BigInt
  stalk_lte: BigInt
  stalk_not: BigInt
  stalk_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum SiloDailySnapshot_orderBy {
  activeFarmers
  beanMints
  beanToMaxLpGpPerBdvRatio
  createdAt
  deltaActiveFarmers
  deltaBeanMints
  deltaDepositedBDV
  deltaGerminatingStalk
  deltaPlantableStalk
  deltaRoots
  deltaSeeds
  deltaStalk
  depositedBDV
  germinatingStalk
  grownStalkPerSeason
  id
  plantableStalk
  roots
  season
  seeds
  silo
  silo__activeFarmers
  silo__beanMints
  silo__beanToMaxLpGpPerBdvRatio
  silo__depositedBDV
  silo__germinatingStalk
  silo__grownStalkPerSeason
  silo__id
  silo__plantableStalk
  silo__roots
  silo__seeds
  silo__stalk
  stalk
  updatedAt
}

type SiloDeposit {
  """Current token amount deposited"""
  amount: BigInt!

  """Current BDV of the deposit"""
  bdv: BigInt!

  """Timestamp of first deposit"""
  createdAt: BigInt!

  """Original token amount deposited"""
  depositedAmount: BigInt!

  """Original deposited BDV"""
  depositedBDV: BigInt!

  """Farmer address"""
  farmer: Farmer!

  """Transaction hashes for multiple deposits in one season"""
  hashes: [String!]!

  "Pre Silo V3:\nAccount - Token Address - Season\n\nPost Silo-V3:\nAccount - Token Address - Stem\n"
  id: ID!

  """Season of deposit"""
  season: Int!

  """Stem of deposit - Introduced in Silo V3"""
  stem: BigInt

  """Token Address"""
  token: String!

  """Timestamp when last updated"""
  updatedAt: BigInt!

  """Token amount withdrawn"""
  withdrawnAmount: BigInt!

  """Withdrawn BDV"""
  withdrawnBDV: BigInt!
}

input SiloDeposit_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [SiloDeposit_filter]
  bdv: BigInt
  bdv_gt: BigInt
  bdv_gte: BigInt
  bdv_in: [BigInt!]
  bdv_lt: BigInt
  bdv_lte: BigInt
  bdv_not: BigInt
  bdv_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  depositedAmount: BigInt
  depositedAmount_gt: BigInt
  depositedAmount_gte: BigInt
  depositedAmount_in: [BigInt!]
  depositedAmount_lt: BigInt
  depositedAmount_lte: BigInt
  depositedAmount_not: BigInt
  depositedAmount_not_in: [BigInt!]
  depositedBDV: BigInt
  depositedBDV_gt: BigInt
  depositedBDV_gte: BigInt
  depositedBDV_in: [BigInt!]
  depositedBDV_lt: BigInt
  depositedBDV_lte: BigInt
  depositedBDV_not: BigInt
  depositedBDV_not_in: [BigInt!]
  farmer: String
  farmer_: Farmer_filter
  farmer_contains: String
  farmer_contains_nocase: String
  farmer_ends_with: String
  farmer_ends_with_nocase: String
  farmer_gt: String
  farmer_gte: String
  farmer_in: [String!]
  farmer_lt: String
  farmer_lte: String
  farmer_not: String
  farmer_not_contains: String
  farmer_not_contains_nocase: String
  farmer_not_ends_with: String
  farmer_not_ends_with_nocase: String
  farmer_not_in: [String!]
  farmer_not_starts_with: String
  farmer_not_starts_with_nocase: String
  farmer_starts_with: String
  farmer_starts_with_nocase: String
  hashes: [String!]
  hashes_contains: [String!]
  hashes_contains_nocase: [String!]
  hashes_not: [String!]
  hashes_not_contains: [String!]
  hashes_not_contains_nocase: [String!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [SiloDeposit_filter]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  stem: BigInt
  stem_gt: BigInt
  stem_gte: BigInt
  stem_in: [BigInt!]
  stem_lt: BigInt
  stem_lte: BigInt
  stem_not: BigInt
  stem_not_in: [BigInt!]
  token: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
  withdrawnAmount: BigInt
  withdrawnAmount_gt: BigInt
  withdrawnAmount_gte: BigInt
  withdrawnAmount_in: [BigInt!]
  withdrawnAmount_lt: BigInt
  withdrawnAmount_lte: BigInt
  withdrawnAmount_not: BigInt
  withdrawnAmount_not_in: [BigInt!]
  withdrawnBDV: BigInt
  withdrawnBDV_gt: BigInt
  withdrawnBDV_gte: BigInt
  withdrawnBDV_in: [BigInt!]
  withdrawnBDV_lt: BigInt
  withdrawnBDV_lte: BigInt
  withdrawnBDV_not: BigInt
  withdrawnBDV_not_in: [BigInt!]
}

enum SiloDeposit_orderBy {
  amount
  bdv
  createdAt
  depositedAmount
  depositedBDV
  farmer
  farmer__id
  hashes
  id
  season
  stem
  token
  updatedAt
  withdrawnAmount
  withdrawnBDV
}

"An event is any user action that occurs in a protocol. Generally, they are Ethereum events\nemitted by a function in the smart contracts, stored in transaction receipts as event logs.\nHowever, some user actions of interest are function calls that don't emit events. For example,\nthe deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still\nstore them as events, although they are not technically Ethereum events emitted by smart\ncontracts.\n"
interface SiloEvent {
  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """ { Event type }-{ Transaction hash }-{ Log index } """
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!
}

input SiloEvent_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SiloEvent_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [SiloEvent_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
}

enum SiloEvent_orderBy {
  blockNumber
  createdAt
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
}

type SiloHourlySnapshot {
  """Point in time current number of active farmers deposited in the silo"""
  activeFarmers: Int!

  """Point in time cumulative total for bean mints sent to the silo"""
  beanMints: BigInt!

  """[Seed Gauge] Current target ratio of Bean to LP deposits"""
  beanToMaxLpGpPerBdvRatio: BigInt

  """
  [Seed Gauge] The caseId used in the seasonal adjustment of beanToMaxLpGpPerBdvRatio
  """
  caseId: BigInt

  """Timestamp of initial snapshot creation"""
  createdAt: BigInt!

  """Point in time delta number of active farmers deposited in the silo"""
  deltaActiveFarmers: Int!

  """Point in time delta total for bean mints sent to the silo"""
  deltaBeanMints: BigInt!

  """Point in time delta BDV of all deposited assets"""
  deltaDepositedBDV: BigInt!

  """Point in time germinating stalk balance"""
  deltaGerminatingStalk: BigInt!

  """
  Point in time current plantable stalk for bean seigniorage not yet claimed
  """
  deltaPlantableStalk: BigInt!

  """Point in time delta roots balance"""
  deltaRoots: BigInt!

  """Point in time delta seeds balance"""
  deltaSeeds: BigInt!

  """Point in time delta stalk balance"""
  deltaStalk: BigInt!

  """Point in time current BDV of all deposited assets"""
  depositedBDV: BigInt!

  """[Seed Gauge] Stalk that is currently Germinating"""
  germinatingStalk: BigInt!

  """Point in time grown stalk per season"""
  grownStalkPerSeason: BigInt!

  """ID of silo-Unix Hour Timestamp"""
  id: ID!

  """
  Point in time current plantable stalk for bean seigniorage not yet claimed
  """
  plantableStalk: BigInt!

  """Point in time current roots balance"""
  roots: BigInt!

  """Season for the snapshot"""
  season: Int!

  """Point in time current seeds balance"""
  seeds: BigInt!

  """Silo associated with the snapshot"""
  silo: Silo!

  """Point in time current stalk balance"""
  stalk: BigInt!

  """Timestamp of last entity update"""
  updatedAt: BigInt!
}

input SiloHourlySnapshot_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  activeFarmers: Int
  activeFarmers_gt: Int
  activeFarmers_gte: Int
  activeFarmers_in: [Int!]
  activeFarmers_lt: Int
  activeFarmers_lte: Int
  activeFarmers_not: Int
  activeFarmers_not_in: [Int!]
  and: [SiloHourlySnapshot_filter]
  beanMints: BigInt
  beanMints_gt: BigInt
  beanMints_gte: BigInt
  beanMints_in: [BigInt!]
  beanMints_lt: BigInt
  beanMints_lte: BigInt
  beanMints_not: BigInt
  beanMints_not_in: [BigInt!]
  beanToMaxLpGpPerBdvRatio: BigInt
  beanToMaxLpGpPerBdvRatio_gt: BigInt
  beanToMaxLpGpPerBdvRatio_gte: BigInt
  beanToMaxLpGpPerBdvRatio_in: [BigInt!]
  beanToMaxLpGpPerBdvRatio_lt: BigInt
  beanToMaxLpGpPerBdvRatio_lte: BigInt
  beanToMaxLpGpPerBdvRatio_not: BigInt
  beanToMaxLpGpPerBdvRatio_not_in: [BigInt!]
  caseId: BigInt
  caseId_gt: BigInt
  caseId_gte: BigInt
  caseId_in: [BigInt!]
  caseId_lt: BigInt
  caseId_lte: BigInt
  caseId_not: BigInt
  caseId_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  deltaActiveFarmers: Int
  deltaActiveFarmers_gt: Int
  deltaActiveFarmers_gte: Int
  deltaActiveFarmers_in: [Int!]
  deltaActiveFarmers_lt: Int
  deltaActiveFarmers_lte: Int
  deltaActiveFarmers_not: Int
  deltaActiveFarmers_not_in: [Int!]
  deltaBeanMints: BigInt
  deltaBeanMints_gt: BigInt
  deltaBeanMints_gte: BigInt
  deltaBeanMints_in: [BigInt!]
  deltaBeanMints_lt: BigInt
  deltaBeanMints_lte: BigInt
  deltaBeanMints_not: BigInt
  deltaBeanMints_not_in: [BigInt!]
  deltaDepositedBDV: BigInt
  deltaDepositedBDV_gt: BigInt
  deltaDepositedBDV_gte: BigInt
  deltaDepositedBDV_in: [BigInt!]
  deltaDepositedBDV_lt: BigInt
  deltaDepositedBDV_lte: BigInt
  deltaDepositedBDV_not: BigInt
  deltaDepositedBDV_not_in: [BigInt!]
  deltaGerminatingStalk: BigInt
  deltaGerminatingStalk_gt: BigInt
  deltaGerminatingStalk_gte: BigInt
  deltaGerminatingStalk_in: [BigInt!]
  deltaGerminatingStalk_lt: BigInt
  deltaGerminatingStalk_lte: BigInt
  deltaGerminatingStalk_not: BigInt
  deltaGerminatingStalk_not_in: [BigInt!]
  deltaPlantableStalk: BigInt
  deltaPlantableStalk_gt: BigInt
  deltaPlantableStalk_gte: BigInt
  deltaPlantableStalk_in: [BigInt!]
  deltaPlantableStalk_lt: BigInt
  deltaPlantableStalk_lte: BigInt
  deltaPlantableStalk_not: BigInt
  deltaPlantableStalk_not_in: [BigInt!]
  deltaRoots: BigInt
  deltaRoots_gt: BigInt
  deltaRoots_gte: BigInt
  deltaRoots_in: [BigInt!]
  deltaRoots_lt: BigInt
  deltaRoots_lte: BigInt
  deltaRoots_not: BigInt
  deltaRoots_not_in: [BigInt!]
  deltaSeeds: BigInt
  deltaSeeds_gt: BigInt
  deltaSeeds_gte: BigInt
  deltaSeeds_in: [BigInt!]
  deltaSeeds_lt: BigInt
  deltaSeeds_lte: BigInt
  deltaSeeds_not: BigInt
  deltaSeeds_not_in: [BigInt!]
  deltaStalk: BigInt
  deltaStalk_gt: BigInt
  deltaStalk_gte: BigInt
  deltaStalk_in: [BigInt!]
  deltaStalk_lt: BigInt
  deltaStalk_lte: BigInt
  deltaStalk_not: BigInt
  deltaStalk_not_in: [BigInt!]
  depositedBDV: BigInt
  depositedBDV_gt: BigInt
  depositedBDV_gte: BigInt
  depositedBDV_in: [BigInt!]
  depositedBDV_lt: BigInt
  depositedBDV_lte: BigInt
  depositedBDV_not: BigInt
  depositedBDV_not_in: [BigInt!]
  germinatingStalk: BigInt
  germinatingStalk_gt: BigInt
  germinatingStalk_gte: BigInt
  germinatingStalk_in: [BigInt!]
  germinatingStalk_lt: BigInt
  germinatingStalk_lte: BigInt
  germinatingStalk_not: BigInt
  germinatingStalk_not_in: [BigInt!]
  grownStalkPerSeason: BigInt
  grownStalkPerSeason_gt: BigInt
  grownStalkPerSeason_gte: BigInt
  grownStalkPerSeason_in: [BigInt!]
  grownStalkPerSeason_lt: BigInt
  grownStalkPerSeason_lte: BigInt
  grownStalkPerSeason_not: BigInt
  grownStalkPerSeason_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [SiloHourlySnapshot_filter]
  plantableStalk: BigInt
  plantableStalk_gt: BigInt
  plantableStalk_gte: BigInt
  plantableStalk_in: [BigInt!]
  plantableStalk_lt: BigInt
  plantableStalk_lte: BigInt
  plantableStalk_not: BigInt
  plantableStalk_not_in: [BigInt!]
  roots: BigInt
  roots_gt: BigInt
  roots_gte: BigInt
  roots_in: [BigInt!]
  roots_lt: BigInt
  roots_lte: BigInt
  roots_not: BigInt
  roots_not_in: [BigInt!]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  seeds: BigInt
  seeds_gt: BigInt
  seeds_gte: BigInt
  seeds_in: [BigInt!]
  seeds_lt: BigInt
  seeds_lte: BigInt
  seeds_not: BigInt
  seeds_not_in: [BigInt!]
  silo: String
  silo_: Silo_filter
  silo_contains: String
  silo_contains_nocase: String
  silo_ends_with: String
  silo_ends_with_nocase: String
  silo_gt: String
  silo_gte: String
  silo_in: [String!]
  silo_lt: String
  silo_lte: String
  silo_not: String
  silo_not_contains: String
  silo_not_contains_nocase: String
  silo_not_ends_with: String
  silo_not_ends_with_nocase: String
  silo_not_in: [String!]
  silo_not_starts_with: String
  silo_not_starts_with_nocase: String
  silo_starts_with: String
  silo_starts_with_nocase: String
  stalk: BigInt
  stalk_gt: BigInt
  stalk_gte: BigInt
  stalk_in: [BigInt!]
  stalk_lt: BigInt
  stalk_lte: BigInt
  stalk_not: BigInt
  stalk_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum SiloHourlySnapshot_orderBy {
  activeFarmers
  beanMints
  beanToMaxLpGpPerBdvRatio
  caseId
  createdAt
  deltaActiveFarmers
  deltaBeanMints
  deltaDepositedBDV
  deltaGerminatingStalk
  deltaPlantableStalk
  deltaRoots
  deltaSeeds
  deltaStalk
  depositedBDV
  germinatingStalk
  grownStalkPerSeason
  id
  plantableStalk
  roots
  season
  seeds
  silo
  silo__activeFarmers
  silo__beanMints
  silo__beanToMaxLpGpPerBdvRatio
  silo__depositedBDV
  silo__germinatingStalk
  silo__grownStalkPerSeason
  silo__id
  silo__plantableStalk
  silo__roots
  silo__seeds
  silo__stalk
  stalk
  updatedAt
}

type SiloWithdraw {
  """Token amount withdrawn"""
  amount: BigInt!

  """Season when withdrawal can be claimed"""
  claimableSeason: Int!

  """Flag for if this has been claimed"""
  claimed: Boolean!

  """Timestamp created"""
  createdAt: BigInt!

  """Farmer address"""
  farmer: Farmer!

  """Transaction hash of withdrawal"""
  hashes: [String!]!

  """Account - Deposit Token - Current Season"""
  id: ID!

  """Token address"""
  token: String!

  """Season withdrawal initiated"""
  withdrawSeason: Int!
}

input SiloWithdraw_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [SiloWithdraw_filter]
  claimableSeason: Int
  claimableSeason_gt: Int
  claimableSeason_gte: Int
  claimableSeason_in: [Int!]
  claimableSeason_lt: Int
  claimableSeason_lte: Int
  claimableSeason_not: Int
  claimableSeason_not_in: [Int!]
  claimed: Boolean
  claimed_in: [Boolean!]
  claimed_not: Boolean
  claimed_not_in: [Boolean!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  farmer: String
  farmer_: Farmer_filter
  farmer_contains: String
  farmer_contains_nocase: String
  farmer_ends_with: String
  farmer_ends_with_nocase: String
  farmer_gt: String
  farmer_gte: String
  farmer_in: [String!]
  farmer_lt: String
  farmer_lte: String
  farmer_not: String
  farmer_not_contains: String
  farmer_not_contains_nocase: String
  farmer_not_ends_with: String
  farmer_not_ends_with_nocase: String
  farmer_not_in: [String!]
  farmer_not_starts_with: String
  farmer_not_starts_with_nocase: String
  farmer_starts_with: String
  farmer_starts_with_nocase: String
  hashes: [String!]
  hashes_contains: [String!]
  hashes_contains_nocase: [String!]
  hashes_not: [String!]
  hashes_not_contains: [String!]
  hashes_not_contains_nocase: [String!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [SiloWithdraw_filter]
  token: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  withdrawSeason: Int
  withdrawSeason_gt: Int
  withdrawSeason_gte: Int
  withdrawSeason_in: [Int!]
  withdrawSeason_lt: Int
  withdrawSeason_lte: Int
  withdrawSeason_not: Int
  withdrawSeason_not_in: [Int!]
}

enum SiloWithdraw_orderBy {
  amount
  claimableSeason
  claimed
  createdAt
  farmer
  farmer__id
  hashes
  id
  token
  withdrawSeason
}

type SiloYield {
  """Bean EMA for season"""
  beansPerSeasonEMA: BigDecimal!

  """Beta used for EMA"""
  beta: BigDecimal!

  """Unix timestamp of update"""
  createdAt: BigInt!

  """Season of data points - EMA window"""
  id: ID!

  """Sortable int field for season"""
  season: Int!

  """Current Bean (0) and Stalk (1) APY for each token."""
  tokenAPYS(first: Int = 100, orderBy: TokenYield_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: TokenYield_filter): [TokenYield!]!

  """u used for EMA"""
  u: Int!

  """Current whitelisted silo tokens"""
  whitelistedTokens: [String!]!

  """Window used for vAPY calc"""
  window: EmaWindow!
}

input SiloYield_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SiloYield_filter]
  beansPerSeasonEMA: BigDecimal
  beansPerSeasonEMA_gt: BigDecimal
  beansPerSeasonEMA_gte: BigDecimal
  beansPerSeasonEMA_in: [BigDecimal!]
  beansPerSeasonEMA_lt: BigDecimal
  beansPerSeasonEMA_lte: BigDecimal
  beansPerSeasonEMA_not: BigDecimal
  beansPerSeasonEMA_not_in: [BigDecimal!]
  beta: BigDecimal
  beta_gt: BigDecimal
  beta_gte: BigDecimal
  beta_in: [BigDecimal!]
  beta_lt: BigDecimal
  beta_lte: BigDecimal
  beta_not: BigDecimal
  beta_not_in: [BigDecimal!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [SiloYield_filter]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  tokenAPYS_: TokenYield_filter
  u: Int
  u_gt: Int
  u_gte: Int
  u_in: [Int!]
  u_lt: Int
  u_lte: Int
  u_not: Int
  u_not_in: [Int!]
  whitelistedTokens: [String!]
  whitelistedTokens_contains: [String!]
  whitelistedTokens_contains_nocase: [String!]
  whitelistedTokens_not: [String!]
  whitelistedTokens_not_contains: [String!]
  whitelistedTokens_not_contains_nocase: [String!]
  window: EmaWindow
  window_in: [EmaWindow!]
  window_not: EmaWindow
  window_not_in: [EmaWindow!]
}

enum SiloYield_orderBy {
  beansPerSeasonEMA
  beta
  createdAt
  id
  season
  tokenAPYS
  u
  whitelistedTokens
  window
}

input Silo_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  activeFarmers: Int
  activeFarmers_gt: Int
  activeFarmers_gte: Int
  activeFarmers_in: [Int!]
  activeFarmers_lt: Int
  activeFarmers_lte: Int
  activeFarmers_not: Int
  activeFarmers_not_in: [Int!]
  and: [Silo_filter]
  assets_: SiloAsset_filter
  beanMints: BigInt
  beanMints_gt: BigInt
  beanMints_gte: BigInt
  beanMints_in: [BigInt!]
  beanMints_lt: BigInt
  beanMints_lte: BigInt
  beanMints_not: BigInt
  beanMints_not_in: [BigInt!]
  beanToMaxLpGpPerBdvRatio: BigInt
  beanToMaxLpGpPerBdvRatio_gt: BigInt
  beanToMaxLpGpPerBdvRatio_gte: BigInt
  beanToMaxLpGpPerBdvRatio_in: [BigInt!]
  beanToMaxLpGpPerBdvRatio_lt: BigInt
  beanToMaxLpGpPerBdvRatio_lte: BigInt
  beanToMaxLpGpPerBdvRatio_not: BigInt
  beanToMaxLpGpPerBdvRatio_not_in: [BigInt!]
  beanstalk: String
  beanstalk_: Beanstalk_filter
  beanstalk_contains: String
  beanstalk_contains_nocase: String
  beanstalk_ends_with: String
  beanstalk_ends_with_nocase: String
  beanstalk_gt: String
  beanstalk_gte: String
  beanstalk_in: [String!]
  beanstalk_lt: String
  beanstalk_lte: String
  beanstalk_not: String
  beanstalk_not_contains: String
  beanstalk_not_contains_nocase: String
  beanstalk_not_ends_with: String
  beanstalk_not_ends_with_nocase: String
  beanstalk_not_in: [String!]
  beanstalk_not_starts_with: String
  beanstalk_not_starts_with_nocase: String
  beanstalk_starts_with: String
  beanstalk_starts_with_nocase: String
  dailySnapshots_: SiloDailySnapshot_filter
  depositedBDV: BigInt
  depositedBDV_gt: BigInt
  depositedBDV_gte: BigInt
  depositedBDV_in: [BigInt!]
  depositedBDV_lt: BigInt
  depositedBDV_lte: BigInt
  depositedBDV_not: BigInt
  depositedBDV_not_in: [BigInt!]
  dewhitelistedTokens: [String!]
  dewhitelistedTokens_contains: [String!]
  dewhitelistedTokens_contains_nocase: [String!]
  dewhitelistedTokens_not: [String!]
  dewhitelistedTokens_not_contains: [String!]
  dewhitelistedTokens_not_contains_nocase: [String!]
  farmer: String
  farmer_: Farmer_filter
  farmer_contains: String
  farmer_contains_nocase: String
  farmer_ends_with: String
  farmer_ends_with_nocase: String
  farmer_gt: String
  farmer_gte: String
  farmer_in: [String!]
  farmer_lt: String
  farmer_lte: String
  farmer_not: String
  farmer_not_contains: String
  farmer_not_contains_nocase: String
  farmer_not_ends_with: String
  farmer_not_ends_with_nocase: String
  farmer_not_in: [String!]
  farmer_not_starts_with: String
  farmer_not_starts_with_nocase: String
  farmer_starts_with: String
  farmer_starts_with_nocase: String
  germinatingStalk: BigInt
  germinatingStalk_gt: BigInt
  germinatingStalk_gte: BigInt
  germinatingStalk_in: [BigInt!]
  germinatingStalk_lt: BigInt
  germinatingStalk_lte: BigInt
  germinatingStalk_not: BigInt
  germinatingStalk_not_in: [BigInt!]
  grownStalkPerSeason: BigInt
  grownStalkPerSeason_gt: BigInt
  grownStalkPerSeason_gte: BigInt
  grownStalkPerSeason_in: [BigInt!]
  grownStalkPerSeason_lt: BigInt
  grownStalkPerSeason_lte: BigInt
  grownStalkPerSeason_not: BigInt
  grownStalkPerSeason_not_in: [BigInt!]
  hourlySnapshots_: SiloHourlySnapshot_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Silo_filter]
  plantableStalk: BigInt
  plantableStalk_gt: BigInt
  plantableStalk_gte: BigInt
  plantableStalk_in: [BigInt!]
  plantableStalk_lt: BigInt
  plantableStalk_lte: BigInt
  plantableStalk_not: BigInt
  plantableStalk_not_in: [BigInt!]
  roots: BigInt
  roots_gt: BigInt
  roots_gte: BigInt
  roots_in: [BigInt!]
  roots_lt: BigInt
  roots_lte: BigInt
  roots_not: BigInt
  roots_not_in: [BigInt!]
  seeds: BigInt
  seeds_gt: BigInt
  seeds_gte: BigInt
  seeds_in: [BigInt!]
  seeds_lt: BigInt
  seeds_lte: BigInt
  seeds_not: BigInt
  seeds_not_in: [BigInt!]
  stalk: BigInt
  stalk_gt: BigInt
  stalk_gte: BigInt
  stalk_in: [BigInt!]
  stalk_lt: BigInt
  stalk_lte: BigInt
  stalk_not: BigInt
  stalk_not_in: [BigInt!]
  whitelistedTokens: [String!]
  whitelistedTokens_contains: [String!]
  whitelistedTokens_contains_nocase: [String!]
  whitelistedTokens_not: [String!]
  whitelistedTokens_not_contains: [String!]
  whitelistedTokens_not_contains_nocase: [String!]
}

enum Silo_orderBy {
  activeFarmers
  assets
  beanMints
  beanToMaxLpGpPerBdvRatio
  beanstalk
  beanstalk__id
  beanstalk__lastSeason
  beanstalk__lastUpgrade
  beanstalk__methodologyVersion
  beanstalk__name
  beanstalk__schemaVersion
  beanstalk__slug
  beanstalk__subgraphVersion
  dailySnapshots
  depositedBDV
  dewhitelistedTokens
  farmer
  farmer__id
  germinatingStalk
  grownStalkPerSeason
  hourlySnapshots
  id
  plantableStalk
  roots
  seeds
  stalk
  whitelistedTokens
}

type StalkChange implements SiloEvent {
  """ Account removing deposit"""
  account: String!

  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Token removed"""
  delta: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """stalkChange-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """ Season when the change happened """
  season: Int!
}

input StalkChange_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  and: [StalkChange_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  delta: BigInt
  delta_gt: BigInt
  delta_gte: BigInt
  delta_in: [BigInt!]
  delta_lt: BigInt
  delta_lte: BigInt
  delta_not: BigInt
  delta_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [StalkChange_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
}

enum StalkChange_orderBy {
  account
  blockNumber
  createdAt
  delta
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  season
}

type Subscription {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  addDeposit(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AddDeposit
  addDeposits(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AddDeposit_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AddDeposit_filter
  ): [AddDeposit!]!
  beanstalk(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Beanstalk
  beanstalks(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Beanstalk_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Beanstalk_filter
  ): [Beanstalk!]!
  chop(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Chop
  chops(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Chop_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Chop_filter
  ): [Chop!]!
  dewhitelistToken(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DewhitelistToken
  dewhitelistTokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: DewhitelistToken_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: DewhitelistToken_filter
  ): [DewhitelistToken!]!
  farmer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Farmer
  farmers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Farmer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Farmer_filter
  ): [Farmer!]!
  fertilizer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Fertilizer
  fertilizerBalance(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FertilizerBalance
  fertilizerBalances(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FertilizerBalance_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FertilizerBalance_filter
  ): [FertilizerBalance!]!
  fertilizerToken(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FertilizerToken
  fertilizerTokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FertilizerToken_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FertilizerToken_filter
  ): [FertilizerToken!]!
  fertilizerYield(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FertilizerYield
  fertilizerYields(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FertilizerYield_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FertilizerYield_filter
  ): [FertilizerYield!]!
  fertilizers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Fertilizer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Fertilizer_filter
  ): [Fertilizer!]!
  field(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Field
  fieldDailySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FieldDailySnapshot
  fieldDailySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FieldDailySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FieldDailySnapshot_filter
  ): [FieldDailySnapshot!]!
  fieldEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FieldEvent
  fieldEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FieldEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FieldEvent_filter
  ): [FieldEvent!]!
  fieldHourlySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FieldHourlySnapshot
  fieldHourlySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FieldHourlySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FieldHourlySnapshot_filter
  ): [FieldHourlySnapshot!]!
  fields(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Field_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Field_filter
  ): [Field!]!
  germinating(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Germinating
  germinatings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Germinating_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Germinating_filter
  ): [Germinating!]!
  harvest(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Harvest
  harvests(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Harvest_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Harvest_filter
  ): [Harvest!]!
  incentive(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Incentive
  incentives(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Incentive_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Incentive_filter
  ): [Incentive!]!
  marketplaceEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketplaceEvent
  marketplaceEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: MarketplaceEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: MarketplaceEvent_filter
  ): [MarketplaceEvent!]!
  metapoolOracle(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetapoolOracle
  metapoolOracles(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: MetapoolOracle_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: MetapoolOracle_filter
  ): [MetapoolOracle!]!
  plot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Plot
  plots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Plot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Plot_filter
  ): [Plot!]!
  podFill(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodFill
  podFills(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodFill_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodFill_filter
  ): [PodFill!]!
  podListing(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodListing
  podListingCancelled(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodListingCancelled
  podListingCancelleds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodListingCancelled_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodListingCancelled_filter
  ): [PodListingCancelled!]!
  podListingCreated(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodListingCreated
  podListingCreateds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodListingCreated_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodListingCreated_filter
  ): [PodListingCreated!]!
  podListingFilled(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodListingFilled
  podListingFilleds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodListingFilled_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodListingFilled_filter
  ): [PodListingFilled!]!
  podListings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodListing_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodListing_filter
  ): [PodListing!]!
  podMarketplace(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodMarketplace
  podMarketplaceDailySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodMarketplaceDailySnapshot
  podMarketplaceDailySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodMarketplaceDailySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodMarketplaceDailySnapshot_filter
  ): [PodMarketplaceDailySnapshot!]!
  podMarketplaceHourlySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodMarketplaceHourlySnapshot
  podMarketplaceHourlySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodMarketplaceHourlySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodMarketplaceHourlySnapshot_filter
  ): [PodMarketplaceHourlySnapshot!]!
  podMarketplaces(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodMarketplace_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodMarketplace_filter
  ): [PodMarketplace!]!
  podOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodOrder
  podOrderCancelled(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodOrderCancelled
  podOrderCancelleds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodOrderCancelled_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodOrderCancelled_filter
  ): [PodOrderCancelled!]!
  podOrderCreated(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodOrderCreated
  podOrderCreateds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodOrderCreated_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodOrderCreated_filter
  ): [PodOrderCreated!]!
  podOrderFilled(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodOrderFilled
  podOrderFilleds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodOrderFilled_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodOrderFilled_filter
  ): [PodOrderFilled!]!
  podOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodOrder_filter
  ): [PodOrder!]!
  podTransfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PodTransfer
  podTransfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PodTransfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PodTransfer_filter
  ): [PodTransfer!]!
  removeDeposit(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RemoveDeposit
  removeDeposits(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RemoveDeposit_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RemoveDeposit_filter
  ): [RemoveDeposit!]!
  reward(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Reward
  rewards(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Reward_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Reward_filter
  ): [Reward!]!
  season(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Season
  seasons(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Season_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Season_filter
  ): [Season!]!
  seedChange(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SeedChange
  seedChanges(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SeedChange_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SeedChange_filter
  ): [SeedChange!]!
  silo(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Silo
  siloAsset(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloAsset
  siloAssetDailySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloAssetDailySnapshot
  siloAssetDailySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloAssetDailySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloAssetDailySnapshot_filter
  ): [SiloAssetDailySnapshot!]!
  siloAssetHourlySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloAssetHourlySnapshot
  siloAssetHourlySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloAssetHourlySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloAssetHourlySnapshot_filter
  ): [SiloAssetHourlySnapshot!]!
  siloAssets(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloAsset_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloAsset_filter
  ): [SiloAsset!]!
  siloDailySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloDailySnapshot
  siloDailySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloDailySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloDailySnapshot_filter
  ): [SiloDailySnapshot!]!
  siloDeposit(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloDeposit
  siloDeposits(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloDeposit_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloDeposit_filter
  ): [SiloDeposit!]!
  siloEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloEvent
  siloEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloEvent_filter
  ): [SiloEvent!]!
  siloHourlySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloHourlySnapshot
  siloHourlySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloHourlySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloHourlySnapshot_filter
  ): [SiloHourlySnapshot!]!
  siloWithdraw(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloWithdraw
  siloWithdraws(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloWithdraw_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloWithdraw_filter
  ): [SiloWithdraw!]!
  siloYield(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SiloYield
  siloYields(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SiloYield_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SiloYield_filter
  ): [SiloYield!]!
  silos(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Silo_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Silo_filter
  ): [Silo!]!
  stalkChange(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StalkChange
  stalkChanges(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: StalkChange_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: StalkChange_filter
  ): [StalkChange!]!
  tokenYield(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenYield
  tokenYields(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TokenYield_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TokenYield_filter
  ): [TokenYield!]!
  wellOracle(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WellOracle
  wellOracles(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WellOracle_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WellOracle_filter
  ): [WellOracle!]!
  whitelistToken(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WhitelistToken
  whitelistTokenDailySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WhitelistTokenDailySnapshot
  whitelistTokenDailySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WhitelistTokenDailySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WhitelistTokenDailySnapshot_filter
  ): [WhitelistTokenDailySnapshot!]!
  whitelistTokenHourlySnapshot(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WhitelistTokenHourlySnapshot
  whitelistTokenHourlySnapshots(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WhitelistTokenHourlySnapshot_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WhitelistTokenHourlySnapshot_filter
  ): [WhitelistTokenHourlySnapshot!]!
  whitelistTokenSetting(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WhitelistTokenSetting
  whitelistTokenSettings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WhitelistTokenSetting_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WhitelistTokenSetting_filter
  ): [WhitelistTokenSetting!]!
  whitelistTokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WhitelistToken_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WhitelistToken_filter
  ): [WhitelistToken!]!
}

type TokenYield {
  """Bean APY for season"""
  beanAPY: BigDecimal!

  """Unix timestamp of update"""
  createdAt: BigInt!

  """Token address - season - EMA window"""
  id: Bytes!

  """Season for APY calculation"""
  season: Int!

  """Related silo yield entity"""
  siloYield: SiloYield!

  """Stalk APY for season"""
  stalkAPY: BigDecimal!

  """Token being calculated"""
  token: Bytes!
}

input TokenYield_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenYield_filter]
  beanAPY: BigDecimal
  beanAPY_gt: BigDecimal
  beanAPY_gte: BigDecimal
  beanAPY_in: [BigDecimal!]
  beanAPY_lt: BigDecimal
  beanAPY_lte: BigDecimal
  beanAPY_not: BigDecimal
  beanAPY_not_in: [BigDecimal!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  or: [TokenYield_filter]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  siloYield: String
  siloYield_: SiloYield_filter
  siloYield_contains: String
  siloYield_contains_nocase: String
  siloYield_ends_with: String
  siloYield_ends_with_nocase: String
  siloYield_gt: String
  siloYield_gte: String
  siloYield_in: [String!]
  siloYield_lt: String
  siloYield_lte: String
  siloYield_not: String
  siloYield_not_contains: String
  siloYield_not_contains_nocase: String
  siloYield_not_ends_with: String
  siloYield_not_ends_with_nocase: String
  siloYield_not_in: [String!]
  siloYield_not_starts_with: String
  siloYield_not_starts_with_nocase: String
  siloYield_starts_with: String
  siloYield_starts_with_nocase: String
  stalkAPY: BigDecimal
  stalkAPY_gt: BigDecimal
  stalkAPY_gte: BigDecimal
  stalkAPY_in: [BigDecimal!]
  stalkAPY_lt: BigDecimal
  stalkAPY_lte: BigDecimal
  stalkAPY_not: BigDecimal
  stalkAPY_not_in: [BigDecimal!]
  token: Bytes
  token_contains: Bytes
  token_gt: Bytes
  token_gte: Bytes
  token_in: [Bytes!]
  token_lt: Bytes
  token_lte: Bytes
  token_not: Bytes
  token_not_contains: Bytes
  token_not_in: [Bytes!]
}

enum TokenYield_orderBy {
  beanAPY
  createdAt
  id
  season
  siloYield
  siloYield__beansPerSeasonEMA
  siloYield__beta
  siloYield__createdAt
  siloYield__id
  siloYield__season
  siloYield__u
  siloYield__window
  stalkAPY
  token
}

type WellOracle implements SiloEvent {
  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Time weighted cumulative reserves """
  cumulativeReserves: Bytes!

  """ DeltaB for season"""
  deltaB: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """wellOracle-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """ Season of oracle """
  season: Int!
}

input WellOracle_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WellOracle_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  cumulativeReserves: Bytes
  cumulativeReserves_contains: Bytes
  cumulativeReserves_gt: Bytes
  cumulativeReserves_gte: Bytes
  cumulativeReserves_in: [Bytes!]
  cumulativeReserves_lt: Bytes
  cumulativeReserves_lte: Bytes
  cumulativeReserves_not: Bytes
  cumulativeReserves_not_contains: Bytes
  cumulativeReserves_not_in: [Bytes!]
  deltaB: BigInt
  deltaB_gt: BigInt
  deltaB_gte: BigInt
  deltaB_in: [BigInt!]
  deltaB_lt: BigInt
  deltaB_lte: BigInt
  deltaB_not: BigInt
  deltaB_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [WellOracle_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
}

enum WellOracle_orderBy {
  blockNumber
  createdAt
  cumulativeReserves
  deltaB
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  season
}

type WhitelistToken implements SiloEvent {
  """ Block number of this event """
  blockNumber: BigInt!

  """ Timestamp of this event """
  createdAt: BigInt!

  """ Transaction hash of the transaction that emitted this event """
  hash: String!

  """whitelistToken-{ Transaction hash }-{ Log index }"""
  id: ID!

  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!

  """ The protocol this transaction belongs to """
  protocol: Beanstalk!

  """Seeds per BDV"""
  seeds: BigInt

  """Selector for token"""
  selector: String

  """Stalk per BDV"""
  stalk: BigInt

  """Stalk earned per season"""
  stalkPerSeason: BigInt

  """Token address whitelisted"""
  token: String!
}

type WhitelistTokenDailySnapshot {
  """Timestamp of initial snapshot creation"""
  createdAt: BigInt!

  """[Seed Gauge] Current Gauge Points"""
  gaugePoints: BigInt

  """[Seed Gauge] Encoded Gauge Point selector"""
  gpSelector: Bytes

  """Token address - Unix Timestamp"""
  id: ID!

  """[Seed Gauge] Encoded Liquidity Weight selector"""
  lwSelector: Bytes

  """
  The last season in which the stalkEarnedPerSeason for this token was updated.
  """
  milestoneSeason: Int!

  """
  [Seed Gauge] The current optimal targeted distribution of BDV for this whitelisted asset
  """
  optimalPercentDepositedBdv: BigInt

  """Encoded BDV selector"""
  selector: Bytes!

  """
  Represents how much Stalk one BDV of the underlying deposited token grows each season.
  """
  stalkEarnedPerSeason: BigInt!

  """
  The stalk per BDV that the silo grants in exchange for depositing this token.
  """
  stalkIssuedPerBdv: BigInt!

  """WhitelistTokenSetting associated with this snapshot"""
  token: WhitelistTokenSetting!

  """Timestamp of last entity update"""
  updatedAt: BigInt!
}

input WhitelistTokenDailySnapshot_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WhitelistTokenDailySnapshot_filter]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  gaugePoints: BigInt
  gaugePoints_gt: BigInt
  gaugePoints_gte: BigInt
  gaugePoints_in: [BigInt!]
  gaugePoints_lt: BigInt
  gaugePoints_lte: BigInt
  gaugePoints_not: BigInt
  gaugePoints_not_in: [BigInt!]
  gpSelector: Bytes
  gpSelector_contains: Bytes
  gpSelector_gt: Bytes
  gpSelector_gte: Bytes
  gpSelector_in: [Bytes!]
  gpSelector_lt: Bytes
  gpSelector_lte: Bytes
  gpSelector_not: Bytes
  gpSelector_not_contains: Bytes
  gpSelector_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lwSelector: Bytes
  lwSelector_contains: Bytes
  lwSelector_gt: Bytes
  lwSelector_gte: Bytes
  lwSelector_in: [Bytes!]
  lwSelector_lt: Bytes
  lwSelector_lte: Bytes
  lwSelector_not: Bytes
  lwSelector_not_contains: Bytes
  lwSelector_not_in: [Bytes!]
  milestoneSeason: Int
  milestoneSeason_gt: Int
  milestoneSeason_gte: Int
  milestoneSeason_in: [Int!]
  milestoneSeason_lt: Int
  milestoneSeason_lte: Int
  milestoneSeason_not: Int
  milestoneSeason_not_in: [Int!]
  optimalPercentDepositedBdv: BigInt
  optimalPercentDepositedBdv_gt: BigInt
  optimalPercentDepositedBdv_gte: BigInt
  optimalPercentDepositedBdv_in: [BigInt!]
  optimalPercentDepositedBdv_lt: BigInt
  optimalPercentDepositedBdv_lte: BigInt
  optimalPercentDepositedBdv_not: BigInt
  optimalPercentDepositedBdv_not_in: [BigInt!]
  or: [WhitelistTokenDailySnapshot_filter]
  selector: Bytes
  selector_contains: Bytes
  selector_gt: Bytes
  selector_gte: Bytes
  selector_in: [Bytes!]
  selector_lt: Bytes
  selector_lte: Bytes
  selector_not: Bytes
  selector_not_contains: Bytes
  selector_not_in: [Bytes!]
  stalkEarnedPerSeason: BigInt
  stalkEarnedPerSeason_gt: BigInt
  stalkEarnedPerSeason_gte: BigInt
  stalkEarnedPerSeason_in: [BigInt!]
  stalkEarnedPerSeason_lt: BigInt
  stalkEarnedPerSeason_lte: BigInt
  stalkEarnedPerSeason_not: BigInt
  stalkEarnedPerSeason_not_in: [BigInt!]
  stalkIssuedPerBdv: BigInt
  stalkIssuedPerBdv_gt: BigInt
  stalkIssuedPerBdv_gte: BigInt
  stalkIssuedPerBdv_in: [BigInt!]
  stalkIssuedPerBdv_lt: BigInt
  stalkIssuedPerBdv_lte: BigInt
  stalkIssuedPerBdv_not: BigInt
  stalkIssuedPerBdv_not_in: [BigInt!]
  token: String
  token_: WhitelistTokenSetting_filter
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum WhitelistTokenDailySnapshot_orderBy {
  createdAt
  gaugePoints
  gpSelector
  id
  lwSelector
  milestoneSeason
  optimalPercentDepositedBdv
  selector
  stalkEarnedPerSeason
  stalkIssuedPerBdv
  token
  token__gaugePoints
  token__gpSelector
  token__id
  token__lwSelector
  token__milestoneSeason
  token__optimalPercentDepositedBdv
  token__selector
  token__stalkEarnedPerSeason
  token__stalkIssuedPerBdv
  token__updatedAt
  updatedAt
}

type WhitelistTokenHourlySnapshot {
  """Timestamp of initial snapshot creation"""
  createdAt: BigInt!

  """[Seed Gauge] Current Gauge Points"""
  gaugePoints: BigInt

  """[Seed Gauge] Encoded Gauge Point selector"""
  gpSelector: Bytes

  """Token address - Season"""
  id: ID!

  """[Seed Gauge] Encoded Liquidity Weight selector"""
  lwSelector: Bytes

  """
  The last season in which the stalkEarnedPerSeason for this token was updated.
  """
  milestoneSeason: Int!

  """
  [Seed Gauge] The current optimal targeted distribution of BDV for this whitelisted asset
  """
  optimalPercentDepositedBdv: BigInt

  """The season for this snapshot"""
  season: Int!

  """Encoded BDV selector"""
  selector: Bytes!

  """
  Represents how much Stalk one BDV of the underlying deposited token grows each season.
  """
  stalkEarnedPerSeason: BigInt!

  """
  The stalk per BDV that the silo grants in exchange for depositing this token.
  """
  stalkIssuedPerBdv: BigInt!

  """WhitelistTokenSetting associated with this snapshot"""
  token: WhitelistTokenSetting!

  """Timestamp of last entity update"""
  updatedAt: BigInt!
}

input WhitelistTokenHourlySnapshot_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WhitelistTokenHourlySnapshot_filter]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  gaugePoints: BigInt
  gaugePoints_gt: BigInt
  gaugePoints_gte: BigInt
  gaugePoints_in: [BigInt!]
  gaugePoints_lt: BigInt
  gaugePoints_lte: BigInt
  gaugePoints_not: BigInt
  gaugePoints_not_in: [BigInt!]
  gpSelector: Bytes
  gpSelector_contains: Bytes
  gpSelector_gt: Bytes
  gpSelector_gte: Bytes
  gpSelector_in: [Bytes!]
  gpSelector_lt: Bytes
  gpSelector_lte: Bytes
  gpSelector_not: Bytes
  gpSelector_not_contains: Bytes
  gpSelector_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lwSelector: Bytes
  lwSelector_contains: Bytes
  lwSelector_gt: Bytes
  lwSelector_gte: Bytes
  lwSelector_in: [Bytes!]
  lwSelector_lt: Bytes
  lwSelector_lte: Bytes
  lwSelector_not: Bytes
  lwSelector_not_contains: Bytes
  lwSelector_not_in: [Bytes!]
  milestoneSeason: Int
  milestoneSeason_gt: Int
  milestoneSeason_gte: Int
  milestoneSeason_in: [Int!]
  milestoneSeason_lt: Int
  milestoneSeason_lte: Int
  milestoneSeason_not: Int
  milestoneSeason_not_in: [Int!]
  optimalPercentDepositedBdv: BigInt
  optimalPercentDepositedBdv_gt: BigInt
  optimalPercentDepositedBdv_gte: BigInt
  optimalPercentDepositedBdv_in: [BigInt!]
  optimalPercentDepositedBdv_lt: BigInt
  optimalPercentDepositedBdv_lte: BigInt
  optimalPercentDepositedBdv_not: BigInt
  optimalPercentDepositedBdv_not_in: [BigInt!]
  or: [WhitelistTokenHourlySnapshot_filter]
  season: Int
  season_gt: Int
  season_gte: Int
  season_in: [Int!]
  season_lt: Int
  season_lte: Int
  season_not: Int
  season_not_in: [Int!]
  selector: Bytes
  selector_contains: Bytes
  selector_gt: Bytes
  selector_gte: Bytes
  selector_in: [Bytes!]
  selector_lt: Bytes
  selector_lte: Bytes
  selector_not: Bytes
  selector_not_contains: Bytes
  selector_not_in: [Bytes!]
  stalkEarnedPerSeason: BigInt
  stalkEarnedPerSeason_gt: BigInt
  stalkEarnedPerSeason_gte: BigInt
  stalkEarnedPerSeason_in: [BigInt!]
  stalkEarnedPerSeason_lt: BigInt
  stalkEarnedPerSeason_lte: BigInt
  stalkEarnedPerSeason_not: BigInt
  stalkEarnedPerSeason_not_in: [BigInt!]
  stalkIssuedPerBdv: BigInt
  stalkIssuedPerBdv_gt: BigInt
  stalkIssuedPerBdv_gte: BigInt
  stalkIssuedPerBdv_in: [BigInt!]
  stalkIssuedPerBdv_lt: BigInt
  stalkIssuedPerBdv_lte: BigInt
  stalkIssuedPerBdv_not: BigInt
  stalkIssuedPerBdv_not_in: [BigInt!]
  token: String
  token_: WhitelistTokenSetting_filter
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum WhitelistTokenHourlySnapshot_orderBy {
  createdAt
  gaugePoints
  gpSelector
  id
  lwSelector
  milestoneSeason
  optimalPercentDepositedBdv
  season
  selector
  stalkEarnedPerSeason
  stalkIssuedPerBdv
  token
  token__gaugePoints
  token__gpSelector
  token__id
  token__lwSelector
  token__milestoneSeason
  token__optimalPercentDepositedBdv
  token__selector
  token__stalkEarnedPerSeason
  token__stalkIssuedPerBdv
  token__updatedAt
  updatedAt
}

type WhitelistTokenSetting {
  """Link to daily snapshot data"""
  dailySnapshots(first: Int = 100, orderBy: WhitelistTokenDailySnapshot_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: WhitelistTokenDailySnapshot_filter): [WhitelistTokenDailySnapshot!]!

  """[Seed Gauge] Current Gauge Points"""
  gaugePoints: BigInt

  """[Seed Gauge] Encoded Gauge Point selector"""
  gpSelector: Bytes

  """Link to hourly snapshot data"""
  hourlySnapshots(first: Int = 100, orderBy: WhitelistTokenHourlySnapshot_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: WhitelistTokenHourlySnapshot_filter): [WhitelistTokenHourlySnapshot!]!

  """Contract address for the whitelisted token"""
  id: Bytes!

  """[Seed Gauge] Encoded Liquidity Weight selector"""
  lwSelector: Bytes

  """
  The last season in which the stalkEarnedPerSeason for this token was updated.
  """
  milestoneSeason: Int!

  """
  [Seed Gauge] The current optimal targeted distribution of BDV for this whitelisted asset
  """
  optimalPercentDepositedBdv: BigInt

  """Encoded BDV selector"""
  selector: Bytes!

  """
  Represents how much Stalk one BDV of the underlying deposited token grows each season.
  """
  stalkEarnedPerSeason: BigInt!

  """
  The stalk per BDV that the silo grants in exchange for depositing this token.
  """
  stalkIssuedPerBdv: BigInt!

  """Last timestamp entity was updated"""
  updatedAt: BigInt!
}

input WhitelistTokenSetting_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WhitelistTokenSetting_filter]
  dailySnapshots_: WhitelistTokenDailySnapshot_filter
  gaugePoints: BigInt
  gaugePoints_gt: BigInt
  gaugePoints_gte: BigInt
  gaugePoints_in: [BigInt!]
  gaugePoints_lt: BigInt
  gaugePoints_lte: BigInt
  gaugePoints_not: BigInt
  gaugePoints_not_in: [BigInt!]
  gpSelector: Bytes
  gpSelector_contains: Bytes
  gpSelector_gt: Bytes
  gpSelector_gte: Bytes
  gpSelector_in: [Bytes!]
  gpSelector_lt: Bytes
  gpSelector_lte: Bytes
  gpSelector_not: Bytes
  gpSelector_not_contains: Bytes
  gpSelector_not_in: [Bytes!]
  hourlySnapshots_: WhitelistTokenHourlySnapshot_filter
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  lwSelector: Bytes
  lwSelector_contains: Bytes
  lwSelector_gt: Bytes
  lwSelector_gte: Bytes
  lwSelector_in: [Bytes!]
  lwSelector_lt: Bytes
  lwSelector_lte: Bytes
  lwSelector_not: Bytes
  lwSelector_not_contains: Bytes
  lwSelector_not_in: [Bytes!]
  milestoneSeason: Int
  milestoneSeason_gt: Int
  milestoneSeason_gte: Int
  milestoneSeason_in: [Int!]
  milestoneSeason_lt: Int
  milestoneSeason_lte: Int
  milestoneSeason_not: Int
  milestoneSeason_not_in: [Int!]
  optimalPercentDepositedBdv: BigInt
  optimalPercentDepositedBdv_gt: BigInt
  optimalPercentDepositedBdv_gte: BigInt
  optimalPercentDepositedBdv_in: [BigInt!]
  optimalPercentDepositedBdv_lt: BigInt
  optimalPercentDepositedBdv_lte: BigInt
  optimalPercentDepositedBdv_not: BigInt
  optimalPercentDepositedBdv_not_in: [BigInt!]
  or: [WhitelistTokenSetting_filter]
  selector: Bytes
  selector_contains: Bytes
  selector_gt: Bytes
  selector_gte: Bytes
  selector_in: [Bytes!]
  selector_lt: Bytes
  selector_lte: Bytes
  selector_not: Bytes
  selector_not_contains: Bytes
  selector_not_in: [Bytes!]
  stalkEarnedPerSeason: BigInt
  stalkEarnedPerSeason_gt: BigInt
  stalkEarnedPerSeason_gte: BigInt
  stalkEarnedPerSeason_in: [BigInt!]
  stalkEarnedPerSeason_lt: BigInt
  stalkEarnedPerSeason_lte: BigInt
  stalkEarnedPerSeason_not: BigInt
  stalkEarnedPerSeason_not_in: [BigInt!]
  stalkIssuedPerBdv: BigInt
  stalkIssuedPerBdv_gt: BigInt
  stalkIssuedPerBdv_gte: BigInt
  stalkIssuedPerBdv_in: [BigInt!]
  stalkIssuedPerBdv_lt: BigInt
  stalkIssuedPerBdv_lte: BigInt
  stalkIssuedPerBdv_not: BigInt
  stalkIssuedPerBdv_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum WhitelistTokenSetting_orderBy {
  dailySnapshots
  gaugePoints
  gpSelector
  hourlySnapshots
  id
  lwSelector
  milestoneSeason
  optimalPercentDepositedBdv
  selector
  stalkEarnedPerSeason
  stalkIssuedPerBdv
  updatedAt
}

input WhitelistToken_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WhitelistToken_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  hash: String
  hash_contains: String
  hash_contains_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_gt: String
  hash_gte: String
  hash_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_not: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  hash_not_in: [String!]
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  logIndex: Int
  logIndex_gt: Int
  logIndex_gte: Int
  logIndex_in: [Int!]
  logIndex_lt: Int
  logIndex_lte: Int
  logIndex_not: Int
  logIndex_not_in: [Int!]
  or: [WhitelistToken_filter]
  protocol: String
  protocol_: Beanstalk_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  seeds: BigInt
  seeds_gt: BigInt
  seeds_gte: BigInt
  seeds_in: [BigInt!]
  seeds_lt: BigInt
  seeds_lte: BigInt
  seeds_not: BigInt
  seeds_not_in: [BigInt!]
  selector: String
  selector_contains: String
  selector_contains_nocase: String
  selector_ends_with: String
  selector_ends_with_nocase: String
  selector_gt: String
  selector_gte: String
  selector_in: [String!]
  selector_lt: String
  selector_lte: String
  selector_not: String
  selector_not_contains: String
  selector_not_contains_nocase: String
  selector_not_ends_with: String
  selector_not_ends_with_nocase: String
  selector_not_in: [String!]
  selector_not_starts_with: String
  selector_not_starts_with_nocase: String
  selector_starts_with: String
  selector_starts_with_nocase: String
  stalk: BigInt
  stalkPerSeason: BigInt
  stalkPerSeason_gt: BigInt
  stalkPerSeason_gte: BigInt
  stalkPerSeason_in: [BigInt!]
  stalkPerSeason_lt: BigInt
  stalkPerSeason_lte: BigInt
  stalkPerSeason_not: BigInt
  stalkPerSeason_not_in: [BigInt!]
  stalk_gt: BigInt
  stalk_gte: BigInt
  stalk_in: [BigInt!]
  stalk_lt: BigInt
  stalk_lte: BigInt
  stalk_not: BigInt
  stalk_not_in: [BigInt!]
  token: String
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
}

enum WhitelistToken_orderBy {
  blockNumber
  createdAt
  hash
  id
  logIndex
  protocol
  protocol__id
  protocol__lastSeason
  protocol__lastUpgrade
  protocol__methodologyVersion
  protocol__name
  protocol__schemaVersion
  protocol__slug
  protocol__subgraphVersion
  seeds
  selector
  stalk
  stalkPerSeason
  token
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}