{"version":3,"file":"DecimalBigNumber.esm.js","sources":["../../src/utils/index.ts","../../src/lib/DecimalBigNumber.ts"],"sourcesContent":["export function assert(value: boolean, message?: string): asserts value;\n\nexport function assert<T>(value: T | null | undefined, message?: string): asserts value is T;\n\nexport function assert(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message || \"Assertion failed\");\n  }\n}\n","import { BigNumber } from \"ethers\";\nimport { formatUnits, parseUnits, commify } from \"ethers/lib/utils\";\nimport { assert } from \"src/utils\";\n\n// Class copied from sushiswap\n// https://github.com/sushiswap/mev-router-devkit/blob/6c94562561797fe11216e7e656828906d783ca79/src/DecimalBigNumber.ts\nexport class DecimalBigNumber {\n  private _decimals: number;\n  private _value: BigNumber;\n\n  /**\n   * Creates a new instance of `DecimalBigNumber`.\n   *\n   * @description This class expects and suggests that numbers be handled using `DecimalBigNumber`, instead of the inherently inaccurate\n   * use of `number` and `string` types.\n   *\n   * The constructor accepts the following as inputs to the number parameter:\n   * - `BigNumber` (from @ethersproject/bignumber): to easily shift from `BigNumber` used in smart contracts to `DecimalBigNumber`\n   * - `BigNumber` (from @beanstalk/sdk/BigNumber): a clone of @ethersproject/bignumber with some utilities used in @beanstalk/sdk\n   * - `string`: to take input from the user\n   *\n   * Given these design decisions, there are some recommended approaches:\n   * - Obtain user input with type text, instead of a number, in order to retain precision. e.g. `<input type=\"text\" />`\n   * - Where a `number` value is present, convert it to a `DecimalBigNumber` in the manner the developer deems appropriate.\n   *   This will most commonly be `new DecimalBigNumber((1000222000.2222).toString(), 4)`. While a convenience method could be offered,\n   *   it could lead to unexpected behaviour around precision.\n   *\n   * @param value the BigNumber or string used to initialize the object\n   * @param decimals the number of decimal places supported by the number. If `number` is a string, this parameter is optional.\n   * @returns a new, immutable instance of `DecimalBigNumber`\n   */\n  constructor(value: string, decimals?: number);\n  constructor(value: BigNumber, decimals: number);\n  constructor(value: BigNumber | BigNumber | string, decimals?: number) {\n    if (typeof value === \"string\") {\n      const _value = value.trim() === \"\" || isNaN(Number(value)) ? \"0\" : value;\n      const _decimals = decimals === undefined ? this._inferDecimalAmount(value) : this._ensurePositive(decimals);\n      const formatted = this._setDecimalAmount(_value, _decimals);\n\n      this._value = parseUnits(formatted, _decimals);\n      this._decimals = _decimals;\n\n      return;\n    }\n\n    assert(decimals !== undefined, \"Decimal cannot be undefined\");\n\n    this._value = value;\n    this._decimals = decimals;\n  }\n\n  public getDecimals(): number {\n    return this._decimals;\n  }\n\n  private _inferDecimalAmount(value: string): number {\n    const [, decimalStringOrUndefined] = value.split(\".\");\n\n    return decimalStringOrUndefined?.length || 0;\n  }\n\n  /**\n   * Sets a value to a specific decimal amount\n   *\n   * Trims unnecessary decimals\n   * Or pads decimals if needed\n   *\n   * @param value Input value as a string\n   * @param decimals Desired decimal amount\n   */\n  private _setDecimalAmount(value: string, decimals: number): string {\n    const [integer, _decimalsOrUndefined] = value.split(\".\");\n\n    const _decimals = _decimalsOrUndefined || \"\";\n\n    const paddingRequired = this._ensurePositive(decimals - _decimals.length);\n\n    return integer + \".\" + _decimals.substring(0, decimals) + \"0\".repeat(paddingRequired);\n  }\n\n  /**\n   * Ensures the desired decimal amount is positive\n   */\n  private _ensurePositive(decimals: number) {\n    return Math.max(0, decimals);\n  }\n\n  /**\n   * Converts this value to a BigNumber\n   *\n   * Often used when passing this value as\n   * an argument to a contract method\n   */\n  public toBigNumber(decimals?: number): BigNumber {\n    return decimals === undefined ? this._value : new DecimalBigNumber(this.toString(), decimals)._value;\n  }\n  /**\n   * Converts to a different decimal\n   */\n  public reDecimal(decimals: number): DecimalBigNumber {\n    return decimals === this._decimals ? this : new DecimalBigNumber(this.toString(), decimals);\n  }\n\n  /**\n   * Converts this value to a string\n   *\n   * By default, the string returned will:\n   * - Have the same decimal amount that it was initialized with\n   * - Have trailing zeroes removed\n   * - Not have thousands separators\n   *\n   * This ensures that the number string is accurate.\n   *\n   * To override any of these settings, add the `args` object as a parameter.\n   *\n   * @param args an object containing any of the properties: decimals, trim, format\n   * @returns a string version of the number\n   */\n  public toString({\n    decimals,\n    trim = true,\n    format = false\n  }: {\n    trim?: boolean;\n    format?: boolean;\n    decimals?: number;\n  } = {}): string {\n    let result = formatUnits(this._value, this._decimals);\n\n    // Add thousands separators\n    if (format) result = commify(result);\n\n    // We default to the number of decimal places specified\n    const _decimals = decimals === undefined ? this._decimals : this._ensurePositive(decimals);\n    result = this._setDecimalAmount(result, _decimals);\n\n    // We default to trimming trailing zeroes (and decimal points), unless there is an override\n    if (trim) result = result.replace(/(?:\\.|(\\..*?))\\.?0*$/, \"$1\");\n\n    return result;\n  }\n\n  /**\n   * @deprecated\n   * Please avoid using this method.\n   * If used for calculations: rather than converting this DecimalBigNumber\n   * \"down\" to a number, convert the other number \"up\" to a DecimalBigNumber.\n   *\n   * Used when performing approximate calculations with\n   * the number where precision __is not__ important.\n   *\n   * Ex: (new DecimalBigNumber(\"100\", 6)).toApproxNumber() => 100\n   */\n  public toApproxNumber(): number {\n    return parseFloat(this.toString());\n  }\n\n  /**\n   * Determines if the two values are equal\n   */\n  public eq(value: DecimalBigNumber | string): boolean {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    // Normalize decimals to the largest of the two values\n    const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n\n    // Normalize values to the correct decimal amount\n    const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n    const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n\n    return normalisedThis._value.eq(normalisedValue._value);\n  }\n\n  /**\n   * Subtracts this value by the value provided\n   */\n  public sub(value: DecimalBigNumber | string): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    // Normalize decimals to the largest of the two values\n    const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n\n    // Normalize values to the correct decimal amount\n    const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n    const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n\n    return new DecimalBigNumber(normalisedThis._value.sub(normalisedValue._value), largestDecimalAmount);\n  }\n\n  /**\n   * Sums this value and the value provided\n   */\n  public add(value: DecimalBigNumber | string): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    // Normalize decimals to the largest of the two values\n    const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n\n    // Normalize values to the correct decimal amount\n    const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n    const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n\n    return new DecimalBigNumber(normalisedThis._value.add(normalisedValue._value), largestDecimalAmount);\n  }\n\n  public isPositive(): boolean {\n    return this._value.gte(0);\n  }\n\n  /**\n   * Determines if this value is greater than the provided value\n   */\n  public gt(value: DecimalBigNumber | string): boolean {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    // Normalize decimals to the largest of the two values\n    const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n\n    // Normalize values to the correct decimal amount\n    const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n    const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n\n    return normalisedThis._value.gt(normalisedValue._value);\n  }\n\n  /**\n   * Determines if this value is greater than or equal to the provided value\n   */\n  public gte(value: DecimalBigNumber | string): boolean {\n    return this.gt(value) || this.eq(value);\n  }\n\n  /**\n   * Determines if this value is less than the provided value\n   */\n  public lt(value: DecimalBigNumber | string): boolean {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    // Normalize decimals to the largest of the two values\n    const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n\n    // Normalize values to the correct decimal amount\n    const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n    const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n\n    return normalisedThis._value.lt(normalisedValue._value);\n  }\n\n  /**\n   * Determines if this value is less than or equal to the provided value\n   */\n  public lte(value: DecimalBigNumber | string): boolean {\n    return this.lt(value) || this.eq(value);\n  }\n\n  /**\n   * Multiplies this value by the provided value\n   */\n  public mul(value: DecimalBigNumber | string): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    const product = this._value.mul(valueAsDBN._value);\n\n    // Multiplying two BigNumbers produces a product with a decimal\n    // amount equal to the sum of the decimal amounts of the two input numbers\n    return new DecimalBigNumber(product, this._decimals + valueAsDBN._decimals);\n  }\n\n  public mod(value: DecimalBigNumber | string): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    return new DecimalBigNumber(this._value.mod(valueAsDBN._value), this._decimals);\n  }\n\n  public mulMod(value: DecimalBigNumber | string, denominator: DecimalBigNumber | string): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n    const denominatorAsDBN = denominator instanceof DecimalBigNumber ? denominator : new DecimalBigNumber(denominator);\n\n    const result = this._value.mul(valueAsDBN._value).mod(denominatorAsDBN._value);\n    return new DecimalBigNumber(result, this._decimals);\n  }\n\n  public mulDiv(value: DecimalBigNumber | string, denominator: DecimalBigNumber | string, rounding?: \"up\" | \"down\"): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n    const denominatorAsDBN = denominator instanceof DecimalBigNumber ? denominator : new DecimalBigNumber(denominator);\n\n    let result = this._value.mul(valueAsDBN._value).div(denominatorAsDBN._value);\n    if (rounding === \"up\" && this.mulMod(value, denominator).gt(\"0\")) {\n      result = result.add(1);\n    }\n\n    return new DecimalBigNumber(result, this._decimals);\n  }\n\n  /**\n   * Divides this value by the provided value\n   *\n   * By default, this returns a value whose decimal amount is equal\n   * to the sum of the decimal amounts of the two values used.\n   * If this isn't enough, you can specify a desired\n   * decimal amount using the second function argument.\n   *\n   * @param decimals The expected decimal amount of the output value\n   */\n  public div(value: DecimalBigNumber | string, decimals?: number): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    const _decimals = decimals === undefined ? this._decimals + valueAsDBN._decimals : this._ensurePositive(decimals);\n\n    // When we divide two BigNumbers, the result will never\n    // include any decimal places because BigNumber only deals\n    // with whole integer values. Therefore, in order for us to\n    // include a specific decimal amount in our calculation, we need to\n    // normalize the decimal amount of the two numbers, such that the difference\n    // in their decimal amount is equal to the expected decimal amount\n    // of the result, before we do the calculation\n    //\n    // E.g:\n    // 22/5 = 4.4\n    //\n    // But ethers would return:\n    // 22/5 = 4 (no decimals)\n    //\n    // So before we calculate, we add n padding zeros to the\n    // numerator, where n is the expected decimal amount of the result:\n    // 220/5 = 44\n    //\n    // Normalized to the expected decimal amount of the result\n    // 4.4\n\n    const normalisedThis = new DecimalBigNumber(this.toString(), _decimals + valueAsDBN._decimals);\n\n    const quotient = normalisedThis._value.div(valueAsDBN._value);\n\n    // Return result with the expected output decimal amount\n    return new DecimalBigNumber(quotient, _decimals);\n  }\n\n  public abs(): DecimalBigNumber {\n    if (this._value.lt(0)) {\n      return new DecimalBigNumber(this._value.mul(\"-1\"), this._decimals);\n    } else {\n      return this;\n    }\n  }\n\n  //only works for positive exponents\n  public pow(n: number): DecimalBigNumber {\n    if (n == 0) return new DecimalBigNumber(\"1\");\n    else if (n == 1) return this;\n    else if (this.eq(\"0\") && n !== 0) return new DecimalBigNumber(\"0\");\n    else {\n      var z = new DecimalBigNumber(this._value, this._decimals);\n      //5300000\n      //28090000000000\n      //148877000000000000000\n      for (let i = 1; i < n; i++) {\n        z = z.mul(this);\n      }\n      return z;\n    }\n  }\n}\n"],"names":[],"mappings":"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"}