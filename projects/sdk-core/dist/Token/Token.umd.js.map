{"version":3,"file":"Token.umd.js","sources":["../../src/utils/index.ts","../../src/lib/DecimalBigNumber.ts","../../src/lib/TokenValue.ts","../../src/lib/token/Token.ts"],"sourcesContent":["export function assert(value: boolean, message?: string): asserts value;\n\nexport function assert<T>(value: T | null | undefined, message?: string): asserts value is T;\n\nexport function assert(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message || \"Assertion failed\");\n  }\n}\n","import { BigNumber } from \"ethers\";\nimport { formatUnits, parseUnits, commify } from \"ethers/lib/utils\";\nimport { assert } from \"src/utils\";\n\n// Class copied from sushiswap\n// https://github.com/sushiswap/mev-router-devkit/blob/6c94562561797fe11216e7e656828906d783ca79/src/DecimalBigNumber.ts\nexport class DecimalBigNumber {\n  private _decimals: number;\n  private _value: BigNumber;\n\n  /**\n   * Creates a new instance of `DecimalBigNumber`.\n   *\n   * @description This class expects and suggests that numbers be handled using `DecimalBigNumber`, instead of the inherently inaccurate\n   * use of `number` and `string` types.\n   *\n   * The constructor accepts the following as inputs to the number parameter:\n   * - `BigNumber` (from @ethersproject/bignumber): to easily shift from `BigNumber` used in smart contracts to `DecimalBigNumber`\n   * - `BigNumber` (from @beanstalk/sdk/BigNumber): a clone of @ethersproject/bignumber with some utilities used in @beanstalk/sdk\n   * - `string`: to take input from the user\n   *\n   * Given these design decisions, there are some recommended approaches:\n   * - Obtain user input with type text, instead of a number, in order to retain precision. e.g. `<input type=\"text\" />`\n   * - Where a `number` value is present, convert it to a `DecimalBigNumber` in the manner the developer deems appropriate.\n   *   This will most commonly be `new DecimalBigNumber((1000222000.2222).toString(), 4)`. While a convenience method could be offered,\n   *   it could lead to unexpected behaviour around precision.\n   *\n   * @param value the BigNumber or string used to initialize the object\n   * @param decimals the number of decimal places supported by the number. If `number` is a string, this parameter is optional.\n   * @returns a new, immutable instance of `DecimalBigNumber`\n   */\n  constructor(value: string, decimals?: number);\n  constructor(value: BigNumber, decimals: number);\n  constructor(value: BigNumber | BigNumber | string, decimals?: number) {\n    if (typeof value === \"string\") {\n      const _value = value.trim() === \"\" || isNaN(Number(value)) ? \"0\" : value;\n      const _decimals = decimals === undefined ? this._inferDecimalAmount(value) : this._ensurePositive(decimals);\n      const formatted = this._setDecimalAmount(_value, _decimals);\n\n      this._value = parseUnits(formatted, _decimals);\n      this._decimals = _decimals;\n\n      return;\n    }\n\n    assert(decimals !== undefined, \"Decimal cannot be undefined\");\n\n    this._value = value;\n    this._decimals = decimals;\n  }\n\n  public getDecimals(): number {\n    return this._decimals;\n  }\n\n  private _inferDecimalAmount(value: string): number {\n    const [, decimalStringOrUndefined] = value.split(\".\");\n\n    return decimalStringOrUndefined?.length || 0;\n  }\n\n  /**\n   * Sets a value to a specific decimal amount\n   *\n   * Trims unnecessary decimals\n   * Or pads decimals if needed\n   *\n   * @param value Input value as a string\n   * @param decimals Desired decimal amount\n   */\n  private _setDecimalAmount(value: string, decimals: number): string {\n    const [integer, _decimalsOrUndefined] = value.split(\".\");\n\n    const _decimals = _decimalsOrUndefined || \"\";\n\n    const paddingRequired = this._ensurePositive(decimals - _decimals.length);\n\n    return integer + \".\" + _decimals.substring(0, decimals) + \"0\".repeat(paddingRequired);\n  }\n\n  /**\n   * Ensures the desired decimal amount is positive\n   */\n  private _ensurePositive(decimals: number) {\n    return Math.max(0, decimals);\n  }\n\n  /**\n   * Converts this value to a BigNumber\n   *\n   * Often used when passing this value as\n   * an argument to a contract method\n   */\n  public toBigNumber(decimals?: number): BigNumber {\n    return decimals === undefined ? this._value : new DecimalBigNumber(this.toString(), decimals)._value;\n  }\n  /**\n   * Converts to a different decimal\n   */\n  public reDecimal(decimals: number): DecimalBigNumber {\n    return decimals === this._decimals ? this : new DecimalBigNumber(this.toString(), decimals);\n  }\n\n  /**\n   * Converts this value to a string\n   *\n   * By default, the string returned will:\n   * - Have the same decimal amount that it was initialized with\n   * - Have trailing zeroes removed\n   * - Not have thousands separators\n   *\n   * This ensures that the number string is accurate.\n   *\n   * To override any of these settings, add the `args` object as a parameter.\n   *\n   * @param args an object containing any of the properties: decimals, trim, format\n   * @returns a string version of the number\n   */\n  public toString({\n    decimals,\n    trim = true,\n    format = false\n  }: {\n    trim?: boolean;\n    format?: boolean;\n    decimals?: number;\n  } = {}): string {\n    let result = formatUnits(this._value, this._decimals);\n\n    // Add thousands separators\n    if (format) result = commify(result);\n\n    // We default to the number of decimal places specified\n    const _decimals = decimals === undefined ? this._decimals : this._ensurePositive(decimals);\n    result = this._setDecimalAmount(result, _decimals);\n\n    // We default to trimming trailing zeroes (and decimal points), unless there is an override\n    if (trim) result = result.replace(/(?:\\.|(\\..*?))\\.?0*$/, \"$1\");\n\n    return result;\n  }\n\n  /**\n   * @deprecated\n   * Please avoid using this method.\n   * If used for calculations: rather than converting this DecimalBigNumber\n   * \"down\" to a number, convert the other number \"up\" to a DecimalBigNumber.\n   *\n   * Used when performing approximate calculations with\n   * the number where precision __is not__ important.\n   *\n   * Ex: (new DecimalBigNumber(\"100\", 6)).toApproxNumber() => 100\n   */\n  public toApproxNumber(): number {\n    return parseFloat(this.toString());\n  }\n\n  /**\n   * Determines if the two values are equal\n   */\n  public eq(value: DecimalBigNumber | string): boolean {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    // Normalize decimals to the largest of the two values\n    const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n\n    // Normalize values to the correct decimal amount\n    const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n    const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n\n    return normalisedThis._value.eq(normalisedValue._value);\n  }\n\n  /**\n   * Subtracts this value by the value provided\n   */\n  public sub(value: DecimalBigNumber | string): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    // Normalize decimals to the largest of the two values\n    const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n\n    // Normalize values to the correct decimal amount\n    const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n    const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n\n    return new DecimalBigNumber(normalisedThis._value.sub(normalisedValue._value), largestDecimalAmount);\n  }\n\n  /**\n   * Sums this value and the value provided\n   */\n  public add(value: DecimalBigNumber | string): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    // Normalize decimals to the largest of the two values\n    const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n\n    // Normalize values to the correct decimal amount\n    const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n    const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n\n    return new DecimalBigNumber(normalisedThis._value.add(normalisedValue._value), largestDecimalAmount);\n  }\n\n  public isPositive(): boolean {\n    return this._value.gte(0);\n  }\n\n  /**\n   * Determines if this value is greater than the provided value\n   */\n  public gt(value: DecimalBigNumber | string): boolean {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    // Normalize decimals to the largest of the two values\n    const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n\n    // Normalize values to the correct decimal amount\n    const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n    const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n\n    return normalisedThis._value.gt(normalisedValue._value);\n  }\n\n  /**\n   * Determines if this value is greater than or equal to the provided value\n   */\n  public gte(value: DecimalBigNumber | string): boolean {\n    return this.gt(value) || this.eq(value);\n  }\n\n  /**\n   * Determines if this value is less than the provided value\n   */\n  public lt(value: DecimalBigNumber | string): boolean {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    // Normalize decimals to the largest of the two values\n    const largestDecimalAmount = Math.max(valueAsDBN._decimals, this._decimals);\n\n    // Normalize values to the correct decimal amount\n    const normalisedThis = new DecimalBigNumber(this.toString(), largestDecimalAmount);\n    const normalisedValue = new DecimalBigNumber(valueAsDBN.toString(), largestDecimalAmount);\n\n    return normalisedThis._value.lt(normalisedValue._value);\n  }\n\n  /**\n   * Determines if this value is less than or equal to the provided value\n   */\n  public lte(value: DecimalBigNumber | string): boolean {\n    return this.lt(value) || this.eq(value);\n  }\n\n  /**\n   * Multiplies this value by the provided value\n   */\n  public mul(value: DecimalBigNumber | string): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    const product = this._value.mul(valueAsDBN._value);\n\n    // Multiplying two BigNumbers produces a product with a decimal\n    // amount equal to the sum of the decimal amounts of the two input numbers\n    return new DecimalBigNumber(product, this._decimals + valueAsDBN._decimals);\n  }\n\n  public mod(value: DecimalBigNumber | string): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    return new DecimalBigNumber(this._value.mod(valueAsDBN._value), this._decimals);\n  }\n\n  public mulMod(value: DecimalBigNumber | string, denominator: DecimalBigNumber | string): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n    const denominatorAsDBN = denominator instanceof DecimalBigNumber ? denominator : new DecimalBigNumber(denominator);\n\n    const result = this._value.mul(valueAsDBN._value).mod(denominatorAsDBN._value);\n    return new DecimalBigNumber(result, this._decimals);\n  }\n\n  public mulDiv(value: DecimalBigNumber | string, denominator: DecimalBigNumber | string, rounding?: \"up\" | \"down\"): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n    const denominatorAsDBN = denominator instanceof DecimalBigNumber ? denominator : new DecimalBigNumber(denominator);\n\n    let result = this._value.mul(valueAsDBN._value).div(denominatorAsDBN._value);\n    if (rounding === \"up\" && this.mulMod(value, denominator).gt(\"0\")) {\n      result = result.add(1);\n    }\n\n    return new DecimalBigNumber(result, this._decimals);\n  }\n\n  /**\n   * Divides this value by the provided value\n   *\n   * By default, this returns a value whose decimal amount is equal\n   * to the sum of the decimal amounts of the two values used.\n   * If this isn't enough, you can specify a desired\n   * decimal amount using the second function argument.\n   *\n   * @param decimals The expected decimal amount of the output value\n   */\n  public div(value: DecimalBigNumber | string, decimals?: number): DecimalBigNumber {\n    const valueAsDBN = value instanceof DecimalBigNumber ? value : new DecimalBigNumber(value);\n\n    const _decimals = decimals === undefined ? this._decimals + valueAsDBN._decimals : this._ensurePositive(decimals);\n\n    // When we divide two BigNumbers, the result will never\n    // include any decimal places because BigNumber only deals\n    // with whole integer values. Therefore, in order for us to\n    // include a specific decimal amount in our calculation, we need to\n    // normalize the decimal amount of the two numbers, such that the difference\n    // in their decimal amount is equal to the expected decimal amount\n    // of the result, before we do the calculation\n    //\n    // E.g:\n    // 22/5 = 4.4\n    //\n    // But ethers would return:\n    // 22/5 = 4 (no decimals)\n    //\n    // So before we calculate, we add n padding zeros to the\n    // numerator, where n is the expected decimal amount of the result:\n    // 220/5 = 44\n    //\n    // Normalized to the expected decimal amount of the result\n    // 4.4\n\n    const normalisedThis = new DecimalBigNumber(this.toString(), _decimals + valueAsDBN._decimals);\n\n    const quotient = normalisedThis._value.div(valueAsDBN._value);\n\n    // Return result with the expected output decimal amount\n    return new DecimalBigNumber(quotient, _decimals);\n  }\n\n  public abs(): DecimalBigNumber {\n    if (this._value.lt(0)) {\n      return new DecimalBigNumber(this._value.mul(\"-1\"), this._decimals);\n    } else {\n      return this;\n    }\n  }\n\n  //only works for positive exponents\n  public pow(n: number): DecimalBigNumber {\n    if (n == 0) return new DecimalBigNumber(\"1\");\n    else if (n == 1) return this;\n    else if (this.eq(\"0\") && n !== 0) return new DecimalBigNumber(\"0\");\n    else {\n      var z = new DecimalBigNumber(this._value, this._decimals);\n      //5300000\n      //28090000000000\n      //148877000000000000000\n      for (let i = 1; i < n; i++) {\n        z = z.mul(this);\n      }\n      return z;\n    }\n  }\n}\n","import { BigNumber, utils, constants } from \"ethers\";\nimport { DecimalBigNumber } from \"src/lib/DecimalBigNumber\";\n\nconst blocker = {};\n\nexport class TokenValue {\n  static ZERO = TokenValue.fromHuman(0, 0);\n  static NEGATIVE_ONE = TokenValue.fromHuman(-1, 0);\n  static ONE = TokenValue.fromHuman(1, 0);\n  static MAX_UINT32 = TokenValue.fromHuman(4294967295, 0);\n  static MAX_UINT256 = TokenValue.fromBlockchain(constants.MaxUint256, 0);\n\n  public humanString: string;\n  public blockchainString: string;\n  public decimals: number;\n  public value: DecimalBigNumber;\n\n  /**\n   * Create a TokenValue from string, number, or BigNumber values that represent a **human** readable form.\n   * For example: \"3\" ETH, or \"4.5\" beans.\n   * If your value is a blockchain value, for ex 3e18 or 4500000, use `fromBlockchain()` method instead.\n   *\n   * Example: `fromHuman('3.14', 6)` means 3.14 BEAN tokens, and would be represented as 3140000 on the blockchain\n   *\n   * Warning: Even thought we support supplying the value as a BigNumber, make sure you really mean to use it here.\n   * If your input is a BigNumber, you most likely want to use `.fromBlockchain()`\n   *\n   * @param value The amount, as a human readable value, in string, number or BigNumber form.\n   * @param decimals The number of decimals this TokenValue should be stored with. For ex, 6 for BEAN or 18 for ETH\n   * @returns a TokenValue\n   */\n  static fromHuman(value: string | number | BigNumber, decimals: number): TokenValue {\n    if (typeof value === \"string\") return TokenValue.fromString(value, decimals);\n    if (typeof value === \"number\") return TokenValue.fromString(value.toString(), decimals);\n    if (value instanceof BigNumber) {\n      // TODO: are we ok with this warning? should we add ability to ignore it?\n      console.warn(\n        \"WARNING: calling TokenValue.fromHuman(BigNumber). This may have unexpected results. Are you sure you didn't mean TokenValue.fromBlockchain(BigNumber)?\"\n      );\n      return TokenValue.fromString(value.toString(), decimals);\n    }\n\n    throw new Error(\"Invalid value parameter\");\n  }\n\n  /**\n   * Create a TokenValue from string, number, or BigNumber values that represent a **blockhain** value.\n   * For example: 3e18 ETH, or 4500000 beans.\n   * If your value is a human readable value, for ex 5 ETH  or 3.14 BEAN, use `fromHuman()` method instead.\n   *\n   * Example: `fromBlockchain('3140000', 6)` means 3.14 BEAN tokens, and would be represented as 3140000 on the blockchain\n   * @param value The amount, as a human readable value, in string, number or BigNumber form.\n   * @param decimals The number of decimals this TokenValue should be stored with. For ex, 6 for BEAN or 18 for ETH\n   * @returns a TokenValue\n   */\n  static fromBlockchain(value: string | number | BigNumber, decimals: number): TokenValue {\n    if (typeof value === \"string\" || typeof value === \"number\") {\n      const units = utils.formatUnits(value, decimals);\n      return TokenValue.fromString(units, decimals);\n    }\n    if (value._isBigNumber) return TokenValue.fromBigNumber(value, decimals);\n\n    throw new Error(\"Invalid value parameter\");\n  }\n\n  /**\n   * Create a TokenValue from another decimal-supporting object: DecimalBigNumber or TokenValue.\n   *\n   * @param value The amount\n   * @returns a TokenValue\n   */\n  static from(value: DecimalBigNumber | TokenValue): TokenValue {\n    if (value instanceof DecimalBigNumber) {\n      return new TokenValue(blocker, value.toBigNumber(), value.getDecimals());\n    }\n\n    if (value instanceof TokenValue) return value;\n\n    throw new Error('Invalid \"value\" parameter');\n  }\n\n  private static fromBigNumber(value: BigNumber, decimals: number): TokenValue {\n    return new TokenValue(blocker, value, decimals);\n  }\n\n  private static fromString(value: string, decimals: number): TokenValue {\n    if (!value) {\n      throw new Error(\"Must provide value to BigNumber.fromHuman(value,decimals)\");\n    }\n    if (decimals == undefined || decimals == null) {\n      throw new Error(\"Must provide decimals to BigNumber.fromHuman(value,decimals)\");\n    }\n    let [int, safeDecimals] = value.split(\".\");\n\n    if (safeDecimals && safeDecimals.length > decimals) {\n      safeDecimals = safeDecimals.substring(0, decimals);\n    }\n\n    const safeValue = safeDecimals ? `${int}.${safeDecimals}` : int;\n    const result = utils.parseUnits(safeValue, decimals);\n\n    return TokenValue.fromBigNumber(result, decimals);\n  }\n\n  constructor(_blocker: typeof blocker, _bigNumber: BigNumber, decimals: number) {\n    if (_blocker !== blocker) throw new Error(\"Do not create an instance via the constructor. Use the .from...() methods\");\n\n    this.decimals = decimals;\n    this.value = new DecimalBigNumber(_bigNumber, decimals);\n    this.humanString = this.toHuman();\n    this.blockchainString = this.toBlockchain();\n\n    // make values immutable\n    Object.defineProperty(this, \"decimals\", { configurable: false, writable: false });\n    Object.defineProperty(this, \"value\", { configurable: false, writable: false });\n  }\n\n  ////// Utility Functions //////\n  toBigNumber(): BigNumber {\n    return this.value.toBigNumber();\n  }\n\n  toBlockchain(): string {\n    return this.value.toBigNumber().toString();\n  }\n\n  /**\n   * @deprecated\n   * Ambiguous function. This exists only as a safety, otherwise the .toString()\n   * call would go to Object.toString().\n   * @returns\n   */\n  toString(): string {\n    return this.toBlockchain();\n  }\n\n  toHex(): string {\n    return this.value.toBigNumber()._hex;\n  }\n\n  /**\n   * Returns a human readable string, for example \"3.14\"\n   * @returns string\n   */\n  public toHuman(): string {\n    return this.value.toString();\n  }\n\n  // Used mostly by the math functions to normalize the input\n  private toDBN(num: TokenValue | BigNumber | number): DecimalBigNumber {\n    if (num instanceof TokenValue) {\n      return TokenValue.from(num).value;\n    } else if (num instanceof BigNumber) {\n      return TokenValue.fromBlockchain(num, 0).value;\n    } else {\n      const decimals = num.toString().split(\".\")[1]?.length || 0;\n      return TokenValue.fromHuman(num, decimals).value;\n    }\n  }\n\n  /**\n   * Returns a new TokenValue with the number of decimals set to the new value\n   * @param decimals\n   */\n  public reDecimal(decimals: number) {\n    return TokenValue.from(this.value.reDecimal(decimals));\n  }\n\n  ////// Math Functions //////\n  add(num: TokenValue | BigNumber | number): TokenValue {\n    return TokenValue.from(this.value.add(this.toDBN(num)));\n  }\n  sub(num: TokenValue | BigNumber | number): TokenValue {\n    return TokenValue.from(this.value.sub(this.toDBN(num)));\n  }\n  mod(num: TokenValue | number) {\n    // num needs to have the same number of decimals as THIS\n    let n = this.toDBN(num).reDecimal(this.decimals);\n    return TokenValue.from(this.value.mod(n));\n  }\n  mul(num: TokenValue | number) {\n    return TokenValue.from(this.value.mul(this.toDBN(num)).reDecimal(this.decimals));\n  }\n  mulMod(num: TokenValue | number, denominator: TokenValue | number): TokenValue {\n    return TokenValue.from(this.value.mul(this.toDBN(num)).mod(this.toDBN(denominator).reDecimal(this.decimals)));\n  }\n  mulDiv(num: TokenValue | BigNumber | number, denominator: TokenValue | number, rounding?: \"down\" | \"up\") {\n    return TokenValue.from(this.value.mulDiv(this.toDBN(num), this.toDBN(denominator), rounding).reDecimal(this.decimals));\n  }\n  div(num: TokenValue | BigNumber | number, decimals?: number) {\n    return TokenValue.from(this.value.div(this.toDBN(num), decimals));\n  }\n  eq(num: TokenValue | BigNumber | number): boolean {\n    return this.value.eq(this.toDBN(num));\n  }\n  gt(num: TokenValue | BigNumber | number): boolean {\n    return this.value.gt(this.toDBN(num));\n  }\n  gte(num: TokenValue | BigNumber | number): boolean {\n    return this.value.gte(this.toDBN(num));\n  }\n  lt(num: TokenValue | BigNumber | number): boolean {\n    return this.value.lt(this.toDBN(num));\n  }\n  lte(num: TokenValue | BigNumber | number): boolean {\n    return this.value.lte(this.toDBN(num));\n  }\n  static min(...values: TokenValue[]): TokenValue {\n    return values.reduce((acc, num) => (acc.lt(num) ? acc : num));\n  }\n  static max(...values: TokenValue[]): TokenValue {\n    return values.reduce((acc, num) => (acc.gt(num) ? acc : num));\n  }\n  abs(): TokenValue {\n    return TokenValue.from(this.value.abs());\n  }\n  pow(num: number): TokenValue {\n    return TokenValue.from(this.value.pow(num));\n  }\n  pct(num: number): TokenValue {\n    const minDecimals = this.decimals < 2 ? 2 : this.decimals;\n    if (num < 0) throw new Error(\"Percent value must be bigger than 0\");\n    return TokenValue.from(this.value.mul(num.toString()).div(\"100\", minDecimals));\n  }\n\n  /**\n   * Calculates value after substracting slippage.\n   *\n   * For ex, a value of 100, with slippage 3 would return 97\n   *\n   * @param slippage The percent to remove from the value. Slippage should be\n   * a human readable percentage; 3 = 3%, 25=25%, .1 = 0.1%\n   *\n   * @return The original value minus slippage\n   */\n  subSlippage(slippage: number) {\n    return this.pct(100 - slippage);\n  }\n\n  /**\n   * Calculates value after adding slippage.\n   *\n   * For ex, a value of 100, with slippage 3 would return 103\n   *\n   * @param slippage The percent to remove from the value. Slippage should be\n   * a human readable percentage; 3 = 3%, 25=25%, .1 = 0.1%\n   *\n   * @return The original value plus slippage\n   */\n  addSlippage(slippage: number) {\n    return this.pct(100 + slippage);\n  }\n}\n","import { BigNumber, BaseContract, ContractTransaction, ethers, utils, providers, Signer } from \"ethers\";\nimport { TokenValue } from \"../TokenValue\";\nimport { PromiseOrValue } from \"src/constants/generated/common\";\n\ntype TokenMetadata = {\n  name?: string;\n  displayName?: string;\n  logo?: string;\n  color?: string;\n  displayDecimals?: number;\n  isLP?: boolean;\n};\n\nexport abstract class Token {\n  /** Provider for chain interactions */\n  private providerOrSigner?: providers.Provider | Signer;\n\n  /** The chain id of the chain this token lives on */\n  public chainId: number;\n\n  /** The contract address on the chain on which this token lives */\n  public address: string;\n\n  /** The decimals used in representing currency amounts */\n  public decimals: number;\n\n  /** The name of the currency, i.e. a descriptive textual non-unique identifier */\n  public name: string = \"Unknown\";\n\n  /** The display name of the currency, i.e. a descriptive textual non-unique identifier */\n  public displayName: string = \"Unknown Token\";\n\n  /** The symbol of the currency, i.e. a short textual non-unique identifier */\n  public symbol: string;\n\n  /** The square logo of the token. */\n  public logo?: string;\n\n  /** The color to use when displaying the token in charts, etc. */\n  public color?: string;\n\n  /** The number of decimals this token is recommended to be truncated to. */\n  public displayDecimals: number;\n\n  /** Whether or not this is a LP token representing a position in a Pool. */\n  public isLP: boolean = false;\n\n  constructor(\n    chainId: number,\n    address: string | null,\n    decimals?: number,\n    symbol?: string,\n    metadata?: TokenMetadata,\n    signerOrProvider?: providers.Provider | Signer\n  ) {\n    this.chainId = chainId;\n    this.address = address?.toLowerCase() ?? \"\";\n\n    this.decimals = decimals ?? 0;\n    this.symbol = symbol ?? \"UNKNOWN\";\n\n    // make this.provider not enumerable (ie, hide it from console.log output)\n    Object.defineProperty(this, \"providerOrSigner\", {\n      value: signerOrProvider,\n      writable: true,\n      configurable: false,\n      enumerable: false\n    });\n\n    this.name = metadata?.name ?? \"Unknown\";\n    this.displayName = metadata?.displayName ?? metadata?.name ?? \"Unknown Token\";\n    this.displayDecimals = metadata?.displayDecimals ?? 2;\n    this.logo = metadata?.logo;\n    this.color = metadata?.color;\n    this.isLP = metadata?.isLP || false;\n  }\n\n  abstract getContract(): BaseContract | null;\n\n  abstract getBalance(account: string): Promise<TokenValue>;\n\n  abstract getAllowance(account: string, spender: string): Promise<TokenValue | undefined>;\n\n  abstract hasEnoughAllowance(account: string, spender: string, amount: TokenValue | ethers.BigNumber): boolean | Promise<boolean>;\n\n  abstract getTotalSupply(): Promise<TokenValue> | undefined;\n\n  setSignerOrProvider(provider: providers.Provider | Signer) {\n    this.providerOrSigner = provider;\n    \n    // Remove the cached contract when changing provider/signer\n    // @ts-ignore - NativeToken does not have 'this.contract', but instead of implementing two copies of this\n    // method, for NativeToken and ERC20, we just do it here once and ignore the ts warning\n    delete this.contract;\n  }\n\n  getSignerOrProvider(): providers.Provider | Signer {\n    if (!this.providerOrSigner) throw new Error(\"Signer or Provider not set\");\n    return this.providerOrSigner;\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public equals(other: Token): boolean {\n    return this.address === other.address && this.chainId === other.chainId;\n  }\n\n  public toString(): string {\n    return this.name;\n  }\n\n  public setMetadata(metadata: { logo?: string; color?: string }) {\n    if (metadata.logo) this.logo = metadata.logo;\n    if (metadata.color) this.color = metadata.color;\n  }\n\n  /**\n   * Converts from a blockchain amount to a TokenValue with this token's decimals set\n   *\n   * Ex: BEAN.fromBlockchain(\"3140000\") => TokenValue holding value \"3140000\" and 6 decimals\n   *\n   * @param amount A string value in blockchain format\n   * @returns TokenValue\n   */\n  fromBlockchain(amount: string | number | BigNumber): TokenValue {\n    return TokenValue.fromBlockchain(amount, this.decimals);\n  }\n\n  /**\n   * Converts from a human amount to a TokenAmount with this token's decimals set\n   *\n   * Ex: BEAN.fromHuman(\"3.14\") => TokenValue holding value \"3140000\" and 6 decimals\n   *\n   * @param amount human readable amout, ex: \"3.14\" ether\n   * @returns TokenValue\n   */\n  fromHuman(amount: string | number): TokenValue {\n    return TokenValue.fromHuman(amount, this.decimals);\n  }\n\n  /**\n   * Alias to `.fromHuman()`\n   *\n   * Converts from a human amount to a TokenAmount with this token's decimals set\n   *\n   * Ex: BEAN.fromHuman(\"3.14\") => TokenValue holding value \"3140000\" and 6 decimals\n   *\n   * @param amount human readable amout, ex: \"3.14\" ether\n   * @returns TokenValue\n   */\n  amount(amount: string | number): TokenValue {\n    return this.fromHuman(amount);\n  }\n\n  /**\n   * Converts from a blockchain value to a human readable form\n   *\n   * Ex: BEAN.toHuman(BigNumber.from('3140000)) => \"3.14\"\n   * @param value A BigNumber with a value of this token, for ex: 1000000 would be 1 BEAN\n   * @returns string\n   */\n  toHuman(value: BigNumber): string {\n    return utils.formatUnits(value, this.decimals);\n  }\n\n  toTokenValue(value: BigNumber): TokenValue {\n    return TokenValue.fromBlockchain(value, this.decimals);\n  }\n\n  public approve(spenderContract: PromiseOrValue<string>, amount: TokenValue | BigNumber): Promise<ContractTransaction> {\n    // @ts-ignore\n    return;\n  }\n}\n"],"names":["parseUnits","formatUnits","commify","BigNumber","utils","constants"],"mappings":"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"}