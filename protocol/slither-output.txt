INFO:Detectors:
LibTransfer.transferToken(IERC20,address,address,uint256,LibTransfer.From,LibTransfer.To) (contracts/libraries/Token/LibTransfer.sol#30-46) uses arbitrary from in transferFrom: token.safeTransferFrom(sender,recipient,amount) (contracts/libraries/Token/LibTransfer.sol#40)
LibTransfer.receiveToken(IERC20,uint256,address,LibTransfer.From) (contracts/libraries/Token/LibTransfer.sol#48-71) uses arbitrary from in transferFrom: token.safeTransferFrom(sender,address(this),amount - receivedAmount) (contracts/libraries/Token/LibTransfer.sol#66)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#arbitrary-from-in-transferfrom
INFO:Detectors:
LibEth.refundEth() (contracts/libraries/Token/LibEth.sol#16-26) sends eth to arbitrary user
	Dangerous calls:
	- (success) = msg.sender.call{value: address(this).balance}(new bytes(0)) (contracts/libraries/Token/LibEth.sol#21-23)
LibWeth.unwrap(uint256,LibTransfer.From) (contracts/libraries/Token/LibWeth.sol#24-29) sends eth to arbitrary user
	Dangerous calls:
	- (success) = msg.sender.call{value: amount}(new bytes(0)) (contracts/libraries/Token/LibWeth.sol#27)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations
INFO:Detectors:
MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190) uses a weak PRNG: "s.season.timestamp = uint32(block.timestamp % 2 ** 32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#184)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG
INFO:Detectors:
FarmFacet._farm(bytes) (contracts/beanstalk/farm/FarmFacet.sol#81-87) uses delegatecall to a input-controlled function id
	- (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#85)
FarmFacet._farmMem(bytes) (contracts/beanstalk/farm/FarmFacet.sol#90-96) uses delegatecall to a input-controlled function id
	- (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#94)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#controlled-delegatecall
INFO:Detectors:
FarmFacet._farm(bytes) (contracts/beanstalk/farm/FarmFacet.sol#81-87) has delegatecall inside a loop in a payable function: (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#85)
FarmFacet._farmMem(bytes) (contracts/beanstalk/farm/FarmFacet.sol#90-96) has delegatecall inside a loop in a payable function: (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#94)
Depot.farm(bytes[]) (contracts/depot/Depot.sol#43-54) has delegatecall inside a loop in a payable function: (success,result) = address(this).delegatecall(data[i]) (contracts/depot/Depot.sol#50)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#payable-functions-using-delegatecall-inside-a-loop
INFO:Detectors:
IERC165 is re-used:
	- IERC165 (node_modules/@openzeppelin/contracts/introspection/IERC165.sol#14-24)
	- IERC165 (contracts/interfaces/IERC165.sol#4-12)
IERC1155Receiver is re-used:
	- IERC1155Receiver (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#10-57)
	- IERC1155Receiver (contracts/interfaces/IERC1155Receiver.sol#11-58)
Oracle is re-used:
	- Oracle (node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#11-325)
	- Oracle (contracts/beanstalk/sun/SeasonFacet/Oracle.sol#14-38)
IBS is re-used:
	- IBS (contracts/beanstalk/init/InitBip12.sol#15-17)
	- IBS (contracts/beanstalk/init/InitBip16.sol#15-18)
	- IBS (contracts/beanstalk/init/InitBip5.sol#15-17)
	- IBS (contracts/beanstalk/init/InitFundraiser.sol#15-17)
	- IBS (contracts/beanstalk/init/InitWhitelist.sol#16-26)
	- IBS (contracts/mocks/mockFacets/MockFundraiserFacet.sol#15-17)
	- IBS (contracts/tokens/Fertilizer/Fertilizer.sol#13-18)
I3Curve is re-used:
	- I3Curve (contracts/interfaces/ICurve.sol#51-53)
	- I3Curve (contracts/mocks/curve/MockCurveFactory.sol#17-19)
	- I3Curve (contracts/mocks/curve/MockPlainCurve.sol#17-19)
SafeCast is re-used:
	- SafeCast (node_modules/@openzeppelin/contracts/utils/SafeCast.sol#21-211)
	- SafeCast (node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol#6-28)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#name-reused
INFO:Detectors:
Reentrancy in Order._createPodOrder(uint256,uint24,uint256,uint256) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#56-72):
	External calls:
	- _cancelPodOrder(pricePerPod,maxPlaceInLine,minFillAmount,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#67)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#158)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)
	External calls sending eth:
	- _cancelPodOrder(pricePerPod,maxPlaceInLine,minFillAmount,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#67)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- s.podOrders[id] = beanAmount (contracts/beanstalk/market/MarketplaceFacet/Order.sol#68)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)
Reentrancy in Order._createPodOrderV2(uint256,uint256,uint256,bytes) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#74-86):
	External calls:
	- _cancelPodOrderV2(maxPlaceInLine,minFillAmount,pricingFunction,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#82)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#171)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)
	External calls sending eth:
	- _cancelPodOrderV2(maxPlaceInLine,minFillAmount,pricingFunction,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#82)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- s.podOrders[id] = beanAmount (contracts/beanstalk/market/MarketplaceFacet/Order.sol#83)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
MockToken._decimals (contracts/mocks/MockToken.sol#18) shadows:
	- ERC20._decimals (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#44)
Internalizer._balances (contracts/tokens/Fertilizer/Internalizer.sol#37) shadows:
	- ERC1155Upgradeable._balances (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#27)
Internalizer._uri (contracts/tokens/Fertilizer/Internalizer.sol#39) shadows:
	- ERC1155Upgradeable._uri (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#33)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variable-shadowing
INFO:Detectors:
FertilizerFacet.addFertilizerOwner(uint128,uint128,uint256) (contracts/beanstalk/barn/FertilizerFacet.sol#61-73) ignores return value by C.usdc().transferFrom(msg.sender,address(this),uint256(amount).mul(1e6)) (contracts/beanstalk/barn/FertilizerFacet.sol#67-71)
MockCurveZap.add_liquidity(address,uint256[4],uint256) (contracts/mocks/curve/MockCurveZap.sol#26-32) ignores return value by IERC20(BEAN).transferFrom(msg.sender,address(this),depAmounts[0]) (contracts/mocks/curve/MockCurveZap.sol#27)
MockCurveZap.add_liquidity(address,uint256[4],uint256) (contracts/mocks/curve/MockCurveZap.sol#26-32) ignores return value by IERC20(USDC).transferFrom(msg.sender,THREE_POOL,depAmounts[2]) (contracts/mocks/curve/MockCurveZap.sol#28)
MockMeta3Curve.exchange(int128,int128,uint256,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#171-203) ignores return value by ERC20(coins[i]).transferFrom(msg.sender,address(this),dx) (contracts/mocks/curve/MockMeta3Curve.sol#199)
MockMeta3Curve.exchange(int128,int128,uint256,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#171-203) ignores return value by ERC20(coins[j]).transfer(_receiver,dy) (contracts/mocks/curve/MockMeta3Curve.sol#200)
MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264) ignores return value by IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockMeta3Curve.sol#256)
MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293) ignores return value by ERC20(coins[i]).transfer(_receiver,value) (contracts/mocks/curve/MockMeta3Curve.sol#286)
MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351) ignores return value by ERC20(coins[i_scope_1]).transfer(_receiver,amount) (contracts/mocks/curve/MockMeta3Curve.sol#347)
MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#367-384) ignores return value by IBean(coins[i]).transfer(_receiver,dy) (contracts/mocks/curve/MockMeta3Curve.sol#381)
MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193) ignores return value by IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockPlainCurve.sol#185)
MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/mocks/curve/MockPlainCurve.sol#201-217) ignores return value by IBean(coins[i]).transfer(msg.sender,dy) (contracts/mocks/curve/MockPlainCurve.sol#214)
FertilizerPreMint.mint(uint256) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#42-47) ignores return value by IUSDC.transferFrom(msg.sender,CUSTODIAN,amount) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#46)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
InitBip1.s (contracts/beanstalk/init/InitBip1.sol#17) is never initialized. It is used in:
	- InitBip1.init() (contracts/beanstalk/init/InitBip1.sol#22-25)
InitBip14.s (contracts/beanstalk/init/InitBip14.sol#17) is never initialized. It is used in:
	- InitBip14.init() (contracts/beanstalk/init/InitBip14.sol#22-24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables
INFO:Detectors:
LibFunction.useClipboard(bytes,bytes,bytes[]).pasteParams_scope_0 (contracts/libraries/LibFunction.sol#85) is a storage variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-storage-variables
INFO:Detectors:
FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv = (3 * denominator) ^ 2 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#87)
FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#91)
FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#92)
FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#93)
FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#94)
FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#95)
FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#96)
FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#72)
	- result = prod0 * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#104)
Oracle.observeSingle(Oracle.Observation[65535],uint32,uint32,int24,uint16,uint128,uint16) (node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#245-287) performs a multiplication on the result of a division:
	- (beforeOrAt.tickCumulative + ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / observationTimeDelta) * targetDelta,beforeOrAt.secondsPerLiquidityCumulativeX128 + uint160((uint256(atOrAfter.secondsPerLiquidityCumulativeX128 - beforeOrAt.secondsPerLiquidityCumulativeX128) * targetDelta) / observationTimeDelta)) (node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#275-285)
Tick.tickSpacingToMaxLiquidityPerTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#44-49) performs a multiplication on the result of a division:
	- minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#45)
Tick.tickSpacingToMaxLiquidityPerTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#44-49) performs a multiplication on the result of a division:
	- maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#46)
InitDiamond.init() (contracts/beanstalk/init/InitDiamond.sol#31-69) performs a multiplication on the result of a division:
	- s.season.start = (block.timestamp / s.season.period) * s.season.period (contracts/beanstalk/init/InitDiamond.sol#59-61)
ConvertFacet.enrootDeposits(address,int96[],uint256[]) (contracts/beanstalk/silo/ConvertFacet.sol#184-245) performs a multiplication on the result of a division:
	- depositBdv = amounts[i].mul(newTotalBdv).div(ar.tokensRemoved) (contracts/beanstalk/silo/ConvertFacet.sol#214)
	- stalkAdded = stalkAdded.add(depositBdv.mul(_stalkPerBdv).add(LibSilo.stalkReward(stems[i],_lastStem,uint128(depositBdv)))) (contracts/beanstalk/silo/ConvertFacet.sol#225-233)
Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156) performs a multiplication on the result of a division:
	- newBpf = maxNewFertilized.div(s.activeFertilizer) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#124)
	- newFertilized = newFertilized.add(newBpf.mul(s.activeFertilizer)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#135)
Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156) performs a multiplication on the result of a division:
	- newBpf = maxNewFertilized.div(s.activeFertilizer) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#124)
	- newFertilized = newFertilized.add(newBpf.mul(s.activeFertilizer)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#154)
Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234) performs a multiplication on the result of a division:
	- newSoil = newHarvestable.mul(100).div(100 + s.w.t) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#227)
	- newSoil = newSoil.mul(SOIL_COEFFICIENT_HIGH).div(C.PRECISION) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#229)
Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234) performs a multiplication on the result of a division:
	- newSoil = newSoil.mul(SOIL_COEFFICIENT_HIGH).div(C.PRECISION) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#229)
	- newSoil = newSoil.mul(SOIL_COEFFICIENT_LOW).div(C.PRECISION) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#231)
CurvePrice.getD(uint256[2],uint256) (contracts/ecosystem/price/CurvePrice.sol#64-98) performs a multiplication on the result of a division:
	- D_P = D_P * D / (xp[_j] * N_COINS) (contracts/ecosystem/price/CurvePrice.sol#87)
	- D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P) (contracts/ecosystem/price/CurvePrice.sol#90)
LibCurve.getY(uint256,uint256[2],uint256,uint256) (contracts/libraries/Curve/LibCurve.sol#49-81) performs a multiplication on the result of a division:
	- c = (c * D) / (_x * N_COINS) (contracts/libraries/Curve/LibCurve.sol#67)
	- c = (c * D * A_PRECISION) / (Ann * N_COINS) (contracts/libraries/Curve/LibCurve.sol#70)
LibCurve.getD(uint256[2],uint256) (contracts/libraries/Curve/LibCurve.sol#83-112) performs a multiplication on the result of a division:
	- D_P = (D_P * D) / (xp[_j] * N_COINS) (contracts/libraries/Curve/LibCurve.sol#101)
	- D = (((Ann * S) / A_PRECISION + D_P * N_COINS) * D) / (((Ann - A_PRECISION) * D) / A_PRECISION + (N_COINS + 1) * D_P) (contracts/libraries/Curve/LibCurve.sol#104-106)
LibCurve.getYD(uint256,uint256,uint256[2],uint256) (contracts/libraries/Curve/LibCurve.sol#114-145) performs a multiplication on the result of a division:
	- c = (c * D) / (_x * N_COINS) (contracts/libraries/Curve/LibCurve.sol#131)
	- c = (c * D * A_PRECISION) / (Ann * N_COINS) (contracts/libraries/Curve/LibCurve.sol#134)
LibBytes64.encode(bytes) (contracts/libraries/LibBytes64.sol#20-90) performs a multiplication on the result of a division:
	- result = new string(4 * ((data.length + 2) / 3)) (contracts/libraries/LibBytes64.sol#36)
LibFertilizer.addUnderlying(uint256,uint256) (contracts/libraries/LibFertilizer.sol#69-105) performs a multiplication on the result of a division:
	- percentToFill = amount.mul(C.precision()).div(remainingRecapitalization()) (contracts/libraries/LibFertilizer.sol#72-74)
	- newDepositedBeans = newDepositedBeans.mul(percentToFill).div(C.precision()) (contracts/libraries/LibFertilizer.sol#80-82)
LibFertilizer.remainingRecapitalization() (contracts/libraries/LibFertilizer.sol#136-149) performs a multiplication on the result of a division:
	- totalDollars = totalDollars / 1e6 * 1e6 (contracts/libraries/LibFertilizer.sol#146)
LibIncentive.determineReward(uint256,uint256[2],uint256) (contracts/libraries/LibIncentive.sol#65-116) performs a multiplication on the result of a division:
	- ethBeanPrice = (ethUsdcPrice.mul(1e6)).div(beanUsdPrice) (contracts/libraries/LibIncentive.sol#91)
	- sunriseReward = Math.min(BASE_REWARD + gasCostWei.mul(ethBeanPrice).div(1e18),MAX_REWARD) (contracts/libraries/LibIncentive.sol#107-110)
LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)
	- inverse = (3 * denominator) ^ 2 (contracts/libraries/LibPRBMath.sol#246)
LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)
	- inverse *= 2 - denominator * inverse (contracts/libraries/LibPRBMath.sol#250)
LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)
	- inverse *= 2 - denominator * inverse (contracts/libraries/LibPRBMath.sol#251)
LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)
	- inverse *= 2 - denominator * inverse (contracts/libraries/LibPRBMath.sol#252)
LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)
	- inverse *= 2 - denominator * inverse (contracts/libraries/LibPRBMath.sol#253)
LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)
	- inverse *= 2 - denominator * inverse (contracts/libraries/LibPRBMath.sol#254)
LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:
	- denominator = denominator / twos (contracts/libraries/LibPRBMath.sol#231)
	- inverse *= 2 - denominator * inverse (contracts/libraries/LibPRBMath.sol#255)
LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (contracts/libraries/LibPRBMath.sol#234)
	- result = prod0 * inverse (contracts/libraries/LibPRBMath.sol#261)
MockInitDiamond.init() (contracts/mocks/MockInitDiamond.sol#25-61) performs a multiplication on the result of a division:
	- s.season.start = (block.timestamp / s.season.period) * s.season.period (contracts/mocks/MockInitDiamond.sol#55-57)
MockMeta3Curve.exchange(int128,int128,uint256,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#171-203) performs a multiplication on the result of a division:
	- dy_fee = dy * fee / FEE_DENOMINATOR (contracts/mocks/curve/MockMeta3Curve.sol#188)
	- dy_admin_fee = dy_fee * ADMIN_FEE / FEE_DENOMINATOR (contracts/mocks/curve/MockMeta3Curve.sol#193)
MockMeta3Curve.exchange(int128,int128,uint256,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#171-203) performs a multiplication on the result of a division:
	- dy_admin_fee = dy_fee * ADMIN_FEE / FEE_DENOMINATOR (contracts/mocks/curve/MockMeta3Curve.sol#193)
	- dy_admin_fee = dy_admin_fee * PRECISION / rates[j] (contracts/mocks/curve/MockMeta3Curve.sol#194)
MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264) performs a multiplication on the result of a division:
	- base_fee = fee * N_COINS / (4 * (N_COINS - 1)) (contracts/mocks/curve/MockMeta3Curve.sol#233)
	- fees[i_scope_0] = base_fee * difference / FEE_DENOMINATOR (contracts/mocks/curve/MockMeta3Curve.sol#240)
MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351) performs a multiplication on the result of a division:
	- base_fee = fee * N_COINS / (4 * (N_COINS - 1)) (contracts/mocks/curve/MockMeta3Curve.sol#321)
	- fees[i_scope_0] = base_fee * difference / FEE_DENOMINATOR (contracts/mocks/curve/MockMeta3Curve.sol#330)
MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#386-416) performs a multiplication on the result of a division:
	- base_fee = fee * N_COINS / (4 * (N_COINS - 1)) (contracts/mocks/curve/MockMeta3Curve.sol#400)
	- xp_reduced[j] = xp_j - base_fee * dx_expected / FEE_DENOMINATOR (contracts/mocks/curve/MockMeta3Curve.sol#408)
MockMeta3Curve.get_D(uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#428-451) performs a multiplication on the result of a division:
	- D_P = D_P * D / (xp[_j] * N_COINS) (contracts/mocks/curve/MockMeta3Curve.sol#442)
	- D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P) (contracts/mocks/curve/MockMeta3Curve.sol#445)
MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#453-495) performs a multiplication on the result of a division:
	- c = c * D / (_x * N_COINS) (contracts/mocks/curve/MockMeta3Curve.sol#476)
	- c = c * D * A_PRECISION / (Ann * N_COINS) (contracts/mocks/curve/MockMeta3Curve.sol#479)
MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#497-533) performs a multiplication on the result of a division:
	- c = c * D / (_x * N_COINS) (contracts/mocks/curve/MockMeta3Curve.sol#519)
	- c = c * D * A_PRECISION / (Ann * N_COINS) (contracts/mocks/curve/MockMeta3Curve.sol#522)
MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193) performs a multiplication on the result of a division:
	- base_fee = fee * N_COINS / (4 * (N_COINS - 1)) (contracts/mocks/curve/MockPlainCurve.sol#162)
	- fees[i_scope_0] = base_fee * difference / FEE_DENOMINATOR (contracts/mocks/curve/MockPlainCurve.sol#169)
MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockPlainCurve.sol#219-249) performs a multiplication on the result of a division:
	- base_fee = fee * N_COINS / (4 * (N_COINS - 1)) (contracts/mocks/curve/MockPlainCurve.sol#233)
	- xp_reduced[j] = xp_j - base_fee * dx_expected / FEE_DENOMINATOR (contracts/mocks/curve/MockPlainCurve.sol#241)
MockPlainCurve.get_D(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#272-295) performs a multiplication on the result of a division:
	- D_P = D_P * D / (xp[_j] * N_COINS) (contracts/mocks/curve/MockPlainCurve.sol#286)
	- D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P) (contracts/mocks/curve/MockPlainCurve.sol#289)
MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#297-339) performs a multiplication on the result of a division:
	- c = c * D / (_x * N_COINS) (contracts/mocks/curve/MockPlainCurve.sol#320)
	- c = c * D * A_PRECISION / (Ann * N_COINS) (contracts/mocks/curve/MockPlainCurve.sol#323)
MockSiloFacet.mockUnripeLPDeposit(uint256,uint32,uint256,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#40-56) performs a multiplication on the result of a division:
	- bdv = bdv.mul(C.initialRecap()).div(1e18) (contracts/mocks/mockFacets/MockSiloFacet.sol#49)
	- seeds = bdv.mul(LibLegacyTokenSilo.getSeedsPerToken(C.UNRIPE_LP)) (contracts/mocks/mockFacets/MockSiloFacet.sol#51)
MockSiloFacet.mockUnripeLPDeposit(uint256,uint32,uint256,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#40-56) performs a multiplication on the result of a division:
	- bdv = bdv.mul(C.initialRecap()).div(1e18) (contracts/mocks/mockFacets/MockSiloFacet.sol#49)
	- stalk = bdv.mul(s.ss[C.UNRIPE_LP].stalkIssuedPerBdv).add(stalkRewardLegacy(seeds,_season() - _s)) (contracts/mocks/mockFacets/MockSiloFacet.sol#52)
MockSiloFacet.mockUnripeBeanDeposit(uint32,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#58-70) performs a multiplication on the result of a division:
	- partialAmount = amount.mul(C.initialRecap()).div(1e18) (contracts/mocks/mockFacets/MockSiloFacet.sol#61)
	- seeds = partialAmount.mul(LibLegacyTokenSilo.getSeedsPerToken(C.UNRIPE_BEAN)) (contracts/mocks/mockFacets/MockSiloFacet.sol#64)
MockSiloFacet.mockUnripeBeanDeposit(uint32,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#58-70) performs a multiplication on the result of a division:
	- partialAmount = amount.mul(C.initialRecap()).div(1e18) (contracts/mocks/mockFacets/MockSiloFacet.sol#61)
	- stalk = partialAmount.mul(s.ss[C.UNRIPE_BEAN].stalkIssuedPerBdv).add(stalkRewardLegacy(seeds,_season() - _s)) (contracts/mocks/mockFacets/MockSiloFacet.sol#65)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
LibTransfer.sendToken(IERC20,uint256,address,LibTransfer.To) (contracts/libraries/Token/LibTransfer.sol#73-83) uses a dangerous strict equality:
	- amount == 0 (contracts/libraries/Token/LibTransfer.sol#79)
LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:
	- delta == 2 (contracts/libraries/LibDibbler.sol#178)
LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:
	- delta == 4 (contracts/libraries/LibDibbler.sol#186)
LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:
	- delta == 7 (contracts/libraries/LibDibbler.sol#199)
LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:
	- delta == 10 (contracts/libraries/LibDibbler.sol#211)
LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:
	- delta == 13 (contracts/libraries/LibDibbler.sol#225)
LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:
	- delta == 16 (contracts/libraries/LibDibbler.sol#237)
LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:
	- delta == 19 (contracts/libraries/LibDibbler.sol#250)
LibDibbler.morningTemperature() (contracts/libraries/LibDibbler.sol#155-272) uses a dangerous strict equality:
	- delta == 22 (contracts/libraries/LibDibbler.sol#262)
MockUniswapV3Pool.initialize(uint160) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#280-298) uses a dangerous strict equality:
	- require(bool,string)(slot0.sqrtPriceX96 == 0,AI) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#281)
MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797) uses a dangerous strict equality:
	- state.sqrtPriceX96 == step.sqrtPriceNextX96 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#702)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Contract locking ether found:
	Contract PauseFacet (contracts/beanstalk/diamond/PauseFacet.sol#16-46) has payable functions:
	 - PauseFacet.pause() (contracts/beanstalk/diamond/PauseFacet.sol#28-35)
	 - PauseFacet.unpause() (contracts/beanstalk/diamond/PauseFacet.sol#37-45)
	But does not have a function to withdraw the ether
Contract locking ether found:
	Contract ApprovalFacet (contracts/beanstalk/silo/ApprovalFacet.sol#23-202) has payable functions:
	 - ApprovalFacet.approveDeposit(address,address,uint256) (contracts/beanstalk/silo/ApprovalFacet.sol#46-54)
	 - ApprovalFacet.permitDeposits(address,address,address[],uint256[],uint256,uint8,bytes32,bytes32) (contracts/beanstalk/silo/ApprovalFacet.sol#115-129)
	 - ApprovalFacet.permitDeposit(address,address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/beanstalk/silo/ApprovalFacet.sol#143-155)
	But does not have a function to withdraw the ether
Contract locking ether found:
	Contract MigrationFacet (contracts/beanstalk/silo/MigrationFacet.sol#22-113) has payable functions:
	 - MigrationFacet.mowAndMigrate(address,address[],uint32[][],uint256[][],uint256,uint256,bytes32[]) (contracts/beanstalk/silo/MigrationFacet.sol#41-53)
	 - MigrationFacet.mowAndMigrateNoDeposits(address) (contracts/beanstalk/silo/MigrationFacet.sol#63-65)
	But does not have a function to withdraw the ether
Contract locking ether found:
	Contract WhitelistFacet (contracts/beanstalk/silo/WhitelistFacet.sol#16-62) has payable functions:
	 - WhitelistFacet.dewhitelistToken(address) (contracts/beanstalk/silo/WhitelistFacet.sol#32-35)
	 - WhitelistFacet.whitelistToken(address,bytes4,uint32,uint32) (contracts/beanstalk/silo/WhitelistFacet.sol#37-50)
	 - WhitelistFacet.updateStalkPerBdvPerSeasonForToken(address,uint32) (contracts/beanstalk/silo/WhitelistFacet.sol#52-61)
	But does not have a function to withdraw the ether
Contract locking ether found:
	Contract MockConvertFacet (contracts/mocks/mockFacets/MockConvertFacet.sol#14-40) has payable functions:
	 - ConvertFacet.convert(bytes,int96[],uint256[]) (contracts/beanstalk/silo/ConvertFacet.sol#74-105)
	 - ConvertFacet.enrootDeposit(address,int96,uint256) (contracts/beanstalk/silo/ConvertFacet.sol#125-164)
	 - ConvertFacet.enrootDeposits(address,int96[],uint256[]) (contracts/beanstalk/silo/ConvertFacet.sol#184-245)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether
INFO:Detectors:
MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190) deletes Storage.Governance (contracts/beanstalk/AppStorage.sol#227-233) which contains a mapping:
	-delete s.g (contracts/mocks/mockFacets/MockSeasonFacet.sol#178)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#deletion-on-mapping-containing-a-structure
INFO:Detectors:
Reentrancy in Fertilizer._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes) (contracts/tokens/Fertilizer/Fertilizer.sol#51-62):
	External calls:
	- _update(from,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#60)
		- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)
	- _update(to,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#61)
		- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)
	State variables written after the call(s):
	- _update(to,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#61)
		- _balances[ids[i]][account].lastBpf = uint128(stopBpf) (contracts/tokens/Fertilizer/Fertilizer.sol#83)
	Internalizer._balances (contracts/tokens/Fertilizer/Internalizer.sol#37) can be used in cross function reentrancies:
	- Fertilizer.__update(address,uint256[],uint256) (contracts/tokens/Fertilizer/Fertilizer.sol#73-87)
	- Internalizer._transfer(address,address,uint256,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#74-88)
	- Internalizer.balanceOf(address,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#57-60)
	- Fertilizer.balanceOfFertilized(address,uint256[]) (contracts/tokens/Fertilizer/Fertilizer.sol#89-96)
	- Fertilizer.balanceOfUnfertilized(address,uint256[]) (contracts/tokens/Fertilizer/Fertilizer.sol#98-103)
	- Fertilizer.beanstalkMint(address,uint256,uint128,uint128) (contracts/tokens/Fertilizer/Fertilizer.sol#36-49)
	- Internalizer.lastBalanceOf(address,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#62-65)
Reentrancy in Order._cancelPodOrder(uint24,uint256,uint256,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#150-161):
	External calls:
	- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#158)
	State variables written after the call(s):
	- delete s.podOrders[id] (contracts/beanstalk/market/MarketplaceFacet/Order.sol#159)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)
Reentrancy in Order._cancelPodOrderV2(uint256,uint256,bytes,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#163-175):
	External calls:
	- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#171)
	State variables written after the call(s):
	- delete s.podOrders[id] (contracts/beanstalk/market/MarketplaceFacet/Order.sol#172)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)
Reentrancy in Silo._claimPlenty(address) (contracts/beanstalk/silo/SiloFacet/Silo.sol#149-156):
	External calls:
	- C.threeCrv().safeTransfer(account,plenty) (contracts/beanstalk/silo/SiloFacet/Silo.sol#152)
	State variables written after the call(s):
	- delete s.a[account].sop.plenty (contracts/beanstalk/silo/SiloFacet/Silo.sol#153)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SiloExit._balanceOfEarnedBeans(address,uint256) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#179-208)
	- SiloExit.balanceOfEarnedBeans(address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#161-167)
	- SiloExit.balanceOfGrownStalk(address,address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#125-136)
	- SiloExit.balanceOfRainRoots(address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#250-252)
	- SiloExit.balanceOfRoots(address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#114-116)
	- SiloExit.balanceOfSop(address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#258-268)
	- SiloExit.balanceOfStalk(address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#96-98)
	- SiloExit.lastSeasonOfPlenty() (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#230-232)
	- SiloExit.lastUpdate(address) (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#57-59)
	- SiloExit.stemStartSeason() (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#320-322)
	- SiloExit.totalEarnedBeans() (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#83-85)
	- SiloExit.totalRoots() (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#73-75)
	- SiloExit.totalStalk() (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#66-68)
Reentrancy in Order._fillPodOrder(Order.PodOrder,uint256,uint256,uint256,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#92-117):
	External calls:
	- LibTransfer.sendToken(C.bean(),costInBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#108)
	State variables written after the call(s):
	- _cancelPodListing(msg.sender,index) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#110)
		- delete s.podListings[index] (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#242)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)
	- _transferPlot(msg.sender,o.account,index,start,amount) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#112)
		- s.a[account].field.plots[id] = amount (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#71)
		- delete s.a[account].field.plots[id] (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#81)
		- s.a[account].field.plots[id] = start (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#82)
		- s.a[account].field.plots[id.add(end)] = amount.sub(end) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#84)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)
	- delete s.podOrders[id] (contracts/beanstalk/market/MarketplaceFacet/Order.sol#114)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)
Reentrancy in Order._fillPodOrderV2(Order.PodOrder,uint256,uint256,uint256,bytes,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#119-145):
	External calls:
	- LibTransfer.sendToken(C.bean(),costInBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#136)
	State variables written after the call(s):
	- _cancelPodListing(msg.sender,index) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#138)
		- delete s.podListings[index] (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#242)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)
	- _transferPlot(msg.sender,o.account,index,start,amount) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#140)
		- s.a[account].field.plots[id] = amount (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#71)
		- delete s.a[account].field.plots[id] (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#81)
		- s.a[account].field.plots[id] = start (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#82)
		- s.a[account].field.plots[id.add(end)] = amount.sub(end) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#84)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)
	- delete s.podOrders[id] (contracts/beanstalk/market/MarketplaceFacet/Order.sol#142)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- PodTransfer.allowancePods(address,address) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#41-47)
Reentrancy in MockUnripeFacet.addUnderlying(address,uint256) (contracts/mocks/mockFacets/MockUnripeFacet.sol#23-38):
	External calls:
	- IERC20(underlyingToken).safeTransferFrom(msg.sender,address(this),amount) (contracts/mocks/mockFacets/MockUnripeFacet.sol#29-33)
	State variables written after the call(s):
	- s.u[unripeToken].balanceOfUnderlying = s.u[unripeToken].balanceOfUnderlying.add(amount) (contracts/mocks/mockFacets/MockUnripeFacet.sol#34-37)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- UnripeFacet._getUnderlying(address,uint256,uint256) (contracts/beanstalk/barn/UnripeFacet.sol#113-121)
	- UnripeFacet.getRecapPaidPercentAmount(uint256) (contracts/beanstalk/barn/UnripeFacet.sol#199-205)
	- UnripeFacet.getTotalUnderlying(address) (contracts/beanstalk/barn/UnripeFacet.sol#219-225)
	- UnripeFacet.getUnderlyingPerUnripeToken(address) (contracts/beanstalk/barn/UnripeFacet.sol#207-217)
	- UnripeFacet.getUnderlyingToken(address) (contracts/beanstalk/barn/UnripeFacet.sol#238-244)
	- UnripeFacet.isUnripe(address) (contracts/beanstalk/barn/UnripeFacet.sol#149-151)
	- UnripeFacet.picked(address,address) (contracts/beanstalk/barn/UnripeFacet.sol#97-103)
	- MockUnripeFacet.setMerkleRootE(address,bytes32) (contracts/mocks/mockFacets/MockUnripeFacet.sol#19-21)
Reentrancy in MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264):
	External calls:
	- IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockMeta3Curve.sol#256)
	State variables written after the call(s):
	- supply = total_supply (contracts/mocks/curve/MockMeta3Curve.sol#261)
	MockMeta3Curve.supply (contracts/mocks/curve/MockMeta3Curve.sol#56) can be used in cross function reentrancies:
	- MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#386-416)
	- MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264)
	- MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293)
	- MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351)
	- MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#367-384)
	- MockMeta3Curve.reset() (contracts/mocks/curve/MockMeta3Curve.sol#154-160)
	- MockMeta3Curve.set_supply(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#106-108)
	- MockMeta3Curve.totalSupply() (contracts/mocks/curve/MockMeta3Curve.sol#568-570)
Reentrancy in MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193):
	External calls:
	- IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockPlainCurve.sol#185)
	State variables written after the call(s):
	- supply = total_supply (contracts/mocks/curve/MockPlainCurve.sol#190)
	MockPlainCurve.supply (contracts/mocks/curve/MockPlainCurve.sol#37) can be used in cross function reentrancies:
	- MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockPlainCurve.sol#219-249)
	- MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193)
	- MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/mocks/curve/MockPlainCurve.sol#201-217)
	- MockPlainCurve.reset() (contracts/mocks/curve/MockPlainCurve.sol#126-132)
	- MockPlainCurve.set_supply(uint256) (contracts/mocks/curve/MockPlainCurve.sol#92-94)
	- MockPlainCurve.totalSupply() (contracts/mocks/curve/MockPlainCurve.sol#375-377)
Reentrancy in Fertilizer.beanstalkMint(address,uint256,uint128,uint128) (contracts/tokens/Fertilizer/Fertilizer.sol#36-49):
	External calls:
	- _update(account,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#40)
		- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)
	State variables written after the call(s):
	- _balances[id][account].lastBpf = bpf (contracts/tokens/Fertilizer/Fertilizer.sol#42)
	Internalizer._balances (contracts/tokens/Fertilizer/Internalizer.sol#37) can be used in cross function reentrancies:
	- Fertilizer.__update(address,uint256[],uint256) (contracts/tokens/Fertilizer/Fertilizer.sol#73-87)
	- Internalizer._transfer(address,address,uint256,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#74-88)
	- Internalizer.balanceOf(address,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#57-60)
	- Fertilizer.balanceOfFertilized(address,uint256[]) (contracts/tokens/Fertilizer/Fertilizer.sol#89-96)
	- Fertilizer.balanceOfUnfertilized(address,uint256[]) (contracts/tokens/Fertilizer/Fertilizer.sol#98-103)
	- Fertilizer.beanstalkMint(address,uint256,uint128,uint128) (contracts/tokens/Fertilizer/Fertilizer.sol#36-49)
	- Internalizer.lastBalanceOf(address,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#62-65)
Reentrancy in Fertilizer.beanstalkMint(address,uint256,uint128,uint128) (contracts/tokens/Fertilizer/Fertilizer.sol#36-49):
	External calls:
	- _update(account,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#40)
		- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)
	- _safeMint(account,id,amount,bytes(0)) (contracts/tokens/Fertilizer/Fertilizer.sol#43-48)
		- IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data) (contracts/tokens/Fertilizer/Fertilizer1155.sol#109-117)
	State variables written after the call(s):
	- _safeMint(account,id,amount,bytes(0)) (contracts/tokens/Fertilizer/Fertilizer.sol#43-48)
		- _balances[id][from].amount = fromBalance - _amount (contracts/tokens/Fertilizer/Internalizer.sol#85)
		- _balances[id][to].amount = _balances[id][to].amount.add(_amount) (contracts/tokens/Fertilizer/Internalizer.sol#87)
	Internalizer._balances (contracts/tokens/Fertilizer/Internalizer.sol#37) can be used in cross function reentrancies:
	- Fertilizer.__update(address,uint256[],uint256) (contracts/tokens/Fertilizer/Fertilizer.sol#73-87)
	- Internalizer._transfer(address,address,uint256,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#74-88)
	- Internalizer.balanceOf(address,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#57-60)
	- Fertilizer.balanceOfFertilized(address,uint256[]) (contracts/tokens/Fertilizer/Fertilizer.sol#89-96)
	- Fertilizer.balanceOfUnfertilized(address,uint256[]) (contracts/tokens/Fertilizer/Fertilizer.sol#98-103)
	- Fertilizer.beanstalkMint(address,uint256,uint128,uint128) (contracts/tokens/Fertilizer/Fertilizer.sol#36-49)
	- Internalizer.lastBalanceOf(address,uint256) (contracts/tokens/Fertilizer/Internalizer.sol#62-65)
Reentrancy in MockUniswapV3Pool.collectProtocol(address,uint128,uint128) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#857-877):
	External calls:
	- TransferHelper.safeTransfer(token0,recipient,amount0) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#868)
	State variables written after the call(s):
	- protocolFees.token1 -= amount1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#872)
	MockUniswapV3Pool.protocolFees (contracts/mocks/uniswap/MockUniswapV3Pool.sol#93) can be used in cross function reentrancies:
	- MockUniswapV3Pool.collectProtocol(address,uint128,uint128) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#857-877)
	- MockUniswapV3Pool.flash(address,uint256,uint256,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#800-843)
	- MockUniswapV3Pool.protocolFees (contracts/mocks/uniswap/MockUniswapV3Pool.sol#93)
	- MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797)
Reentrancy in MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90):
	External calls:
	- handleRain(3) (contracts/mocks/mockFacets/MockSeasonFacet.sol#88)
		- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)
		- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)
		- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)
	- mockStepSilo(amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#89)
		- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#49)
	State variables written after the call(s):
	- mockStepSilo(amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#89)
		- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)
		- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)
		- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)
		- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)
		- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)
		- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
Reentrancy in MockAdminFacet.fertilizerSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#50-55):
	External calls:
	- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#53)
	State variables written after the call(s):
	- rewardToFertilizer(amount * 3) (contracts/mocks/mockFacets/MockAdminFacet.sol#54)
		- s.bpf = uint128(firstEndBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#139)
		- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#140)
		- s.bpf = uint128(newTotalBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#153)
		- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#155)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- MockAdminFacet.fertilizerSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#50-55)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- MockAdminFacet.rewardSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#43-48)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- MockAdminFacet.updateStart() (contracts/mocks/mockFacets/MockAdminFacet.sol#57-61)
Reentrancy in FundraiserFacet.fund(uint32,uint256,LibTransfer.From) (contracts/beanstalk/field/FundraiserFacet.sol#104-145):
	External calls:
	- amount = LibTransfer.receiveToken(IERC20(s.fundraisers[id].token),amount,msg.sender,mode) (contracts/beanstalk/field/FundraiserFacet.sol#118-123)
	State variables written after the call(s):
	- s.fundraisers[id].remaining = remaining - amount (contracts/beanstalk/field/FundraiserFacet.sol#124)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- FundraiserFacet.createFundraiser(address,address,uint256) (contracts/beanstalk/field/FundraiserFacet.sol#66-94)
	- FundraiserFacet.fundingToken(uint32) (contracts/beanstalk/field/FundraiserFacet.sol#176-178)
	- FundraiserFacet.fundraiser(uint32) (contracts/beanstalk/field/FundraiserFacet.sol#180-186)
	- FundraiserFacet.numberOfFundraisers() (contracts/beanstalk/field/FundraiserFacet.sol#188-190)
	- FundraiserFacet.remainingFunding(uint32) (contracts/beanstalk/field/FundraiserFacet.sol#168-170)
	- FundraiserFacet.totalFunding(uint32) (contracts/beanstalk/field/FundraiserFacet.sol#172-174)
Reentrancy in SeasonFacet.gm(address,LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#47-62):
	External calls:
	- caseId = stepWeather(deltaB) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#58)
		- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)
		- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)
		- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)
	- stepSun(deltaB,caseId) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#59)
		- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)
	State variables written after the call(s):
	- stepSun(deltaB,caseId) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#59)
		- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)
		- s.f.soil = amount.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#238)
		- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)
		- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)
		- s.f.harvestable = s.f.harvestable.add(newHarvestable) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#171)
		- s.season.abovePeg = true (contracts/beanstalk/sun/SeasonFacet/Sun.sol#75)
		- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)
		- s.season.abovePeg = false (contracts/beanstalk/sun/SeasonFacet/Sun.sol#81)
		- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)
		- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)
		- s.bpf = uint128(firstEndBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#139)
		- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#140)
		- s.bpf = uint128(newTotalBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#153)
		- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#155)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
Reentrancy in FertilizerPreMint.initialize(string) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#37-40):
	External calls:
	- IERC20(WETH).approve(SWAP_ROUTER,type()(uint256).max) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#38)
	State variables written after the call(s):
	- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)
		- _initialized = true (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#41)
	Initializable._initialized (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#25) can be used in cross function reentrancies:
	- Initializable.initializer() (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#35-49)
	- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)
		- _initializing = true (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#40)
		- _initializing = false (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#47)
	Initializable._initializing (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#30) can be used in cross function reentrancies:
	- Initializable.initializer() (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#35-49)
Reentrancy in MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82):
	External calls:
	- handleRain(4) (contracts/mocks/mockFacets/MockSeasonFacet.sol#80)
		- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)
		- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)
		- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)
	- mockStepSilo(amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#81)
		- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#49)
	State variables written after the call(s):
	- mockStepSilo(amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#81)
		- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)
		- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)
		- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)
		- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)
		- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)
		- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
Reentrancy in MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67):
	External calls:
	- handleRain(4) (contracts/mocks/mockFacets/MockSeasonFacet.sol#64)
		- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)
		- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)
		- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)
	State variables written after the call(s):
	- s.season.current += 1 (contracts/mocks/mockFacets/MockSeasonFacet.sol#63)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- s.season.sunriseBlock = uint32(block.number) (contracts/mocks/mockFacets/MockSeasonFacet.sol#66)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
Reentrancy in MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293):
	External calls:
	- ERC20(coins[i]).transfer(_receiver,value) (contracts/mocks/curve/MockMeta3Curve.sol#286)
	State variables written after the call(s):
	- balances[i] = old_balance - value (contracts/mocks/curve/MockMeta3Curve.sol#284)
	MockMeta3Curve.balances (contracts/mocks/curve/MockMeta3Curve.sol#54) can be used in cross function reentrancies:
	- MockMeta3Curve._update() (contracts/mocks/curve/MockMeta3Curve.sol#121-125)
	- MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264)
	- MockMeta3Curve.calc_token_amount(uint256[2],bool) (contracts/mocks/curve/MockMeta3Curve.sol#534-547)
	- MockMeta3Curve.calc_withdraw_one_coin(uint256,int128) (contracts/mocks/curve/MockMeta3Curve.sol#418-420)
	- MockMeta3Curve.exchange(int128,int128,uint256,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#171-203)
	- MockMeta3Curve.get_balances() (contracts/mocks/curve/MockMeta3Curve.sol#82-84)
	- MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293)
	- MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351)
	- MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#367-384)
	- MockMeta3Curve.reset() (contracts/mocks/curve/MockMeta3Curve.sol#154-160)
	- MockMeta3Curve.reset_cumulative() (contracts/mocks/curve/MockMeta3Curve.sol#127-130)
	- MockMeta3Curve.set_balances(uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#101-104)
	- MockMeta3Curve.update(uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#116-119)
	- supply -= _burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#289)
	MockMeta3Curve.supply (contracts/mocks/curve/MockMeta3Curve.sol#56) can be used in cross function reentrancies:
	- MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#386-416)
	- MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264)
	- MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293)
	- MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351)
	- MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#367-384)
	- MockMeta3Curve.reset() (contracts/mocks/curve/MockMeta3Curve.sol#154-160)
	- MockMeta3Curve.set_supply(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#106-108)
	- MockMeta3Curve.totalSupply() (contracts/mocks/curve/MockMeta3Curve.sol#568-570)
Reentrancy in MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190):
	External calls:
	- MockToken(s.fundraisers[i_scope_0].token).burn(MockToken(s.fundraisers[i_scope_0].token).balanceOf(address(this))) (contracts/mocks/mockFacets/MockSeasonFacet.sol#170)
	State variables written after the call(s):
	- delete s.fundraisers[i_scope_0] (contracts/mocks/mockFacets/MockSeasonFacet.sol#171)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- delete s.f (contracts/mocks/mockFacets/MockSeasonFacet.sol#173)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- delete s.s (contracts/mocks/mockFacets/MockSeasonFacet.sol#174)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- delete s.w (contracts/mocks/mockFacets/MockSeasonFacet.sol#175)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- s.w.lastSowTime = type()(uint32).max (contracts/mocks/mockFacets/MockSeasonFacet.sol#176)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- s.w.thisSowTime = type()(uint32).max (contracts/mocks/mockFacets/MockSeasonFacet.sol#177)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- delete s.g (contracts/mocks/mockFacets/MockSeasonFacet.sol#178)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- delete s.r (contracts/mocks/mockFacets/MockSeasonFacet.sol#179)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- delete s.co (contracts/mocks/mockFacets/MockSeasonFacet.sol#180)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- delete s.season (contracts/mocks/mockFacets/MockSeasonFacet.sol#181)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- delete s.fundraiserIndex (contracts/mocks/mockFacets/MockSeasonFacet.sol#182)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- s.season.start = block.timestamp (contracts/mocks/mockFacets/MockSeasonFacet.sol#183)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- s.season.timestamp = uint32(block.timestamp % 2 ** 32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#184)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- s.s.stalk = 0 (contracts/mocks/mockFacets/MockSeasonFacet.sol#185)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- s.season.withdrawSeasons = 25 (contracts/mocks/mockFacets/MockSeasonFacet.sol#186)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- s.season.current = 1 (contracts/mocks/mockFacets/MockSeasonFacet.sol#187)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
	- s.paused = false (contracts/mocks/mockFacets/MockSeasonFacet.sol#188)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- SeasonFacet.abovePeg() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#90-92)
	- Weather.changeWeather(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#198-217)
	- MockSeasonFacet.curveOracle() (contracts/mocks/mockFacets/MockSeasonFacet.sol#241-243)
	- MockSeasonFacet.deployStemsUpgrade() (contracts/mocks/mockFacets/MockSeasonFacet.sol#265-303)
	- MockSeasonFacet.droughtSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#84-90)
	- MockSeasonFacet.droughtSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#69-74)
	- MockSeasonFacet.farmSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#123-128)
	- MockSeasonFacet.farmSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#130-137)
	- MockSeasonFacet.fastForward(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#113-116)
	- MockSeasonFacet.getSunriseBlock() (contracts/mocks/mockFacets/MockSeasonFacet.sol#260-262)
	- MockSeasonFacet.getT() (contracts/mocks/mockFacets/MockSeasonFacet.sol#324-326)
	- Weather.handleRain(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#225-246)
	- SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150)
	- MockSeasonFacet.lastDSoil() (contracts/mocks/mockFacets/MockSeasonFacet.sol#312-314)
	- MockSeasonFacet.lastSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#316-318)
	- MockSeasonFacet.lightSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#107-111)
	- SeasonFacet.paused() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#76-78)
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- MockSeasonFacet.rainSiloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#76-82)
	- MockSeasonFacet.rainSunrise() (contracts/mocks/mockFacets/MockSeasonFacet.sol#53-58)
	- MockSeasonFacet.rainSunrises(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#60-67)
	- MockSeasonFacet.resetSeasonStart(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#221-223)
	- MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- Weather.rewardSop(uint256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#285-291)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71)
	- SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109)
	- MockSeasonFacet.setAbovePegE(bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#143-145)
	- MockSeasonFacet.setCurrentSeasonE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#198-200)
	- MockSeasonFacet.setLastDSoilE(uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#147-149)
	- MockSeasonFacet.setLastSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#155-157)
	- MockSeasonFacet.setMaxTempE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#139-141)
	- MockSeasonFacet.setNextSowTimeE(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#151-153)
	- Sun.setSoil(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#237-240)
	- Sun.setSoilAbovePeg(uint256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#226-234)
	- MockSeasonFacet.setSunriseBlock(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#256-258)
	- MockSeasonFacet.setYieldE(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#36-38)
	- MockSeasonFacet.siloSunrise(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#40-46)
	- Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280)
	- SeasonFacet.stepSeason() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#116-121)
	- Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83)
	- Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193)
	- MockSeasonFacet.stepWeatherE(int256,uint128) (contracts/mocks/mockFacets/MockSeasonFacet.sol#192-196)
	- MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool) (contracts/mocks/mockFacets/MockSeasonFacet.sol#202-219)
	- MockSeasonFacet.sunSunrise(int256,uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#92-97)
	- MockSeasonFacet.sunTemperatureSunrise(int256,uint256,uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#99-105)
	- SeasonFacet.sunriseBlock() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#97-99)
	- MockSeasonFacet.teleportSunrise(uint32) (contracts/mocks/mockFacets/MockSeasonFacet.sol#118-121)
	- MockSeasonFacet.thisSowTime() (contracts/mocks/mockFacets/MockSeasonFacet.sol#320-322)
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85)
	- MockSeasonFacet.updateTWAPCurveE() (contracts/mocks/mockFacets/MockSeasonFacet.sol#235-239)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
Reentrancy in MockAdminFacet.rewardSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#43-48):
	External calls:
	- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#46)
	- rewardBeans(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#47)
		- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)
	State variables written after the call(s):
	- rewardBeans(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#47)
		- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)
		- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)
		- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)
		- s.f.harvestable = s.f.harvestable.add(newHarvestable) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#171)
		- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)
		- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)
		- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)
		- s.bpf = uint128(firstEndBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#139)
		- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#140)
		- s.bpf = uint128(newTotalBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#153)
		- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#155)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- MockAdminFacet.fertilizerSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#50-55)
	- Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111)
	- MockAdminFacet.rewardSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#43-48)
	- Sun.rewardToFertilizer(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#116-156)
	- Sun.rewardToHarvestable(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#162-172)
	- Sun.rewardToSilo(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#178-212)
	- MockAdminFacet.updateStart() (contracts/mocks/mockFacets/MockAdminFacet.sol#57-61)
Reentrancy in Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280):
	External calls:
	- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)
	- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)
	- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)
	State variables written after the call(s):
	- rewardSop(amountOut) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#278)
		- s.sops[s.season.rainStart] = s.sops[s.season.lastSop].add(amount.mul(C.SOP_PRECISION).div(s.r.roots)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#286-288)
		- s.season.lastSop = s.season.rainStart (contracts/beanstalk/sun/SeasonFacet/Weather.sol#289)
		- s.season.lastSopSeason = s.season.current (contracts/beanstalk/sun/SeasonFacet/Weather.sol#290)
	ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) can be used in cross function reentrancies:
	- Weather.plentyPerRoot(uint32) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#89-91)
	- Weather.rain() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#82-84)
	- Weather.weather() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#75-77)
Reentrancy in Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83):
	External calls:
	- newHarvestable = rewardBeans(uint256(deltaB)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#73)
		- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)
	State variables written after the call(s):
	- setSoilAbovePeg(newHarvestable,caseId) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#74)
		- s.f.soil = amount.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#238)
	- s.season.abovePeg = true (contracts/beanstalk/sun/SeasonFacet/Sun.sol#75)
Reentrancy in MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797):
	External calls:
	- TransferHelper.safeTransfer(token1,recipient,uint256(- amount1)) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#782)
	- IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#785)
	- TransferHelper.safeTransfer(token0,recipient,uint256(- amount0)) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#788)
	- IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#791)
	State variables written after the call(s):
	- slot0.unlocked = true (contracts/mocks/uniswap/MockUniswapV3Pool.sol#796)
	MockUniswapV3Pool.slot0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#80) can be used in cross function reentrancies:
	- MockUniswapV3Pool._modifyPosition(MockUniswapV3Pool.ModifyPositionParams) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#315-381)
	- MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#388-462)
	- MockUniswapV3Pool.flash(address,uint256,uint256,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#800-843)
	- MockUniswapV3Pool.increaseObservationCardinalityNext(uint16) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#264-276)
	- MockUniswapV3Pool.initialize(uint160) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#280-298)
	- MockUniswapV3Pool.lock() (contracts/mocks/uniswap/MockUniswapV3Pool.sol#112-117)
	- MockUniswapV3Pool.setFeeProtocol(uint8,uint8) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846-854)
	- MockUniswapV3Pool.slot0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#80)
	- MockUniswapV3Pool.snapshotCumulativesInside(int24,int24) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#166-241)
	- MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#453-495) contains a tautology or contradiction:
	- require(bool,string)(i >= 0,Curve: i below zero) (contracts/mocks/curve/MockMeta3Curve.sol#463)
MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#497-533) contains a tautology or contradiction:
	- require(bool)(i >= 0) (contracts/mocks/curve/MockMeta3Curve.sol#503)
MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#497-533) contains a tautology or contradiction:
	- require(bool)(j >= 0) (contracts/mocks/curve/MockMeta3Curve.sol#500)
MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#297-339) contains a tautology or contradiction:
	- require(bool,string)(i >= 0,Curve: i below zero) (contracts/mocks/curve/MockPlainCurve.sol#307)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#tautology-or-contradiction
INFO:Detectors:
InitSiloEvents.init(InitSiloEvents.SiloEvents[]).i (contracts/beanstalk/init/InitSiloEvents.sol#38) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
TickBitmap.nextInitializedTickWithinOneWord(mapping(int16 => uint256),int24,int24,bool).bitPos_scope_1 (node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol#65) is a local variable never initialized
TickBitmap.nextInitializedTickWithinOneWord(mapping(int16 => uint256),int24,int24,bool).wordPos_scope_0 (node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol#65) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
LibPolynomial.evaluatePolynomial(bytes,uint256,uint256,uint256).positiveSum (contracts/libraries/LibPolynomial.sol#68) is a local variable never initialized
DiamondLoupeFacet.facets().i (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#32) is a local variable never initialized
CurveFacet.addLiquidity(address,address,uint256[],uint256,LibTransfer.From,LibTransfer.To).i (contracts/beanstalk/farm/CurveFacet.sol#110) is a local variable never initialized
CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_0 (contracts/beanstalk/farm/CurveFacet.sol#184) is a local variable never initialized
MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24).flippedUpper (contracts/mocks/uniswap/MockUniswapV3Pool.sol#402) is a local variable never initialized
MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address).i_scope_1 (contracts/mocks/curve/MockMeta3Curve.sol#344) is a local variable never initialized
Fertilizer1155.__doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).reason (contracts/tokens/Fertilizer/Fertilizer1155.sol#136) is a local variable never initialized
LibDiamond.replaceFunctions(address,bytes4[]).selectorIndex (contracts/libraries/LibDiamond.sol#147) is a local variable never initialized
FarmFacet.farm(bytes[]).i (contracts/beanstalk/farm/FarmFacet.sol#42) is a local variable never initialized
SqrtPriceMath.getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool).product_scope_0 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#49) is a local variable never initialized
MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256)._i (contracts/mocks/curve/MockMeta3Curve.sol#472) is a local variable never initialized
LibFunction.useClipboard(bytes,bytes,bytes[]).i (contracts/libraries/LibFunction.sol#90) is a local variable never initialized
LibFertilizer.addUnderlying(uint256,uint256).newDepositedBeans (contracts/libraries/LibFertilizer.sol#75) is a local variable never initialized
CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_1 (contracts/beanstalk/farm/CurveFacet.sol#202) is a local variable never initialized
LibLegacyTokenSilo._claimWithdrawals(address,address,uint32[]).i (contracts/libraries/Silo/LibLegacyTokenSilo.sol#528) is a local variable never initialized
SqrtPriceMath.getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool).product (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#39) is a local variable never initialized
MockMeta3Curve.add_liquidity(uint256[2],uint256,address).i_scope_1 (contracts/mocks/curve/MockMeta3Curve.sol#253) is a local variable never initialized
ERC1155Upgradeable._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).response (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#380) is a local variable never initialized
LibCurve.getYD(uint256,uint256,uint256[2],uint256)._i_scope_0 (contracts/libraries/Curve/LibCurve.sol#138) is a local variable never initialized
LibCurve.getD(uint256[2],uint256)._i (contracts/libraries/Curve/LibCurve.sol#91) is a local variable never initialized
MockPlainCurve.get_D(uint256[2],uint256)._i_scope_0 (contracts/mocks/curve/MockPlainCurve.sol#283) is a local variable never initialized
MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24).flippedLower (contracts/mocks/uniswap/MockUniswapV3Pool.sol#401) is a local variable never initialized
MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address).i_scope_0 (contracts/mocks/curve/MockMeta3Curve.sol#322) is a local variable never initialized
OracleLibrary.getWeightedArithmeticMeanTick(OracleLibrary.WeightedTickData[]).i (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#152) is a local variable never initialized
LibSilo._removeDepositsFromAccount(address,address,int96[],uint256[]).i (contracts/libraries/Silo/LibSilo.sol#562) is a local variable never initialized
MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2])._i (contracts/mocks/curve/MockMeta3Curve.sol#514) is a local variable never initialized
CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_7 (contracts/beanstalk/farm/CurveFacet.sol#225) is a local variable never initialized
ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).response (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#373) is a local variable never initialized
MockPlainCurve.calc_token_amount(uint256[2],bool).i (contracts/mocks/curve/MockPlainCurve.sol#345) is a local variable never initialized
ERC1155Upgradeable._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).reason (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#407) is a local variable never initialized
LibPolynomial.evaluatePolynomialIntegrationPiecewise(bytes,uint256,uint256).integrateToEnd (contracts/libraries/LibPolynomial.sol#146) is a local variable never initialized
LibCurve.getY(uint256,uint256[2],uint256,uint256)._i_scope_0 (contracts/libraries/Curve/LibCurve.sol#74) is a local variable never initialized
MockSeasonFacet.resetState().i_scope_0 (contracts/mocks/mockFacets/MockSeasonFacet.sol#169) is a local variable never initialized
Listing._createPodListing(uint256,uint256,uint256,uint24,uint256,uint256,LibTransfer.To).f (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#79) is a local variable never initialized
SiloFacet.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes).i (contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#252) is a local variable never initialized
MockPlainCurve.get_D(uint256[2],uint256)._j (contracts/mocks/curve/MockPlainCurve.sol#285) is a local variable never initialized
MockSeasonFacet.rainSunrises(uint256).i (contracts/mocks/mockFacets/MockSeasonFacet.sol#62) is a local variable never initialized
MockMeta3Curve._xp_mem(uint256[2],uint256[2]).i (contracts/mocks/curve/MockMeta3Curve.sol#423) is a local variable never initialized
ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).reason (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#377) is a local variable never initialized
TokenFacet.getBalances(address,IERC20[]).i (contracts/beanstalk/farm/TokenFacet.sol#334) is a local variable never initialized
MigrationFacet.getDepositLegacy(address,address,uint32).bdv_scope_1 (contracts/beanstalk/silo/MigrationFacet.sol#102) is a local variable never initialized
MockSeasonFacet.resetState().i (contracts/mocks/mockFacets/MockSeasonFacet.sol#164) is a local variable never initialized
LibDiamond.addFunctions(address,bytes4[]).selectorIndex (contracts/libraries/LibDiamond.sol#129) is a local variable never initialized
CurveFacet.removeLiquidityImbalance(address,address,uint256[],uint256,LibTransfer.From,LibTransfer.To).i_scope_1 (contracts/beanstalk/farm/CurveFacet.sol#295) is a local variable never initialized
LibCurve.getY(uint256,uint256[2],uint256,uint256)._i (contracts/libraries/Curve/LibCurve.sol#62) is a local variable never initialized
TokenFacet.getExternalBalances(address,IERC20[]).i (contracts/beanstalk/farm/TokenFacet.sol#306) is a local variable never initialized
ConvertFacet.enrootDeposits(address,int96[],uint256[]).i (contracts/beanstalk/silo/ConvertFacet.sol#206) is a local variable never initialized
MockMeta3Curve.calc_token_amount(uint256[2],bool).i (contracts/mocks/curve/MockMeta3Curve.sol#538) is a local variable never initialized
CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_5 (contracts/beanstalk/farm/CurveFacet.sol#221) is a local variable never initialized
MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#488) is a local variable never initialized
FieldFacet._harvest(uint256[]).i (contracts/beanstalk/field/FieldFacet.sol#175) is a local variable never initialized
MockMeta3Curve.get_D(uint256[2],uint256)._i (contracts/mocks/curve/MockMeta3Curve.sol#432) is a local variable never initialized
Fertilizer.balanceOfUnfertilized(address,uint256[]).i (contracts/tokens/Fertilizer/Fertilizer.sol#100) is a local variable never initialized
ERC1155Upgradeable._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).reason (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#384) is a local variable never initialized
SiloFacet.mowMultiple(address,address[]).i (contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#277) is a local variable never initialized
Fertilizer1155.__doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).response (contracts/tokens/Fertilizer/Fertilizer1155.sol#109) is a local variable never initialized
LibDiamond.diamondCut(IDiamondCut.FacetCut[],address,bytes).facetIndex (contracts/libraries/LibDiamond.sol#104) is a local variable never initialized
LibLegacyTokenSilo._mowAndMigrate(address,address[],uint32[][],uint256[][]).migrateData (contracts/libraries/Silo/LibLegacyTokenSilo.sol#301) is a local variable never initialized
Order._createPodOrder(uint256,uint24,uint256,uint256).emptyPricingFunction (contracts/beanstalk/market/MarketplaceFacet/Order.sol#70) is a local variable never initialized
CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i_scope_3 (contracts/beanstalk/farm/CurveFacet.sol#209) is a local variable never initialized
Weather.sop().newHarvestable (contracts/beanstalk/sun/SeasonFacet/Weather.sol#264) is a local variable never initialized
CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).i (contracts/beanstalk/farm/CurveFacet.sol#179) is a local variable never initialized
MigrationFacet.getDepositLegacy(address,address,uint32).amount_scope_0 (contracts/beanstalk/silo/MigrationFacet.sol#102) is a local variable never initialized
MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2])._i_scope_0 (contracts/mocks/curve/MockMeta3Curve.sol#526) is a local variable never initialized
Fertilizer1155.__doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes).reason (contracts/tokens/Fertilizer/Fertilizer1155.sol#113) is a local variable never initialized
MockMeta3Curve.get_D(uint256[2],uint256)._j (contracts/mocks/curve/MockMeta3Curve.sol#441) is a local variable never initialized
MockPlainCurve.get_D(uint256[2],uint256)._i (contracts/mocks/curve/MockPlainCurve.sol#276) is a local variable never initialized
MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256)._i_scope_0 (contracts/mocks/curve/MockPlainCurve.sol#327) is a local variable never initialized
ConvertFacet._withdrawTokens(address,int96[],uint256[],uint256).a (contracts/beanstalk/silo/ConvertFacet.sol#257) is a local variable never initialized
MockSeasonFacet.resetPools(address[]).i (contracts/mocks/mockFacets/MockSeasonFacet.sol#246) is a local variable never initialized
MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2]).j (contracts/mocks/curve/MockPlainCurve.sol#236) is a local variable never initialized
Fertilizer1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes).i (contracts/tokens/Fertilizer/Fertilizer1155.sol#67) is a local variable never initialized
Sun.rewardBeans(uint256).newFertilized (contracts/beanstalk/sun/SeasonFacet/Sun.sol#91) is a local variable never initialized
LibPolynomial.evaluatePolynomialIntegration(bytes,uint256,uint256,uint256,uint256).negativeSum (contracts/libraries/LibPolynomial.sol#113) is a local variable never initialized
TokenFacet.getAllBalances(address,IERC20[]).i (contracts/beanstalk/farm/TokenFacet.sol#363) is a local variable never initialized
LibLegacyTokenSilo._mowAndMigrate(address,address[],uint32[][],uint256[][]).perTokenData (contracts/libraries/Silo/LibLegacyTokenSilo.sol#305) is a local variable never initialized
Fertilizer1155.__doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).response (contracts/tokens/Fertilizer/Fertilizer1155.sol#131) is a local variable never initialized
MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#487) is a local variable never initialized
LibDiamond.removeFunctions(address,bytes4[]).selectorIndex (contracts/libraries/LibDiamond.sol#162) is a local variable never initialized
MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2]).j (contracts/mocks/curve/MockMeta3Curve.sol#403) is a local variable never initialized
ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).response (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#396) is a local variable never initialized
LibCurve.getD(uint256[2],uint256)._j (contracts/libraries/Curve/LibCurve.sol#100) is a local variable never initialized
MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address).i (contracts/mocks/curve/MockMeta3Curve.sol#315) is a local variable never initialized
MetadataFacet.getDepositMetadata(uint256).depositMetadata (contracts/beanstalk/metadata/MetadataFacet.sol#71) is a local variable never initialized
LibPolynomial.evaluatePolynomial(bytes,uint256,uint256,uint256).negativeSum (contracts/libraries/LibPolynomial.sol#69) is a local variable never initialized
MockMeta3Curve.get_D(uint256[2],uint256)._i_scope_0 (contracts/mocks/curve/MockMeta3Curve.sol#439) is a local variable never initialized
TokenSilo._transferDeposits(address,address,address,int96[],uint256[]).i (contracts/beanstalk/silo/SiloFacet/TokenSilo.sol#346) is a local variable never initialized
MockSeasonFacet.farmSunrises(uint256).i (contracts/mocks/mockFacets/MockSeasonFacet.sol#132) is a local variable never initialized
MockPlainCurve.add_liquidity(uint256[2],uint256).i_scope_1 (contracts/mocks/curve/MockPlainCurve.sol#182) is a local variable never initialized
ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).reason (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#400) is a local variable never initialized
LibPolynomial.evaluatePolynomialIntegration(bytes,uint256,uint256,uint256,uint256).degree (contracts/libraries/LibPolynomial.sol#119) is a local variable never initialized
MockPlainCurve.add_liquidity(uint256[2],uint256).i_scope_0 (contracts/mocks/curve/MockPlainCurve.sol#163) is a local variable never initialized
MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256)._i (contracts/mocks/curve/MockPlainCurve.sol#316) is a local variable never initialized
MockMeta3Curve.add_liquidity(uint256[2],uint256,address).i_scope_0 (contracts/mocks/curve/MockMeta3Curve.sol#234) is a local variable never initialized
LibCurve.getYD(uint256,uint256,uint256[2],uint256)._i (contracts/libraries/Curve/LibCurve.sol#127) is a local variable never initialized
LibCurve.getD(uint256[2],uint256)._i_scope_0 (contracts/libraries/Curve/LibCurve.sol#98) is a local variable never initialized
Fertilizer.balanceOfFertilized(address,uint256[]).i (contracts/tokens/Fertilizer/Fertilizer.sol#91) is a local variable never initialized
MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256)._i_scope_0 (contracts/mocks/curve/MockMeta3Curve.sol#483) is a local variable never initialized
Internalizer.lastBalanceOfBatch(address[],uint256[]).i (contracts/tokens/Fertilizer/Internalizer.sol#69) is a local variable never initialized
LibPolynomial.evaluatePolynomialIntegration(bytes,uint256,uint256,uint256,uint256).positiveSum (contracts/libraries/LibPolynomial.sol#112) is a local variable never initialized
LibPolynomial.evaluatePolynomial(bytes,uint256,uint256,uint256).degree (contracts/libraries/LibPolynomial.sol#75) is a local variable never initialized
ERC1155Upgradeable._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes).response (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#403) is a local variable never initialized
CurveFacet.removeLiquidityImbalance(address,address,uint256[],uint256,LibTransfer.From,LibTransfer.To).i (contracts/beanstalk/farm/CurveFacet.sol#261) is a local variable never initialized
MockPlainCurve.add_liquidity(uint256[2],uint256).i (contracts/mocks/curve/MockPlainCurve.sol#148) is a local variable never initialized
Fertilizer.__update(address,uint256[],uint256).i (contracts/tokens/Fertilizer/Fertilizer.sol#78) is a local variable never initialized
MockMeta3Curve.add_liquidity(uint256[2],uint256,address).i (contracts/mocks/curve/MockMeta3Curve.sol#220) is a local variable never initialized
MockMeta3Curve.remove_liquidity(uint256,uint256[2],address).i (contracts/mocks/curve/MockMeta3Curve.sol#280) is a local variable never initialized
ApprovalFacet.permitDeposits(address,address,address[],uint256[],uint256,uint8,bytes32,bytes32).i (contracts/beanstalk/silo/ApprovalFacet.sol#126) is a local variable never initialized
TokenFacet.getInternalBalances(address,IERC20[]).i (contracts/beanstalk/farm/TokenFacet.sol#279) is a local variable never initialized
MockPlainCurve._xp_mem(uint256[2],uint256[2]).i (contracts/mocks/curve/MockPlainCurve.sol#267) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
ERC1155Upgradeable._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#369-390) ignores return value by IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#380-388)
ERC1155Upgradeable._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#392-413) ignores return value by IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator,from,ids,amounts,data) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#403-411)
ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#362-383) ignores return value by IERC1155Receiver(to).onERC1155Received(operator,from,id,amount,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#373-381)
ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#385-406) ignores return value by IERC1155Receiver(to).onERC1155BatchReceived(operator,from,ids,amounts,data) (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#396-404)
ERC721._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#333-344) ignores return value by _holderTokens[to].add(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#339)
ERC721._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#333-344) ignores return value by _tokenOwners.set(tokenId,to) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#341)
ERC721._burn(uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#356-374) ignores return value by _holderTokens[owner].remove(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#369)
ERC721._burn(uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#356-374) ignores return value by _tokenOwners.remove(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#371)
ERC721._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#387-402) ignores return value by _holderTokens[from].remove(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#396)
ERC721._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#387-402) ignores return value by _holderTokens[to].add(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#397)
ERC721._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#387-402) ignores return value by _tokenOwners.set(tokenId,to) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#399)
FertilizerFacet.addFertilizerOwner(uint128,uint128,uint256) (contracts/beanstalk/barn/FertilizerFacet.sol#61-73) ignores return value by LibFertilizer.addFertilizer(id,amount,minLP) (contracts/beanstalk/barn/FertilizerFacet.sol#72)
CurveFacet.exchange(address,address,address,address,uint256,uint256,LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/CurveFacet.sol#33-66) ignores return value by ICurvePoolR(pool).exchange(i,j,amountIn,minAmountOut,msg.sender) (contracts/beanstalk/farm/CurveFacet.sol#52)
CurveFacet.exchangeUnderlying(address,address,address,uint256,uint256,LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/CurveFacet.sol#68-98) ignores return value by ICurvePoolR(pool).exchange_underlying(i,j,amountIn,minAmountOut,msg.sender) (contracts/beanstalk/farm/CurveFacet.sol#82-88)
CurveFacet.removeLiquidityOneToken(address,address,address,uint256,uint256,LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/CurveFacet.sol#306-354) ignores return value by ICurvePoolR(pool).remove_liquidity_one_coin(amountIn,i,minAmountOut,msg.sender) (contracts/beanstalk/farm/CurveFacet.sol#340-345)
TokenFacet.transferToken(IERC20,address,uint256,LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/TokenFacet.sol#56-71) ignores return value by LibTransfer.transferToken(token,msg.sender,recipient,amount,fromMode,toMode) (contracts/beanstalk/farm/TokenFacet.sol#63-70)
TokenFacet.transferInternalTokenFrom(IERC20,address,address,uint256,LibTransfer.To) (contracts/beanstalk/farm/TokenFacet.sol#77-96) ignores return value by LibTransfer.transferToken(token,sender,recipient,amount,LibTransfer.From.INTERNAL,toMode) (contracts/beanstalk/farm/TokenFacet.sol#84-91)
InitDiamond.init() (contracts/beanstalk/init/InitDiamond.sol#31-69) ignores return value by C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#38)
InitDiamond.init() (contracts/beanstalk/init/InitDiamond.sol#31-69) ignores return value by C.bean().approve(C.curveZapAddress(),type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#39)
InitDiamond.init() (contracts/beanstalk/init/InitDiamond.sol#31-69) ignores return value by C.usdc().approve(C.curveZapAddress(),type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#40)
MockInitDiamond.init() (contracts/mocks/MockInitDiamond.sol#25-61) ignores return value by C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#27)
MockInitDiamond.init() (contracts/mocks/MockInitDiamond.sol#25-61) ignores return value by C.bean().approve(C.curveZapAddress(),type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#28)
MockInitDiamond.init() (contracts/mocks/MockInitDiamond.sol#25-61) ignores return value by C.usdc().approve(C.curveZapAddress(),type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#29)
MockCurveZap.approve() (contracts/mocks/curve/MockCurveZap.sol#21-24) ignores return value by IERC20(BEAN).approve(BEAN_METAPOOL,type()(uint256).max) (contracts/mocks/curve/MockCurveZap.sol#22)
MockCurveZap.approve() (contracts/mocks/curve/MockCurveZap.sol#21-24) ignores return value by IERC20(THREE_CURVE).approve(BEAN_METAPOOL,type()(uint256).max) (contracts/mocks/curve/MockCurveZap.sol#23)
MockCurveZap.add_liquidity(address,uint256[4],uint256) (contracts/mocks/curve/MockCurveZap.sol#26-32) ignores return value by MockToken(THREE_CURVE).mint(address(this),threeCrvAmount) (contracts/mocks/curve/MockCurveZap.sol#30)
MockAdminFacet.forceSunrise() (contracts/mocks/mockFacets/MockAdminFacet.sol#37-41) ignores return value by sf.sunrise() (contracts/mocks/mockFacets/MockAdminFacet.sol#40)
MockSiloFacet.mockUnripeLPDeposit(uint256,uint32,uint256,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#40-56) ignores return value by LibTransfer.receiveToken(IERC20(C.UNRIPE_LP),unripeLP,msg.sender,LibTransfer.From.EXTERNAL) (contracts/mocks/mockFacets/MockSiloFacet.sol#55)
MockSiloFacet.mockUnripeBeanDeposit(uint32,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#58-70) ignores return value by LibTransfer.receiveToken(IERC20(C.UNRIPE_BEAN),amount,msg.sender,LibTransfer.From.EXTERNAL) (contracts/mocks/mockFacets/MockSiloFacet.sol#69)
Fertilizer1155.__doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes) (contracts/tokens/Fertilizer/Fertilizer1155.sol#100-119) ignores return value by IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data) (contracts/tokens/Fertilizer/Fertilizer1155.sol#109-117)
Fertilizer1155.__doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes) (contracts/tokens/Fertilizer/Fertilizer1155.sol#121-142) ignores return value by IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator,from,ids,amounts,data) (contracts/tokens/Fertilizer/Fertilizer1155.sol#130-140)
FertilizerPreMint.initialize(string) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#37-40) ignores return value by IERC20(WETH).approve(SWAP_ROUTER,type()(uint256).max) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#38)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
LibUnripeSilo.unripeLPDeposit(address,uint32).bdv (contracts/libraries/Silo/LibUnripeSilo.sol#182) is written in both
	(amount,bdv) = getBeanEthUnripeLP(account,season) (contracts/libraries/Silo/LibUnripeSilo.sol#188)
	bdv = uint256(s.a[account].legacyDeposits[C.UNRIPE_LP][season].bdv).add(legBdv) (contracts/libraries/Silo/LibUnripeSilo.sol#205-207)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#write-after-write
INFO:Detectors:
TokenFacet.permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32).s (contracts/beanstalk/farm/TokenFacet.sol#180) shadows:
	- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)
ApprovalFacet.permitDeposits(address,address,address[],uint256[],uint256,uint8,bytes32,bytes32).s (contracts/beanstalk/silo/ApprovalFacet.sol#123) shadows:
	- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)
ApprovalFacet.permitDeposit(address,address,address,uint256,uint256,uint8,bytes32,bytes32).s (contracts/beanstalk/silo/ApprovalFacet.sol#151) shadows:
	- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)
MigrationFacet.getDepositLegacy(address,address,uint32).s (contracts/beanstalk/silo/MigrationFacet.sol#95) shadows:
	- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)
LegacyClaimWithdrawalFacet.getWithdrawal(address,address,uint32).s (contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol#71) shadows:
	- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)
BeanstalkPrice.price().i (contracts/ecosystem/price/BeanstalkPrice.sol#21) shadows:
	- CurvePrice.i (contracts/ecosystem/price/CurvePrice.sol#32) (state variable)
MockToken.constructor(string,string).name (contracts/mocks/MockToken.sol#20) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#64-66) (function)
MockToken.constructor(string,string).symbol (contracts/mocks/MockToken.sol#20) shadows:
	- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#72-74) (function)
MockFundraiserFacet.createFundraiserE(address,address,uint256).fundraiser (contracts/mocks/mockFacets/MockFundraiserFacet.sol#21) shadows:
	- FundraiserFacet.fundraiser(uint32) (contracts/beanstalk/field/FundraiserFacet.sol#180-186) (function)
MockSeasonFacet.setNextSowTimeE(uint32).time (contracts/mocks/mockFacets/MockSeasonFacet.sol#151) shadows:
	- SeasonFacet.time() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#83-85) (function)
MockSeasonFacet.setCurrentSeasonE(uint32).season (contracts/mocks/mockFacets/MockSeasonFacet.sol#198) shadows:
	- SeasonFacet.season() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#69-71) (function)
MockSiloFacet.mintSeeds(address,uint256).s (contracts/mocks/mockFacets/MockSiloFacet.sol#161) shadows:
	- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)
MockSiloFacet.addDepositToAccountLegacy(address,address,uint32,uint256,uint256).s (contracts/mocks/mockFacets/MockSiloFacet.sol#196) shadows:
	- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)
MockSiloFacet.depositWithBDVLegacy(address,address,uint32,uint256,uint256).s (contracts/mocks/mockFacets/MockSiloFacet.sol#268) shadows:
	- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)
MockSiloFacet.beanDenominatedValueLegacy(address,uint256).s (contracts/mocks/mockFacets/MockSiloFacet.sol#285) shadows:
	- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)
MockSiloFacet.whitelistTokenLegacy(address,bytes4,uint32,uint32).s (contracts/mocks/mockFacets/MockSiloFacet.sol#325) shadows:
	- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)
MockSiloFacet.incrementTotalDepositedAmount(address,uint256).s (contracts/mocks/mockFacets/MockSiloFacet.sol#359) shadows:
	- ReentrancyGuard.s (contracts/beanstalk/ReentrancyGuard.sol#17) (state variable)
BeanstalkERC20.constructor(address,string,string).name (contracts/tokens/ERC20/BeanstalkERC20.sol#34) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#64-66) (function)
BeanstalkERC20.constructor(address,string,string).symbol (contracts/tokens/ERC20/BeanstalkERC20.sol#34) shadows:
	- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#72-74) (function)
ERC20Permit.constructor(string).name (contracts/tokens/ERC20/ERC20Permit.sol#39) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#64-66) (function)
FertilizerPreMint.initialize(string)._uri (contracts/tokens/Fertilizer/FertilizerPreMint.sol#37) shadows:
	- Internalizer._uri (contracts/tokens/Fertilizer/Internalizer.sol#39) (state variable)
	- ERC1155Upgradeable._uri (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#33) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
MockContract.setAccount(address)._account (contracts/mocks/MockContract.sol#16) lacks a zero-check on :
		- account = _account (contracts/mocks/MockContract.sol#17)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
MockMeta3Curve.constructor(address,address,address).base_pool (contracts/mocks/curve/MockMeta3Curve.sol#65) lacks a zero-check on :
		- BASE_POOL = base_pool (contracts/mocks/curve/MockMeta3Curve.sol#68)
MockMeta3Curve.init(address,address,address).base_pool (contracts/mocks/curve/MockMeta3Curve.sol#71) lacks a zero-check on :
		- BASE_POOL = base_pool (contracts/mocks/curve/MockMeta3Curve.sol#74)
MockUniswapV3Factory.setOwner(address)._owner (contracts/mocks/uniswap/MockUniswapV3Factory.sol#54) lacks a zero-check on :
		- owner = _owner (contracts/mocks/uniswap/MockUniswapV3Factory.sol#57)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/CurveFacet.sol#159-234) has external calls inside a loop: beforeAmounts[i] = IERC20(coins[i]).balanceOf(address(this)) (contracts/beanstalk/farm/CurveFacet.sol#179)
CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/CurveFacet.sol#159-234) has external calls inside a loop: amountOut = IERC20(coins[i_scope_0]).balanceOf(address(this)).sub(beforeAmounts[i_scope_0]) (contracts/beanstalk/farm/CurveFacet.sol#185)
FarmFacet._farm(bytes) (contracts/beanstalk/farm/FarmFacet.sol#81-87) has external calls inside a loop: (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#85)
FarmFacet._farmMem(bytes) (contracts/beanstalk/farm/FarmFacet.sol#90-96) has external calls inside a loop: (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#94)
TokenFacet.getExternalBalance(address,IERC20) (contracts/beanstalk/farm/TokenFacet.sol#289-295) has external calls inside a loop: balance = token.balanceOf(account) (contracts/beanstalk/farm/TokenFacet.sol#294)
LibBalance.getBalance(address,IERC20) (contracts/libraries/Token/LibBalance.sol#39-48) has external calls inside a loop: balance = token.balanceOf(account).add(getInternalBalance(account,token)) (contracts/libraries/Token/LibBalance.sol#44-46)
Depot.farm(bytes[]) (contracts/depot/Depot.sol#43-54) has external calls inside a loop: (success,result) = address(this).delegatecall(data[i]) (contracts/depot/Depot.sol#50)
MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264) has external calls inside a loop: IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockMeta3Curve.sol#256)
MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293) has external calls inside a loop: ERC20(coins[i]).transfer(_receiver,value) (contracts/mocks/curve/MockMeta3Curve.sol#286)
MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351) has external calls inside a loop: ERC20(coins[i_scope_1]).transfer(_receiver,amount) (contracts/mocks/curve/MockMeta3Curve.sol#347)
MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193) has external calls inside a loop: IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockPlainCurve.sol#185)
Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280) has external calls inside a loop: C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)
Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280) has external calls inside a loop: amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)
Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280) has external calls inside a loop: C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)
LibMetaCurve.getXP(uint256[2],uint256) (contracts/libraries/Curve/LibMetaCurve.sol#31-40) has external calls inside a loop: LibCurve.getXP(balances,padding,C.curve3Pool().get_virtual_price()) (contracts/libraries/Curve/LibMetaCurve.sol#35-39)
LibMetaCurve.getDFroms(address,uint256[2],uint256) (contracts/libraries/Curve/LibMetaCurve.sol#45-54) has external calls inside a loop: LibCurve.getD(getXP(balances,padding),IMeta3Curve(pool).A_precise()) (contracts/libraries/Curve/LibMetaCurve.sol#50-53)
LibBeanMetaCurve.getDeltaB() (contracts/libraries/Curve/LibBeanMetaCurve.sol#47-51) has external calls inside a loop: balances = C.curveMetapool().get_balances() (contracts/libraries/Curve/LibBeanMetaCurve.sol#48)
MockSeasonFacet.resetState() (contracts/mocks/mockFacets/MockSeasonFacet.sol#163-190) has external calls inside a loop: MockToken(s.fundraisers[i_scope_0].token).burn(MockToken(s.fundraisers[i_scope_0].token).balanceOf(address(this))) (contracts/mocks/mockFacets/MockSeasonFacet.sol#170)
MockSeasonFacet.resetPools(address[]) (contracts/mocks/mockFacets/MockSeasonFacet.sol#245-249) has external calls inside a loop: ResetPool(pools[i]).reset_cumulative() (contracts/mocks/mockFacets/MockSeasonFacet.sol#247)
Pipeline._pipe(address,bytes,uint256) (contracts/pipeline/Pipeline.sol#69-77) has external calls inside a loop: (success,result) = target.call{value: value}(data) (contracts/pipeline/Pipeline.sol#75)
Pipeline._pipeMem(address,bytes,uint256) (contracts/pipeline/Pipeline.sol#80-88) has external calls inside a loop: (success,result) = target.call{value: value}(data) (contracts/pipeline/Pipeline.sol#86)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in FieldFacet._sow(uint256,uint256,bool,LibTransfer.From) (contracts/beanstalk/field/FieldFacet.sol#135-142):
	External calls:
	- beans = LibTransfer.burnToken(C.bean(),beans,msg.sender,mode) (contracts/beanstalk/field/FieldFacet.sol#139)
	State variables written after the call(s):
	- s.f.beanSown = s.f.beanSown + SafeCast.toUint128(beans) (contracts/beanstalk/field/FieldFacet.sol#141)
Reentrancy in MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264):
	External calls:
	- IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockMeta3Curve.sol#256)
	State variables written after the call(s):
	- _balanceOf[_receiver] += mint_amount (contracts/mocks/curve/MockMeta3Curve.sol#260)
Reentrancy in MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193):
	External calls:
	- IBean(coins[i_scope_1]).transferFrom(msg.sender,address(this),amount_scope_2) (contracts/mocks/curve/MockPlainCurve.sol#185)
	State variables written after the call(s):
	- _balanceOf[msg.sender] += mint_amount (contracts/mocks/curve/MockPlainCurve.sol#189)
Reentrancy in MockAdminFacet.fertilize(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#27-30):
	External calls:
	- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#28)
	State variables written after the call(s):
	- rewardToFertilizer(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#29)
		- s.bpf = uint128(firstEndBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#139)
		- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#140)
		- s.bpf = uint128(newTotalBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#153)
		- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#155)
Reentrancy in MarketplaceFacet.fillPodListing(Listing.PodListing,uint256,LibTransfer.From) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#65-79):
	External calls:
	- beanAmount = LibTransfer.transferToken(C.bean(),msg.sender,l.account,beanAmount,mode,l.mode) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#70-77)
	State variables written after the call(s):
	- _fillListing(l,beanAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#78)
		- s.a[account].field.plots[id] = amount (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#71)
		- delete s.podListings[l.index] (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#189)
		- delete s.a[account].field.plots[id] (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#81)
		- s.a[account].field.plots[id] = start (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#82)
		- s.podListings[l.index.add(amount).add(l.start)] = hashListing(0,l.amount.sub(amount),l.pricePerPod,l.maxHarvestableIndex,l.minFillAmount,l.mode) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#192-199)
		- s.a[account].field.plots[id.add(end)] = amount.sub(end) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#84)
Reentrancy in MarketplaceFacet.fillPodListingV2(Listing.PodListing,uint256,bytes,LibTransfer.From) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#81-96):
	External calls:
	- beanAmount = LibTransfer.transferToken(C.bean(),msg.sender,l.account,beanAmount,mode,l.mode) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#87-94)
	State variables written after the call(s):
	- _fillListingV2(l,beanAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#95)
		- s.a[account].field.plots[id] = amount (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#71)
		- delete s.a[account].field.plots[id] (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#81)
		- delete s.podListings[l.index] (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#215)
		- s.a[account].field.plots[id] = start (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#82)
		- s.podListings[l.index.add(amount).add(l.start)] = hashListingV2(0,l.amount.sub(amount),l.pricePerPod,l.maxHarvestableIndex,l.minFillAmount,pricingFunction,l.mode) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#218-226)
		- s.a[account].field.plots[id.add(end)] = amount.sub(end) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#84)
Reentrancy in MockUniswapV3Pool.flash(address,uint256,uint256,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#800-843):
	External calls:
	- TransferHelper.safeTransfer(token0,recipient,amount0) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#814)
	- TransferHelper.safeTransfer(token1,recipient,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#815)
	- IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0,fee1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#817)
	State variables written after the call(s):
	- feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0,FixedPoint128.Q128,_liquidity) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#833)
	- feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1,FixedPoint128.Q128,_liquidity) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#839)
	- protocolFees.token0 += uint128(fees0) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#832)
	- protocolFees.token1 += uint128(fees1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#838)
Reentrancy in MockFieldFacet.incrementTotalHarvestableE(uint256) (contracts/mocks/mockFacets/MockFieldFacet.sol#24-27):
	External calls:
	- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockFieldFacet.sol#25)
	State variables written after the call(s):
	- s.f.harvestable = s.f.harvestable.add(amount) (contracts/mocks/mockFacets/MockFieldFacet.sol#26)
Reentrancy in InitDiamond.init() (contracts/beanstalk/init/InitDiamond.sol#31-69):
	External calls:
	- C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#38)
	- C.bean().approve(C.curveZapAddress(),type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#39)
	- C.usdc().approve(C.curveZapAddress(),type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#40)
	State variables written after the call(s):
	- s.cases = s.cases = (int8(3),1,0,0,- 1,- 3,- 3,0,3,1,0,0,- 1,- 3,- 3,0,3,3,1,0,0,- 1,- 3,0,3,3,1,0,0,- 1,- 3,0) (contracts/beanstalk/init/InitDiamond.sol#42-52)
	- s.w.t = 1 (contracts/beanstalk/init/InitDiamond.sol#53)
	- s.season.current = 1 (contracts/beanstalk/init/InitDiamond.sol#55)
	- s.season.withdrawSeasons = 25 (contracts/beanstalk/init/InitDiamond.sol#56)
	- s.season.period = C.getSeasonPeriod() (contracts/beanstalk/init/InitDiamond.sol#57)
	- s.season.timestamp = block.timestamp (contracts/beanstalk/init/InitDiamond.sol#58)
	- s.w.thisSowTime = type()(uint32).max (contracts/beanstalk/init/InitDiamond.sol#63)
	- s.w.lastSowTime = type()(uint32).max (contracts/beanstalk/init/InitDiamond.sol#64)
	- s.isFarm = 1 (contracts/beanstalk/init/InitDiamond.sol#65)
	- s.season.start = (block.timestamp / s.season.period) * s.season.period (contracts/beanstalk/init/InitDiamond.sol#59-61)
	- s.season.start = block.timestamp (contracts/beanstalk/init/InitDiamond.sol#59-61)
Reentrancy in InitHotFix5.init() (contracts/beanstalk/init/InitHotFix5.sol#28-39):
	External calls:
	- IBs(address(this)).updateSilo(AFFECTED_ADDRESS) (contracts/beanstalk/init/InitHotFix5.sol#30)
	State variables written after the call(s):
	- s.a[AFFECTED_ADDRESS].roots = s.a[AFFECTED_ADDRESS].roots.add(diffRoots) (contracts/beanstalk/init/InitHotFix5.sol#37)
	- s.s.roots = s.s.roots.add(diffRoots) (contracts/beanstalk/init/InitHotFix5.sol#38)
Reentrancy in MockInitDiamond.init() (contracts/mocks/MockInitDiamond.sol#25-61):
	External calls:
	- C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#27)
	- C.bean().approve(C.curveZapAddress(),type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#28)
	- C.usdc().approve(C.curveZapAddress(),type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#29)
	State variables written after the call(s):
	- s.cases = s.cases = (int8(3),1,0,0,- 1,- 3,- 3,0,3,1,0,0,- 1,- 3,- 3,0,3,3,1,0,0,- 1,- 3,0,3,3,1,0,0,- 1,- 3,0) (contracts/mocks/MockInitDiamond.sol#31-41)
	- s.w.t = 1 (contracts/mocks/MockInitDiamond.sol#42)
	- s.w.thisSowTime = type()(uint32).max (contracts/mocks/MockInitDiamond.sol#44)
	- s.w.lastSowTime = type()(uint32).max (contracts/mocks/MockInitDiamond.sol#45)
	- s.season.current = 1 (contracts/mocks/MockInitDiamond.sol#51)
	- s.season.withdrawSeasons = 25 (contracts/mocks/MockInitDiamond.sol#52)
	- s.season.period = C.getSeasonPeriod() (contracts/mocks/MockInitDiamond.sol#53)
	- s.season.timestamp = block.timestamp (contracts/mocks/MockInitDiamond.sol#54)
	- s.isFarm = 1 (contracts/mocks/MockInitDiamond.sol#58)
	- s.season.start = (block.timestamp / s.season.period) * s.season.period (contracts/mocks/MockInitDiamond.sol#55-57)
	- s.season.start = block.timestamp (contracts/mocks/MockInitDiamond.sol#55-57)
Reentrancy in FertilizerPreMint.initialize(string) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#37-40):
	External calls:
	- IERC20(WETH).approve(SWAP_ROUTER,type()(uint256).max) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#38)
	State variables written after the call(s):
	- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)
		- _owner = msgSender (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#34)
	- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)
		- _status = _NOT_ENTERED (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#44)
	- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)
		- _supportedInterfaces[interfaceId] = true (node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#57)
	- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)
		- _uri = newuri (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#236)
Reentrancy in MockSeasonFacet.mockStepSilo(uint256) (contracts/mocks/mockFacets/MockSeasonFacet.sol#48-51):
	External calls:
	- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#49)
	State variables written after the call(s):
	- rewardToSilo(amount) (contracts/mocks/mockFacets/MockSeasonFacet.sol#50)
		- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)
		- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)
		- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)
		- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)
		- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)
		- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)
Reentrancy in MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293):
	External calls:
	- ERC20(coins[i]).transfer(_receiver,value) (contracts/mocks/curve/MockMeta3Curve.sol#286)
	State variables written after the call(s):
	- _balanceOf[msg.sender] -= _burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#290)
Reentrancy in MockMeta3Curve.reset() (contracts/mocks/curve/MockMeta3Curve.sol#154-160):
	External calls:
	- MockToken(coins[0]).burn(MockToken(coins[0]).balanceOf(address(this))) (contracts/mocks/curve/MockMeta3Curve.sol#157)
	- MockToken(coins[1]).burn(MockToken(coins[1]).balanceOf(address(this))) (contracts/mocks/curve/MockMeta3Curve.sol#158)
	State variables written after the call(s):
	- reset_cumulative() (contracts/mocks/curve/MockMeta3Curve.sol#159)
		- price_cumulative_last = balances (contracts/mocks/curve/MockMeta3Curve.sol#129)
	- reset_cumulative() (contracts/mocks/curve/MockMeta3Curve.sol#159)
		- timestamp_last = block.timestamp (contracts/mocks/curve/MockMeta3Curve.sol#128)
Reentrancy in MockPlainCurve.reset() (contracts/mocks/curve/MockPlainCurve.sol#126-132):
	External calls:
	- MockToken(coins[0]).burn(MockToken(coins[0]).balanceOf(address(this))) (contracts/mocks/curve/MockPlainCurve.sol#129)
	- MockToken(coins[1]).burn(MockToken(coins[1]).balanceOf(address(this))) (contracts/mocks/curve/MockPlainCurve.sol#130)
	State variables written after the call(s):
	- reset_cumulative() (contracts/mocks/curve/MockPlainCurve.sol#131)
		- price_cumulative_last = balances (contracts/mocks/curve/MockPlainCurve.sol#115)
	- reset_cumulative() (contracts/mocks/curve/MockPlainCurve.sol#131)
		- timestamp_last = block.timestamp (contracts/mocks/curve/MockPlainCurve.sol#114)
Reentrancy in Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111):
	External calls:
	- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)
	State variables written after the call(s):
	- newFertilized = rewardToFertilizer(newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#97)
		- s.bpf = uint128(firstEndBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#139)
		- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#140)
		- s.bpf = uint128(newTotalBpf) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#153)
		- s.fertilizedIndex = s.fertilizedIndex.add(newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#155)
	- newHarvestable = rewardToHarvestable(newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#103)
		- s.f.harvestable = s.f.harvestable.add(newHarvestable) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#171)
	- rewardToSilo(newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#108)
		- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)
		- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)
		- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)
		- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)
		- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)
		- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)
Reentrancy in MockAdminFacet.rewardSilo(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#32-35):
	External calls:
	- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#33)
	State variables written after the call(s):
	- rewardToSilo(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#34)
		- s.earnedBeans = s.earnedBeans.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#185)
		- s.s.stalk = s.s.stalk.add(seasonStalk) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#194)
		- s.newEarnedStalk = seasonStalk.toUint128() (contracts/beanstalk/sun/SeasonFacet/Sun.sol#199)
		- s.vestingPeriodRoots = 0 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#200)
		- s.siloBalances[C.BEAN].deposited = s.siloBalances[C.BEAN].deposited.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#203-206)
		- s.siloBalances[C.BEAN].depositedBdv = s.siloBalances[C.BEAN].depositedBdv.add(uint128(amount)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#208-211)
Reentrancy in MockAdminFacet.ripen(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#22-25):
	External calls:
	- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#23)
	State variables written after the call(s):
	- rewardToHarvestable(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#24)
		- s.f.harvestable = s.f.harvestable.add(newHarvestable) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#171)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in Fertilizer._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes) (contracts/tokens/Fertilizer/Fertilizer.sol#51-62):
	External calls:
	- _update(from,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#60)
		- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)
	- _update(to,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#61)
		- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)
	Event emitted after the call(s):
	- ClaimFertilizer(ids,beans) (contracts/tokens/Fertilizer/Fertilizer.sol#86)
		- _update(to,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#61)
Reentrancy in Order._cancelPodOrder(uint24,uint256,uint256,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#150-161):
	External calls:
	- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#158)
	Event emitted after the call(s):
	- PodOrderCancelled(msg.sender,id) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#160)
Reentrancy in Order._cancelPodOrderV2(uint256,uint256,bytes,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#163-175):
	External calls:
	- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#171)
	Event emitted after the call(s):
	- PodOrderCancelled(msg.sender,id) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#174)
Reentrancy in Silo._claimPlenty(address) (contracts/beanstalk/silo/SiloFacet/Silo.sol#149-156):
	External calls:
	- C.threeCrv().safeTransfer(account,plenty) (contracts/beanstalk/silo/SiloFacet/Silo.sol#152)
	Event emitted after the call(s):
	- ClaimPlenty(account,plenty) (contracts/beanstalk/silo/SiloFacet/Silo.sol#155)
Reentrancy in Order._createPodOrder(uint256,uint24,uint256,uint256) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#56-72):
	External calls:
	- _cancelPodOrder(pricePerPod,maxPlaceInLine,minFillAmount,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#67)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#158)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)
	External calls sending eth:
	- _cancelPodOrder(pricePerPod,maxPlaceInLine,minFillAmount,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#67)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- PodOrderCreated(msg.sender,id,beanAmount,pricePerPod,maxPlaceInLine,minFillAmount,emptyPricingFunction,LibPolynomial.PriceType.Fixed) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#71)
Reentrancy in Order._createPodOrderV2(uint256,uint256,uint256,bytes) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#74-86):
	External calls:
	- _cancelPodOrderV2(maxPlaceInLine,minFillAmount,pricingFunction,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#82)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#171)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)
	External calls sending eth:
	- _cancelPodOrderV2(maxPlaceInLine,minFillAmount,pricingFunction,LibTransfer.To.INTERNAL) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#82)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- PodOrderCreated(msg.sender,id,beanAmount,0,maxPlaceInLine,minFillAmount,pricingFunction,LibPolynomial.PriceType.Dynamic) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#85)
Reentrancy in Order._fillPodOrder(Order.PodOrder,uint256,uint256,uint256,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#92-117):
	External calls:
	- LibTransfer.sendToken(C.bean(),costInBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#108)
	Event emitted after the call(s):
	- PlotTransfer(from,to,index.add(start),amount) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#63)
		- _transferPlot(msg.sender,o.account,index,start,amount) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#112)
	- PodListingCancelled(account,index) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#244)
		- _cancelPodListing(msg.sender,index) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#110)
	- PodOrderFilled(msg.sender,o.account,id,index,start,amount,costInBeans) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#116)
Reentrancy in Order._fillPodOrderV2(Order.PodOrder,uint256,uint256,uint256,bytes,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#119-145):
	External calls:
	- LibTransfer.sendToken(C.bean(),costInBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#136)
	Event emitted after the call(s):
	- PlotTransfer(from,to,index.add(start),amount) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#63)
		- _transferPlot(msg.sender,o.account,index,start,amount) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#140)
	- PodListingCancelled(account,index) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#244)
		- _cancelPodListing(msg.sender,index) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#138)
	- PodOrderFilled(msg.sender,o.account,id,index,start,amount,costInBeans) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#144)
Reentrancy in LibFertilizer.addFertilizer(uint128,uint128,uint256) (contracts/libraries/LibFertilizer.sol#32-56):
	External calls:
	- addUnderlying(_amount.mul(DECIMALS),minLP) (contracts/libraries/LibFertilizer.sol#50)
		- C.bean().mint(address(this),newDepositedBeans.add(newDepositedLPBeans)) (contracts/libraries/LibFertilizer.sol#90-93)
		- newLP = C.curveZap().add_liquidity(C.CURVE_BEAN_METAPOOL,(newDepositedLPBeans,0,amount,0),minAmountOut) (contracts/libraries/LibFertilizer.sol#95-99)
	Event emitted after the call(s):
	- SetFertilizer(id,bpf) (contracts/libraries/LibFertilizer.sol#55)
Reentrancy in Fertilizer.beanstalkMint(address,uint256,uint128,uint128) (contracts/tokens/Fertilizer/Fertilizer.sol#36-49):
	External calls:
	- _update(account,ids,bpf) (contracts/tokens/Fertilizer/Fertilizer.sol#40)
		- IBS(owner()).payFertilizer(account,amount) (contracts/tokens/Fertilizer/Fertilizer.sol#70)
	- _safeMint(account,id,amount,bytes(0)) (contracts/tokens/Fertilizer/Fertilizer.sol#43-48)
		- IERC1155ReceiverUpgradeable(to).onERC1155Received(operator,from,id,amount,data) (contracts/tokens/Fertilizer/Fertilizer1155.sol#109-117)
	Event emitted after the call(s):
	- TransferSingle(operator,address(0),to,id,amount) (contracts/tokens/Fertilizer/Fertilizer1155.sol#91)
		- _safeMint(account,id,amount,bytes(0)) (contracts/tokens/Fertilizer/Fertilizer.sol#43-48)
Reentrancy in MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#499-522):
	External calls:
	- TransferHelper.safeTransfer(token0,recipient,amount0) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#514)
	- TransferHelper.safeTransfer(token1,recipient,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#518)
	Event emitted after the call(s):
	- Collect(msg.sender,recipient,tickLower,tickUpper,amount0,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#521)
Reentrancy in MockUniswapV3Pool.collectProtocol(address,uint128,uint128) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#857-877):
	External calls:
	- TransferHelper.safeTransfer(token0,recipient,amount0) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#868)
	- TransferHelper.safeTransfer(token1,recipient,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#873)
	Event emitted after the call(s):
	- CollectProtocol(msg.sender,recipient,amount0,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#876)
Reentrancy in FundraiserFacet.createFundraiser(address,address,uint256) (contracts/beanstalk/field/FundraiserFacet.sol#66-94):
	External calls:
	- C.bean().mint(address(this),amount) (contracts/beanstalk/field/FundraiserFacet.sol#91)
	Event emitted after the call(s):
	- CreateFundraiser(id,payee,token,amount) (contracts/beanstalk/field/FundraiserFacet.sol#93)
Reentrancy in MarketplaceFacet.createPodOrder(uint256,uint24,uint256,uint256,LibTransfer.From) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#113-122):
	External calls:
	- beanAmount = LibTransfer.receiveToken(C.bean(),beanAmount,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#120)
	- _createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#121)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#158)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)
	External calls sending eth:
	- _createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#121)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- InternalBalanceChanged(account,token,delta) (contracts/libraries/Token/LibBalance.sol#102)
		- _createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#121)
	- PodOrderCancelled(msg.sender,id) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#160)
		- _createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#121)
	- PodOrderCreated(msg.sender,id,beanAmount,pricePerPod,maxPlaceInLine,minFillAmount,emptyPricingFunction,LibPolynomial.PriceType.Fixed) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#71)
		- _createPodOrder(beanAmount,pricePerPod,maxPlaceInLine,minFillAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#121)
Reentrancy in MarketplaceFacet.createPodOrderV2(uint256,uint256,uint256,bytes,LibTransfer.From) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#124-133):
	External calls:
	- beanAmount = LibTransfer.receiveToken(C.bean(),beanAmount,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#131)
	- _createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#132)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- LibTransfer.sendToken(C.bean(),amountBeans,msg.sender,mode) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#171)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)
	External calls sending eth:
	- _createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#132)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- InternalBalanceChanged(account,token,delta) (contracts/libraries/Token/LibBalance.sol#102)
		- _createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#132)
	- PodOrderCancelled(msg.sender,id) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#174)
		- _createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#132)
	- PodOrderCreated(msg.sender,id,beanAmount,0,maxPlaceInLine,minFillAmount,pricingFunction,LibPolynomial.PriceType.Dynamic) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#85)
		- _createPodOrderV2(beanAmount,maxPlaceInLine,minFillAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#132)
Reentrancy in MarketplaceFacet.fillPodListing(Listing.PodListing,uint256,LibTransfer.From) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#65-79):
	External calls:
	- beanAmount = LibTransfer.transferToken(C.bean(),msg.sender,l.account,beanAmount,mode,l.mode) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#70-77)
	Event emitted after the call(s):
	- PlotTransfer(from,to,index.add(start),amount) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#63)
		- _fillListing(l,beanAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#78)
	- PodListingFilled(l.account,to,l.index,l.start,amount,beanAmount) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#202)
		- _fillListing(l,beanAmount) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#78)
Reentrancy in MarketplaceFacet.fillPodListingV2(Listing.PodListing,uint256,bytes,LibTransfer.From) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#81-96):
	External calls:
	- beanAmount = LibTransfer.transferToken(C.bean(),msg.sender,l.account,beanAmount,mode,l.mode) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#87-94)
	Event emitted after the call(s):
	- PlotTransfer(from,to,index.add(start),amount) (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#63)
		- _fillListingV2(l,beanAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#95)
	- PodListingFilled(l.account,to,l.index,l.start,amount,beanAmount) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#229)
		- _fillListingV2(l,beanAmount,pricingFunction) (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#95)
Reentrancy in MockUniswapV3Pool.flash(address,uint256,uint256,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#800-843):
	External calls:
	- TransferHelper.safeTransfer(token0,recipient,amount0) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#814)
	- TransferHelper.safeTransfer(token1,recipient,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#815)
	- IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0,fee1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#817)
	Event emitted after the call(s):
	- Flash(msg.sender,recipient,amount0,amount1,paid0,paid1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#842)
Reentrancy in SeasonFacet.gm(address,LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#47-62):
	External calls:
	- caseId = stepWeather(deltaB) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#58)
		- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)
		- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)
		- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)
	- stepSun(deltaB,caseId) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#59)
		- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)
	Event emitted after the call(s):
	- Reward(s.season.current,newHarvestable,newSupply,newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#110)
		- stepSun(deltaB,caseId) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#59)
	- Soil(s.season.current,amount.toUint128()) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#239)
		- stepSun(deltaB,caseId) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#59)
Reentrancy in SeasonFacet.gm(address,LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#47-62):
	External calls:
	- caseId = stepWeather(deltaB) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#58)
		- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)
		- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)
		- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)
	- stepSun(deltaB,caseId) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#59)
		- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)
	- incentivize(account,initialGasLeft,balances,mode) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#61)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token.mint(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#110)
		- LibTransfer.mintToken(C.bean(),incentiveAmount,account,mode) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#146)
		- token.mint(address(this),amount) (contracts/libraries/Token/LibTransfer.sol#112)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)
	External calls sending eth:
	- incentivize(account,initialGasLeft,balances,mode) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#61)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Incentivization(account,incentiveAmount) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#148)
		- incentivize(account,initialGasLeft,balances,mode) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#61)
	- InternalBalanceChanged(account,token,delta) (contracts/libraries/Token/LibBalance.sol#102)
		- incentivize(account,initialGasLeft,balances,mode) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#61)
Reentrancy in SeasonFacet.incentivize(address,uint256,uint256[2],LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#131-150):
	External calls:
	- LibTransfer.mintToken(C.bean(),incentiveAmount,account,mode) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#146)
	Event emitted after the call(s):
	- Incentivization(account,incentiveAmount) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#148)
Reentrancy in InitDiamond.init() (contracts/beanstalk/init/InitDiamond.sol#31-69):
	External calls:
	- C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#38)
	- C.bean().approve(C.curveZapAddress(),type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#39)
	- C.usdc().approve(C.curveZapAddress(),type()(uint256).max) (contracts/beanstalk/init/InitDiamond.sol#40)
	- C.bean().mint(msg.sender,LibIncentive.MAX_REWARD) (contracts/beanstalk/init/InitDiamond.sol#67)
	Event emitted after the call(s):
	- Incentivization(msg.sender,LibIncentive.MAX_REWARD) (contracts/beanstalk/init/InitDiamond.sol#68)
Reentrancy in MockInitDiamond.init() (contracts/mocks/MockInitDiamond.sol#25-61):
	External calls:
	- C.bean().approve(C.CURVE_BEAN_METAPOOL,type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#27)
	- C.bean().approve(C.curveZapAddress(),type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#28)
	- C.usdc().approve(C.curveZapAddress(),type()(uint256).max) (contracts/mocks/MockInitDiamond.sol#29)
	Event emitted after the call(s):
	- WhitelistToken(token,selector,stalkEarnedPerSeason,stalkIssuedPerBdv) (contracts/libraries/Silo/LibLegacyWhitelist.sol#56)
		- whitelistPools() (contracts/mocks/MockInitDiamond.sol#60)
Reentrancy in FertilizerPreMint.initialize(string) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#37-40):
	External calls:
	- IERC20(WETH).approve(SWAP_ROUTER,type()(uint256).max) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#38)
	Event emitted after the call(s):
	- OwnershipTransferred(address(0),msgSender) (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#35)
		- __Internallize_init(_uri) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#39)
Reentrancy in MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#466-496):
	External calls:
	- IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0,amount1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#491)
	Event emitted after the call(s):
	- Mint(msg.sender,recipient,tickLower,tickUpper,amount,amount0,amount1) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#495)
Reentrancy in LibTransfer.mintToken(IBean,uint256,address,LibTransfer.To) (contracts/libraries/Token/LibTransfer.sol#103-115):
	External calls:
	- token.mint(address(this),amount) (contracts/libraries/Token/LibTransfer.sol#112)
	- LibTransfer.sendToken(token,amount,recipient,mode) (contracts/libraries/Token/LibTransfer.sol#113)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)
	External calls sending eth:
	- LibTransfer.sendToken(token,amount,recipient,mode) (contracts/libraries/Token/LibTransfer.sol#113)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- InternalBalanceChanged(account,token,delta) (contracts/libraries/Token/LibBalance.sol#102)
		- LibTransfer.sendToken(token,amount,recipient,mode) (contracts/libraries/Token/LibTransfer.sol#113)
Reentrancy in Sun.rewardBeans(uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#90-111):
	External calls:
	- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)
	Event emitted after the call(s):
	- Reward(s.season.current,newHarvestable,newSupply,newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#110)
Reentrancy in MockAdminFacet.rewardSunrise(uint256) (contracts/mocks/mockFacets/MockAdminFacet.sol#43-48):
	External calls:
	- C.bean().mint(address(this),amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#46)
	- rewardBeans(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#47)
		- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)
	Event emitted after the call(s):
	- Reward(s.season.current,newHarvestable,newSupply,newFertilized) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#110)
		- rewardBeans(amount) (contracts/mocks/mockFacets/MockAdminFacet.sol#47)
Reentrancy in Weather.sop() (contracts/beanstalk/sun/SeasonFacet/Weather.sol#259-280):
	External calls:
	- C.bean().mint(address(this),newHarvestable.add(sopBeans)) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#270)
	- C.bean().mint(address(this),sopBeans) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#272)
	- amountOut = C.curveMetapool().exchange(0,1,sopBeans,0) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#276)
	Event emitted after the call(s):
	- SeasonOfPlenty(s.season.current,amountOut,newHarvestable) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#279)
Reentrancy in Sun.stepSun(int256,uint256) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#70-83):
	External calls:
	- newHarvestable = rewardBeans(uint256(deltaB)) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#73)
		- C.bean().mint(address(this),newSupply) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#93)
	Event emitted after the call(s):
	- Soil(s.season.current,amount.toUint128()) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#239)
		- setSoilAbovePeg(newHarvestable,caseId) (contracts/beanstalk/sun/SeasonFacet/Sun.sol#74)
Reentrancy in MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797):
	External calls:
	- TransferHelper.safeTransfer(token1,recipient,uint256(- amount1)) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#782)
	- IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#785)
	- TransferHelper.safeTransfer(token0,recipient,uint256(- amount0)) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#788)
	- IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#791)
	Event emitted after the call(s):
	- Swap(msg.sender,recipient,amount0,amount1,state.sqrtPriceX96,state.liquidity,state.tick) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#795)
Reentrancy in LibTransfer.transferToken(IERC20,address,address,uint256,LibTransfer.From,LibTransfer.To) (contracts/libraries/Token/LibTransfer.sol#30-46):
	External calls:
	- amount = receiveToken(token,amount,sender,fromMode) (contracts/libraries/Token/LibTransfer.sol#43)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- token.safeTransferFrom(sender,address(this),amount - receivedAmount) (contracts/libraries/Token/LibTransfer.sol#66)
	- sendToken(token,amount,recipient,toMode) (contracts/libraries/Token/LibTransfer.sol#44)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- token.safeTransfer(recipient,amount) (contracts/libraries/Token/LibTransfer.sol#82)
	External calls sending eth:
	- amount = receiveToken(token,amount,sender,fromMode) (contracts/libraries/Token/LibTransfer.sol#43)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- sendToken(token,amount,recipient,toMode) (contracts/libraries/Token/LibTransfer.sol#44)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- InternalBalanceChanged(account,token,delta) (contracts/libraries/Token/LibBalance.sol#102)
		- sendToken(token,amount,recipient,toMode) (contracts/libraries/Token/LibTransfer.sol#44)
Reentrancy in MockWETH.withdraw(uint256) (contracts/mocks/MockWETH.sol#27-33):
	External calls:
	- (success) = msg.sender.call{value: wad}() (contracts/mocks/MockWETH.sol#30)
	Event emitted after the call(s):
	- Withdrawal(msg.sender,wad) (contracts/mocks/MockWETH.sol#32)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
OracleLibrary.getBlockStartingTickAndLiquidity(address) (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#93-126) uses timestamp for comparisons
	Dangerous comparisons:
	- observationTimestamp != uint32(block.timestamp) (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#104)
PauseFacet.pause() (contracts/beanstalk/diamond/PauseFacet.sol#28-35) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(! s.paused,Pause: already paused.) (contracts/beanstalk/diamond/PauseFacet.sol#30)
PauseFacet.unpause() (contracts/beanstalk/diamond/PauseFacet.sol#37-45) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(s.paused,Pause: not paused.) (contracts/beanstalk/diamond/PauseFacet.sol#39)
FundraiserFacet._completeFundraiser(uint32) (contracts/beanstalk/field/FundraiserFacet.sol#150-164) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp != s.fundraisers[id].start,Fundraiser: start block) (contracts/beanstalk/field/FundraiserFacet.sol#153-156)
SeasonFacet.gm(address,LibTransfer.To) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#47-62) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(seasonTime() > season(),Season: Still current Season.) (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#54)
SeasonFacet.seasonTime() (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#105-109) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < s.season.start (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#106)
LibSiloPermit.permit(address,address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/libraries/Silo/LibSiloPermit.sol#57-82) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= deadline,Silo: permit expired deadline) (contracts/libraries/Silo/LibSiloPermit.sol#67)
LibSiloPermit.permits(address,address,address[],uint256[],uint256,uint8,bytes32,bytes32) (contracts/libraries/Silo/LibSiloPermit.sol#93-118) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= deadline,Silo: permit expired deadline) (contracts/libraries/Silo/LibSiloPermit.sol#103)
LibTokenPermit.permit(address,address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/libraries/Token/LibTokenPermit.sol#24-39) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= deadline,Token: permit expired deadline) (contracts/libraries/Token/LibTokenPermit.sol#34)
MockUniswapV3Pool.initialize(uint160) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#280-298) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(slot0.sqrtPriceX96 == 0,AI) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#281)
MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797) uses timestamp for comparisons
	Dangerous comparisons:
	- state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#650)
	- step.tickNext < TickMath.MIN_TICK (contracts/mocks/uniswap/MockUniswapV3Pool.sol#662)
	- step.tickNext > TickMath.MAX_TICK (contracts/mocks/uniswap/MockUniswapV3Pool.sol#664)
	- cache.feeProtocol > 0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#691)
	- state.liquidity > 0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#698)
	- state.sqrtPriceX96 == step.sqrtPriceNextX96 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#702)
	- state.sqrtPriceX96 != step.sqrtPriceStartX96 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#735)
	- state.tick != slot0Start.tick (contracts/mocks/uniswap/MockUniswapV3Pool.sol#742)
	- cache.liquidityStart != state.liquidity (contracts/mocks/uniswap/MockUniswapV3Pool.sol#764)
	- state.protocolFee > 0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#770)
	- state.protocolFee > 0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#773)
	- amount1 < 0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#782)
	- require(bool,string)(balance0Before.add(uint256(amount0)) <= balance0(),IIA) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#786)
	- amount0 < 0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#788)
	- require(bool,string)(balance1Before.add(uint256(amount1)) <= balance1(),IIA) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#792)
	- (step.sqrtPriceNextX96 < sqrtPriceLimitX96) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#672-680)
	- (step.sqrtPriceNextX96 > sqrtPriceLimitX96) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#672-680)
ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/tokens/ERC20/ERC20Permit.sol#44-63) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= deadline,ERC20Permit: expired deadline) (contracts/tokens/ERC20/ERC20Permit.sol#53)
FertilizerPreMint.started() (contracts/tokens/Fertilizer/FertilizerPreMint.sol#67-69) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= start() (contracts/tokens/Fertilizer/FertilizerPreMint.sol#68)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
UnsafeMath.divRoundingUp(uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#12-16) uses assembly
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#13-15)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
AddressUpgradeable.isContract(address) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#26-35) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#33)
AddressUpgradeable._verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#147-164) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#156-159)
ECDSA.recover(bytes32,bytes) (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#26-47) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#40-44)
EIP712._getChainId() (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#101-107) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#104-106)
Address.isContract(address) (node_modules/@openzeppelin/contracts/utils/Address.sol#26-35) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#33)
Address._verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#171-188) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#180-183)
FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) uses assembly
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#26-30)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#35-37)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#52-54)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#56-59)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#66-68)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#71-73)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#77-79)
TickMath.getTickAtSqrtRatio(uint160) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#61-204) uses assembly
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#69-73)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#74-78)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#79-83)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#84-88)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#89-93)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#94-98)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#99-103)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#104-107)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#114-119)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#120-125)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#126-131)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#132-137)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#138-143)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#144-149)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#150-155)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#156-161)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#162-167)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#168-173)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#174-179)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#180-185)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#186-191)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#192-196)
Diamond.fallback() (contracts/beanstalk/Diamond.sol#35-55) uses assembly
	- INLINE ASM (contracts/beanstalk/Diamond.sol#38-40)
	- INLINE ASM (contracts/beanstalk/Diamond.sol#43-54)
FarmFacet._farm(bytes) (contracts/beanstalk/farm/FarmFacet.sol#81-87) uses assembly
	- INLINE ASM (contracts/beanstalk/farm/FarmFacet.sol#83)
FarmFacet._farmMem(bytes) (contracts/beanstalk/farm/FarmFacet.sol#90-96) uses assembly
	- INLINE ASM (contracts/beanstalk/farm/FarmFacet.sol#92)
InitBip0.diamondStorageOld() (contracts/beanstalk/init/InitBip0.sol#23-27) uses assembly
	- INLINE ASM (contracts/beanstalk/init/InitBip0.sol#24-26)
InitBipSunriseImprovements.init() (contracts/beanstalk/init/InitBipSunriseImprovements.sol#35-47) uses assembly
	- INLINE ASM (contracts/beanstalk/init/InitBipSunriseImprovements.sol#39-41)
LibAppStorage.diamondStorage() (contracts/libraries/LibAppStorage.sol#15-19) uses assembly
	- INLINE ASM (contracts/libraries/LibAppStorage.sol#16-18)
LibBytes.toUint8(bytes,uint256) (contracts/libraries/LibBytes.sol#18-28) uses assembly
	- INLINE ASM (contracts/libraries/LibBytes.sol#23-25)
LibBytes.toUint32(bytes,uint256) (contracts/libraries/LibBytes.sol#34-44) uses assembly
	- INLINE ASM (contracts/libraries/LibBytes.sol#39-41)
LibBytes.toUint256(bytes,uint256) (contracts/libraries/LibBytes.sol#50-60) uses assembly
	- INLINE ASM (contracts/libraries/LibBytes.sol#55-57)
LibBytes64.encode(bytes) (contracts/libraries/LibBytes64.sol#20-90) uses assembly
	- INLINE ASM (contracts/libraries/LibBytes64.sol#38-87)
LibDiamond.diamondStorage() (contracts/libraries/LibDiamond.sol#44-49) uses assembly
	- INLINE ASM (contracts/libraries/LibDiamond.sol#46-48)
LibDiamond.enforceHasContractCode(address,string) (contracts/libraries/LibDiamond.sol#234-240) uses assembly
	- INLINE ASM (contracts/libraries/LibDiamond.sol#236-238)
LibFunction.checkReturn(bool,bytes) (contracts/libraries/LibFunction.sol#21-31) uses assembly
	- INLINE ASM (contracts/libraries/LibFunction.sol#26-28)
LibFunction.paste32Bytes(bytes,bytes,uint256,uint256) (contracts/libraries/LibFunction.sol#130-140) uses assembly
	- INLINE ASM (contracts/libraries/LibFunction.sol#136-138)
LibPRBMath.mulDivFixedPoint(uint256,uint256) (contracts/libraries/LibPRBMath.sol#59-96) uses assembly
	- INLINE ASM (contracts/libraries/LibPRBMath.sol#62-66)
	- INLINE ASM (contracts/libraries/LibPRBMath.sol#74-77)
	- INLINE ASM (contracts/libraries/LibPRBMath.sol#84-95)
LibPRBMath.mulDiv(uint256,uint256,uint256) (contracts/libraries/LibPRBMath.sol#185-263) uses assembly
	- INLINE ASM (contracts/libraries/LibPRBMath.sol#195-199)
	- INLINE ASM (contracts/libraries/LibPRBMath.sol#215-222)
	- INLINE ASM (contracts/libraries/LibPRBMath.sol#229-238)
LibTokenSilo.beanDenominatedValue(address,uint256) (contracts/libraries/Silo/LibTokenSilo.sol#279-306) uses assembly
	- INLINE ASM (contracts/libraries/Silo/LibTokenSilo.sol#298-300)
	- INLINE ASM (contracts/libraries/Silo/LibTokenSilo.sol#303-305)
MockDiamond.fallback() (contracts/mocks/MockDiamond.sol#34-54) uses assembly
	- INLINE ASM (contracts/mocks/MockDiamond.sol#37-39)
	- INLINE ASM (contracts/mocks/MockDiamond.sol#42-53)
MockSiloFacet.beanDenominatedValueLegacy(address,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#280-307) uses assembly
	- INLINE ASM (contracts/mocks/mockFacets/MockSiloFacet.sol#299-301)
	- INLINE ASM (contracts/mocks/mockFacets/MockSiloFacet.sol#304-306)
Pipeline.getEthValue(bytes) (contracts/pipeline/Pipeline.sol#110-113) uses assembly
	- INLINE ASM (contracts/pipeline/Pipeline.sol#112)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['>=0.4.0', '>=0.5.0', '>=0.6.0', '>=0.7.0', '>=0.7.5', '^0.8.0', '^0.8.17']
	- >=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#2)
	- >=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3PoolDeployer.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/LiquidityMath.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#2)
	- >=0.6.0 (node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#2)
	- >=0.7.0 (node_modules/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol#2)
	- >=0.7.5 (contracts/interfaces/IQuoter.sol#2)
	- >=0.7.5 (contracts/interfaces/ISwapRouter.sol#2)
	- ABIEncoderV2 (contracts/interfaces/IBeanstalk.sol#3)
	- ABIEncoderV2 (contracts/interfaces/IDelegation.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable-8/token/ERC20/IERC20Upgradeable.sol#4)
	- ^0.8.17 (contracts/interfaces/IBeanstalk.sol#2)
	- ^0.8.17 (contracts/interfaces/IDelegation.sol#2)
	- v2 (contracts/interfaces/IQuoter.sol#3)
	- v2 (contracts/interfaces/ISwapRouter.sol#3)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.7.6', '=0.7.6', '>=0.4.0', '>=0.4.0<0.8.0', '>=0.4.24<0.8.0', '>=0.5.0', '>=0.5.0<0.8.0', '>=0.6.0', '>=0.6.0<0.8.0', '>=0.6.2<0.8.0', '>=0.7.0', '>=0.7.5', '^0.7.6']
	- 0.7.6 (contracts/beanstalk/barn/UnripeFacet.sol#5)
	- 0.7.6 (contracts/tokens/ERC20/BeanstalkERC20.sol#3)
	- =0.7.6 (contracts/C.sol#3)
	- =0.7.6 (contracts/beanstalk/AppStorage.sol#3)
	- =0.7.6 (contracts/beanstalk/AppStorageOld.sol#5)
	- =0.7.6 (contracts/beanstalk/Diamond.sol#2)
	- =0.7.6 (contracts/beanstalk/ReentrancyGuard.sol#4)
	- =0.7.6 (contracts/beanstalk/diamond/DiamondCutFacet.sol#6)
	- =0.7.6 (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#6)
	- =0.7.6 (contracts/beanstalk/diamond/OwnershipFacet.sol#3)
	- =0.7.6 (contracts/beanstalk/farm/CurveFacet.sol#5)
	- =0.7.6 (contracts/beanstalk/farm/TokenFacet.sol#5)
	- =0.7.6 (contracts/beanstalk/farm/TokenSupportFacet.sol#5)
	- =0.7.6 (contracts/beanstalk/field/FieldFacet.sol#5)
	- =0.7.6 (contracts/beanstalk/field/FundraiserFacet.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip0.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip1.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip11.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip12.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip13.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip14.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip16.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip2.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip22.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip23.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip24.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip5.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip7.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip8.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBip9.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBipNewSilo.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitBipSunriseImprovements.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitDiamond.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitEBip6.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitFundraiser.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitHotFix2.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitHotFix3.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitHotFix4.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitHotFix5.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitMint.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitOmnisciaAudit.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitReplant.sol#5)
	- =0.7.6 (contracts/beanstalk/init/InitWhitelist.sol#5)
	- =0.7.6 (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#5)
	- =0.7.6 (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#5)
	- =0.7.6 (contracts/beanstalk/market/MarketplaceFacet/Order.sol#5)
	- =0.7.6 (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#5)
	- =0.7.6 (contracts/beanstalk/silo/ApprovalFacet.sol#5)
	- =0.7.6 (contracts/beanstalk/silo/BDVFacet.sol#5)
	- =0.7.6 (contracts/beanstalk/silo/ConvertFacet.sol#5)
	- =0.7.6 (contracts/beanstalk/silo/MigrationFacet.sol#5)
	- =0.7.6 (contracts/beanstalk/silo/SiloFacet/Silo.sol#5)
	- =0.7.6 (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#6)
	- =0.7.6 (contracts/beanstalk/silo/SiloFacet/TokenSilo.sol#5)
	- =0.7.6 (contracts/beanstalk/sun/SeasonFacet/Oracle.sol#3)
	- =0.7.6 (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#3)
	- =0.7.6 (contracts/beanstalk/sun/SeasonFacet/Weather.sol#3)
	- =0.7.6 (contracts/ecosystem/price/BeanstalkPrice.sol#2)
	- =0.7.6 (contracts/ecosystem/price/CurvePrice.sol#2)
	- =0.7.6 (contracts/ecosystem/price/P.sol#2)
	- =0.7.6 (contracts/interfaces/IBean.sol#3)
	- =0.7.6 (contracts/interfaces/IBeanstalkTransfer.sol#3)
	- =0.7.6 (contracts/interfaces/IBlockBasefee.sol#3)
	- =0.7.6 (contracts/interfaces/ICurve.sol#3)
	- =0.7.6 (contracts/interfaces/IDiamondCut.sol#3)
	- =0.7.6 (contracts/interfaces/IDiamondLoupe.sol#3)
	- =0.7.6 (contracts/interfaces/IERC165.sol#3)
	- =0.7.6 (contracts/interfaces/IFertilizer.sol#3)
	- =0.7.6 (contracts/interfaces/IPipeline.sol#2)
	- =0.7.6 (contracts/interfaces/IProxyAdmin.sol#3)
	- =0.7.6 (contracts/libraries/Convert/LibConvert.sol#3)
	- =0.7.6 (contracts/libraries/Convert/LibConvertData.sol#3)
	- =0.7.6 (contracts/libraries/Convert/LibCurveConvert.sol#3)
	- =0.7.6 (contracts/libraries/Convert/LibLambdaConvert.sol#3)
	- =0.7.6 (contracts/libraries/Convert/LibMetaCurveConvert.sol#3)
	- =0.7.6 (contracts/libraries/Convert/LibUnripeConvert.sol#3)
	- =0.7.6 (contracts/libraries/Curve/LibBeanMetaCurve.sol#3)
	- =0.7.6 (contracts/libraries/Curve/LibCurve.sol#3)
	- =0.7.6 (contracts/libraries/Curve/LibMetaCurve.sol#3)
	- =0.7.6 (contracts/libraries/Decimal.sol#5)
	- =0.7.6 (contracts/libraries/LibAppStorage.sol#3)
	- =0.7.6 (contracts/libraries/LibBytes.sol#5)
	- =0.7.6 (contracts/libraries/LibBytes64.sol#3)
	- =0.7.6 (contracts/libraries/LibDiamond.sol#6)
	- =0.7.6 (contracts/libraries/LibDibbler.sol#3)
	- =0.7.6 (contracts/libraries/LibFertilizer.sol#5)
	- =0.7.6 (contracts/libraries/LibFunction.sol#5)
	- =0.7.6 (contracts/libraries/LibIncentive.sol#3)
	- =0.7.6 (contracts/libraries/LibPRBMath.sol#3)
	- =0.7.6 (contracts/libraries/LibPolynomial.sol#5)
	- =0.7.6 (contracts/libraries/LibUnripe.sol#3)
	- =0.7.6 (contracts/libraries/Oracle/LibCurveOracle.sol#3)
	- =0.7.6 (contracts/libraries/Silo/LibLegacyTokenSilo.sol#5)
	- =0.7.6 (contracts/libraries/Silo/LibLegacyWhitelist.sol#5)
	- =0.7.6 (contracts/libraries/Silo/LibSilo.sol#5)
	- =0.7.6 (contracts/libraries/Silo/LibSiloPermit.sol#5)
	- =0.7.6 (contracts/libraries/Silo/LibTokenSilo.sol#5)
	- =0.7.6 (contracts/libraries/Silo/LibUnripeSilo.sol#3)
	- =0.7.6 (contracts/libraries/Silo/LibWhitelist.sol#5)
	- =0.7.6 (contracts/libraries/Token/LibApprove.sol#6)
	- =0.7.6 (contracts/libraries/Token/LibTokenApprove.sol#3)
	- =0.7.6 (contracts/libraries/Token/LibTokenPermit.sol#5)
	- =0.7.6 (contracts/libraries/Token/LibTransfer.sol#3)
	- =0.7.6 (contracts/libraries/Token/LibWeth.sol#6)
	- =0.7.6 (contracts/mocks/MockBlockBasefee.sol#5)
	- =0.7.6 (contracts/mocks/MockDiamond.sol#2)
	- =0.7.6 (contracts/mocks/MockERC1155.sol#2)
	- =0.7.6 (contracts/mocks/MockERC721.sol#2)
	- =0.7.6 (contracts/mocks/MockFertilizer.sol#5)
	- =0.7.6 (contracts/mocks/MockInitDiamond.sol#5)
	- =0.7.6 (contracts/mocks/MockSiloToken.sol#5)
	- =0.7.6 (contracts/mocks/MockToken.sol#5)
	- =0.7.6 (contracts/mocks/MockWETH.sol#5)
	- =0.7.6 (contracts/mocks/mockFacets/MockAdminFacet.sol#4)
	- =0.7.6 (contracts/mocks/mockFacets/MockFertilizerFacet.sol#5)
	- =0.7.6 (contracts/mocks/mockFacets/MockFieldFacet.sol#5)
	- =0.7.6 (contracts/mocks/mockFacets/MockFundraiserFacet.sol#5)
	- =0.7.6 (contracts/mocks/mockFacets/MockMarketplaceFacet.sol#5)
	- =0.7.6 (contracts/mocks/mockFacets/MockSiloFacet.sol#5)
	- =0.7.6 (contracts/mocks/uniswap/MockUniswapV3Deployer.sol#2)
	- =0.7.6 (contracts/mocks/uniswap/MockUniswapV3Factory.sol#2)
	- =0.7.6 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#2)
	- =0.7.6 (contracts/mocks/uniswap/NoDelegateCall.sol#2)
	- =0.7.6 (contracts/pipeline/Pipeline.sol#2)
	- =0.7.6 (contracts/tokens/Bean.sol#5)
	- =0.7.6 (contracts/tokens/UnripeBean.sol#5)
	- =0.7.6 (contracts/tokens/UnripeBean3Crv.sol#5)
	- >=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#2)
	- >=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#2)
	- >=0.4.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#2)
	- >=0.4.24<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#4)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3PoolDeployer.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/LiquidityMath.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SwapMath.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#2)
	- >=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#2)
	- >=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#2)
	- >=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#2)
	- >=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#2)
	- >=0.5.0<0.8.0 (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#2)
	- >=0.6.0 (node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#2)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/MerkleProof.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/introspection/ERC165.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/introspection/IERC165.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/Math.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721Holder.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/EnumerableMap.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/SafeCast.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#3)
	- >=0.6.0<0.8.0 (contracts/interfaces/IERC1155Receiver.sol#3)
	- >=0.6.0<0.8.0 (contracts/libraries/LibSafeMath128.sol#3)
	- >=0.6.0<0.8.0 (contracts/libraries/LibSafeMath32.sol#3)
	- >=0.6.0<0.8.0 (contracts/libraries/LibSafeMathSigned128.sol#3)
	- >=0.6.0<0.8.0 (contracts/libraries/LibSafeMathSigned96.sol#3)
	- >=0.6.0<0.8.0 (contracts/libraries/LibStrings.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
	- >=0.7.0 (node_modules/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol#2)
	- >=0.7.5 (contracts/interfaces/IQuoter.sol#2)
	- >=0.7.5 (contracts/interfaces/ISwapRouter.sol#2)
	- ABIEncoderV2 (contracts/C.sol#4)
	- ABIEncoderV2 (contracts/beanstalk/AppStorage.sol#4)
	- ABIEncoderV2 (contracts/beanstalk/AppStorageOld.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/Diamond.sol#3)
	- ABIEncoderV2 (contracts/beanstalk/ReentrancyGuard.sol#5)
	- ABIEncoderV2 (contracts/beanstalk/barn/FertilizerFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/barn/UnripeFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/diamond/DiamondCutFacet.sol#5)
	- ABIEncoderV2 (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#5)
	- ABIEncoderV2 (contracts/beanstalk/diamond/OwnershipFacet.sol#4)
	- ABIEncoderV2 (contracts/beanstalk/diamond/PauseFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/farm/CurveFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/farm/DepotFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/farm/FarmFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/farm/TokenFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/farm/TokenSupportFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/field/FieldFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/field/FundraiserFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip0.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip1.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip11.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip12.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip13.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip14.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip16.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip2.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip22.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip23.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip24.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip5.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip7.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip8.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBip9.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBipNewSilo.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitBipSunriseImprovements.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitDiamond.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitEBip6.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitFundraiser.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitHotFix2.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitHotFix3.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitHotFix4.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitHotFix5.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitMint.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitOmnisciaAudit.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitReplant.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/init/InitWhitelist.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/market/MarketplaceFacet/Order.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/metadata/MetadataFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/silo/ApprovalFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/silo/BDVFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/silo/ConvertFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/silo/MigrationFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/silo/SiloFacet/Silo.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#7)
	- ABIEncoderV2 (contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/silo/SiloFacet/TokenSilo.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/silo/WhitelistFacet.sol#6)
	- ABIEncoderV2 (contracts/beanstalk/sun/SeasonFacet/Oracle.sol#4)
	- ABIEncoderV2 (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#4)
	- ABIEncoderV2 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#4)
	- ABIEncoderV2 (contracts/beanstalk/sun/SeasonFacet/Weather.sol#4)
	- ABIEncoderV2 (contracts/depot/Depot.sol#4)
	- ABIEncoderV2 (contracts/ecosystem/price/BeanstalkPrice.sol#3)
	- ABIEncoderV2 (contracts/ecosystem/price/CurvePrice.sol#3)
	- ABIEncoderV2 (contracts/ecosystem/price/P.sol#3)
	- ABIEncoderV2 (contracts/interfaces/IBean.sol#4)
	- ABIEncoderV2 (contracts/interfaces/IBeanstalkTransfer.sol#2)
	- ABIEncoderV2 (contracts/interfaces/IBlockBasefee.sol#2)
	- ABIEncoderV2 (contracts/interfaces/ICurve.sol#2)
	- ABIEncoderV2 (contracts/interfaces/IDiamondCut.sol#2)
	- ABIEncoderV2 (contracts/interfaces/IDiamondLoupe.sol#2)
	- ABIEncoderV2 (contracts/interfaces/IERC165.sol#2)
	- ABIEncoderV2 (contracts/interfaces/IERC4494.sol#4)
	- ABIEncoderV2 (contracts/interfaces/IFertilizer.sol#2)
	- ABIEncoderV2 (contracts/interfaces/IPipeline.sol#3)
	- ABIEncoderV2 (contracts/interfaces/IProxyAdmin.sol#2)
	- ABIEncoderV2 (contracts/interfaces/IUSDC.sol#6)
	- ABIEncoderV2 (contracts/interfaces/IWETH.sol#6)
	- ABIEncoderV2 (contracts/libraries/Convert/LibConvert.sol#4)
	- ABIEncoderV2 (contracts/libraries/Convert/LibConvertData.sol#4)
	- ABIEncoderV2 (contracts/libraries/Convert/LibCurveConvert.sol#4)
	- ABIEncoderV2 (contracts/libraries/Convert/LibLambdaConvert.sol#4)
	- ABIEncoderV2 (contracts/libraries/Convert/LibMetaCurveConvert.sol#4)
	- ABIEncoderV2 (contracts/libraries/Convert/LibUnripeConvert.sol#4)
	- ABIEncoderV2 (contracts/libraries/Curve/LibBeanMetaCurve.sol#4)
	- ABIEncoderV2 (contracts/libraries/Curve/LibCurve.sol#4)
	- ABIEncoderV2 (contracts/libraries/Curve/LibMetaCurve.sol#4)
	- ABIEncoderV2 (contracts/libraries/Decimal.sol#6)
	- ABIEncoderV2 (contracts/libraries/LibAppStorage.sol#4)
	- ABIEncoderV2 (contracts/libraries/LibDiamond.sol#5)
	- ABIEncoderV2 (contracts/libraries/LibDibbler.sol#4)
	- ABIEncoderV2 (contracts/libraries/LibFertilizer.sol#6)
	- ABIEncoderV2 (contracts/libraries/LibFunction.sol#6)
	- ABIEncoderV2 (contracts/libraries/LibIncentive.sol#4)
	- ABIEncoderV2 (contracts/libraries/LibPRBMath.sol#4)
	- ABIEncoderV2 (contracts/libraries/LibUnripe.sol#4)
	- ABIEncoderV2 (contracts/libraries/Oracle/LibCurveOracle.sol#4)
	- ABIEncoderV2 (contracts/libraries/Silo/LibLegacyTokenSilo.sol#6)
	- ABIEncoderV2 (contracts/libraries/Silo/LibLegacyWhitelist.sol#6)
	- ABIEncoderV2 (contracts/libraries/Silo/LibSilo.sol#6)
	- ABIEncoderV2 (contracts/libraries/Silo/LibSiloPermit.sol#6)
	- ABIEncoderV2 (contracts/libraries/Silo/LibTokenSilo.sol#6)
	- ABIEncoderV2 (contracts/libraries/Silo/LibUnripeSilo.sol#4)
	- ABIEncoderV2 (contracts/libraries/Silo/LibWhitelist.sol#6)
	- ABIEncoderV2 (contracts/libraries/Token/LibApprove.sol#5)
	- ABIEncoderV2 (contracts/libraries/Token/LibBalance.sol#4)
	- ABIEncoderV2 (contracts/libraries/Token/LibEth.sol#6)
	- ABIEncoderV2 (contracts/libraries/Token/LibTokenApprove.sol#4)
	- ABIEncoderV2 (contracts/libraries/Token/LibTokenPermit.sol#6)
	- ABIEncoderV2 (contracts/libraries/Token/LibTransfer.sol#4)
	- ABIEncoderV2 (contracts/libraries/Token/LibWeth.sol#5)
	- ABIEncoderV2 (contracts/mocks/MockBlockBasefee.sol#6)
	- ABIEncoderV2 (contracts/mocks/MockDiamond.sol#3)
	- ABIEncoderV2 (contracts/mocks/MockERC1155.sol#3)
	- ABIEncoderV2 (contracts/mocks/MockERC721.sol#3)
	- ABIEncoderV2 (contracts/mocks/MockFertilizer.sol#6)
	- ABIEncoderV2 (contracts/mocks/MockInitDiamond.sol#6)
	- ABIEncoderV2 (contracts/mocks/MockSiloToken.sol#6)
	- ABIEncoderV2 (contracts/mocks/MockToken.sol#6)
	- ABIEncoderV2 (contracts/mocks/curve/MockCurveFactory.sol#6)
	- ABIEncoderV2 (contracts/mocks/curve/MockCurveZap.sol#10)
	- ABIEncoderV2 (contracts/mocks/curve/MockMeta3Curve.sol#6)
	- ABIEncoderV2 (contracts/mocks/curve/MockPlainCurve.sol#6)
	- ABIEncoderV2 (contracts/mocks/mockFacets/MockAdminFacet.sol#5)
	- ABIEncoderV2 (contracts/mocks/mockFacets/MockConvertFacet.sol#6)
	- ABIEncoderV2 (contracts/mocks/mockFacets/MockFertilizerFacet.sol#6)
	- ABIEncoderV2 (contracts/mocks/mockFacets/MockFieldFacet.sol#6)
	- ABIEncoderV2 (contracts/mocks/mockFacets/MockFundraiserFacet.sol#6)
	- ABIEncoderV2 (contracts/mocks/mockFacets/MockMarketplaceFacet.sol#6)
	- ABIEncoderV2 (contracts/mocks/mockFacets/MockSeasonFacet.sol#5)
	- ABIEncoderV2 (contracts/mocks/mockFacets/MockSiloFacet.sol#6)
	- ABIEncoderV2 (contracts/mocks/mockFacets/MockUnripeFacet.sol#6)
	- ABIEncoderV2 (contracts/pipeline/Pipeline.sol#3)
	- ABIEncoderV2 (contracts/tokens/Bean.sol#6)
	- ABIEncoderV2 (contracts/tokens/ERC20/BeanstalkERC20.sol#4)
	- ABIEncoderV2 (contracts/tokens/ERC20/ERC20Permit.sol#5)
	- ABIEncoderV2 (contracts/tokens/Fertilizer/Fertilizer.sol#4)
	- ABIEncoderV2 (contracts/tokens/Fertilizer/Fertilizer1155.sol#6)
	- ABIEncoderV2 (contracts/tokens/Fertilizer/FertilizerPreMint.sol#4)
	- ABIEncoderV2 (contracts/tokens/Fertilizer/Internalizer.sol#4)
	- ABIEncoderV2 (contracts/tokens/UnripeBean.sol#6)
	- ABIEncoderV2 (contracts/tokens/UnripeBean3Crv.sol#6)
	- ^0.7.6 (contracts/beanstalk/barn/FertilizerFacet.sol#5)
	- ^0.7.6 (contracts/beanstalk/diamond/PauseFacet.sol#5)
	- ^0.7.6 (contracts/beanstalk/farm/DepotFacet.sol#5)
	- ^0.7.6 (contracts/beanstalk/farm/FarmFacet.sol#5)
	- ^0.7.6 (contracts/beanstalk/metadata/MetadataFacet.sol#5)
	- ^0.7.6 (contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol#5)
	- ^0.7.6 (contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#5)
	- ^0.7.6 (contracts/beanstalk/silo/WhitelistFacet.sol#5)
	- ^0.7.6 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#3)
	- ^0.7.6 (contracts/depot/Depot.sol#3)
	- ^0.7.6 (contracts/interfaces/IERC4494.sol#3)
	- ^0.7.6 (contracts/interfaces/IUSDC.sol#5)
	- ^0.7.6 (contracts/interfaces/IWETH.sol#5)
	- ^0.7.6 (contracts/libraries/Token/LibBalance.sol#3)
	- ^0.7.6 (contracts/libraries/Token/LibEth.sol#5)
	- ^0.7.6 (contracts/mocks/curve/MockCurveFactory.sol#5)
	- ^0.7.6 (contracts/mocks/curve/MockCurveZap.sol#9)
	- ^0.7.6 (contracts/mocks/curve/MockMeta3Curve.sol#5)
	- ^0.7.6 (contracts/mocks/curve/MockPlainCurve.sol#5)
	- ^0.7.6 (contracts/mocks/mockFacets/MockConvertFacet.sol#5)
	- ^0.7.6 (contracts/mocks/mockFacets/MockSeasonFacet.sol#4)
	- ^0.7.6 (contracts/mocks/mockFacets/MockUnripeFacet.sol#5)
	- ^0.7.6 (contracts/tokens/ERC20/ERC20Permit.sol#4)
	- ^0.7.6 (contracts/tokens/Fertilizer/Fertilizer.sol#3)
	- ^0.7.6 (contracts/tokens/Fertilizer/Fertilizer1155.sol#5)
	- ^0.7.6 (contracts/tokens/Fertilizer/FertilizerPreMint.sol#3)
	- ^0.7.6 (contracts/tokens/Fertilizer/Internalizer.sol#3)
	- v2 (contracts/interfaces/IQuoter.sol#3)
	- v2 (contracts/interfaces/ISwapRouter.sol#3)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
SwapMath.computeSwapStep(uint160,uint160,uint128,int256,uint24) (node_modules/@uniswap/v3-core/contracts/libraries/SwapMath.sol#21-97) has a high cyclomatic complexity (13).
TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) has a high cyclomatic complexity (24).
CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To) (contracts/beanstalk/farm/CurveFacet.sol#159-234) has a high cyclomatic complexity (13).
Weather.stepWeather(int256) (contracts/beanstalk/sun/SeasonFacet/Weather.sol#100-193) has a high cyclomatic complexity (13).
MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#605-797) has a high cyclomatic complexity (28).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity
INFO:Detectors:
C.UniV3EthUsdc() (contracts/C.sol#153-155) is never used and should be removed
C.getBlockLengthSeconds() (contracts/C.sol#79-81) is never used and should be removed
C.getSeedsPerBean() (contracts/C.sol#87-89) is never used and should be removed
C.getStalkPerBean() (contracts/C.sol#91-93) is never used and should be removed
Decimal.add(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#147-156) is never used and should be removed
Decimal.add(Decimal.D256,uint256) (contracts/libraries/Decimal.sol#71-80) is never used and should be removed
Decimal.asUint256(Decimal.D256) (contracts/libraries/Decimal.sol#227-229) is never used and should be removed
Decimal.div(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#192-201) is never used and should be removed
Decimal.div(Decimal.D256,uint256) (contracts/libraries/Decimal.sol#116-125) is never used and should be removed
Decimal.equals(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#203-205) is never used and should be removed
Decimal.greaterThan(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#207-209) is never used and should be removed
Decimal.isZero(Decimal.D256) (contracts/libraries/Decimal.sol#223-225) is never used and should be removed
Decimal.lessThan(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#211-213) is never used and should be removed
Decimal.mul(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#181-190) is never used and should be removed
Decimal.mul(Decimal.D256,uint256) (contracts/libraries/Decimal.sol#105-114) is never used and should be removed
Decimal.pow(Decimal.D256,uint256) (contracts/libraries/Decimal.sol#127-145) is never used and should be removed
Decimal.sub(Decimal.D256,Decimal.D256) (contracts/libraries/Decimal.sol#158-167) is never used and should be removed
Decimal.sub(Decimal.D256,Decimal.D256,string) (contracts/libraries/Decimal.sol#169-179) is never used and should be removed
Decimal.sub(Decimal.D256,uint256) (contracts/libraries/Decimal.sol#82-91) is never used and should be removed
Decimal.sub(Decimal.D256,uint256,string) (contracts/libraries/Decimal.sol#93-103) is never used and should be removed
Fertilizer1155._transfer(address,address,uint256,uint256) (contracts/tokens/Fertilizer/Fertilizer1155.sol#76-82) is never used and should be removed
InitBip0.diamondStorageOld() (contracts/beanstalk/init/InitBip0.sol#23-27) is never used and should be removed
LibBytes.toUint32(bytes,uint256) (contracts/libraries/LibBytes.sol#34-44) is never used and should be removed
LibPRBMath.logBase2(uint256) (contracts/libraries/LibPRBMath.sol#133-166) is never used and should be removed
LibPRBMath.min(uint128,uint128) (contracts/libraries/LibPRBMath.sol#176-178) is never used and should be removed
LibPRBMath.min(uint256,uint256) (contracts/libraries/LibPRBMath.sol#172-174) is never used and should be removed
LibPRBMath.mostSignificantBit(uint256) (contracts/libraries/LibPRBMath.sol#98-131) is never used and should be removed
LibPRBMath.mulDivFixedPoint(uint256,uint256) (contracts/libraries/LibPRBMath.sol#59-96) is never used and should be removed
LibPRBMath.powu(uint256,uint256) (contracts/libraries/LibPRBMath.sol#44-57) is never used and should be removed
LibSafeMath128.div(uint128,uint128) (contracts/libraries/LibSafeMath128.sol#126-129) is never used and should be removed
LibSafeMath128.div(uint128,uint128,string) (contracts/libraries/LibSafeMath128.sol#181-184) is never used and should be removed
LibSafeMath128.mod(uint128,uint128) (contracts/libraries/LibSafeMath128.sol#143-146) is never used and should be removed
LibSafeMath128.mod(uint128,uint128,string) (contracts/libraries/LibSafeMath128.sol#201-204) is never used and should be removed
LibSafeMath128.sub(uint128,uint128,string) (contracts/libraries/LibSafeMath128.sol#161-164) is never used and should be removed
LibSafeMath128.tryAdd(uint128,uint128) (contracts/libraries/LibSafeMath128.sol#15-19) is never used and should be removed
LibSafeMath128.tryDiv(uint128,uint128) (contracts/libraries/LibSafeMath128.sol#51-54) is never used and should be removed
LibSafeMath128.tryMod(uint128,uint128) (contracts/libraries/LibSafeMath128.sol#61-64) is never used and should be removed
LibSafeMath128.tryMul(uint128,uint128) (contracts/libraries/LibSafeMath128.sol#36-44) is never used and should be removed
LibSafeMath32.div(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#126-129) is never used and should be removed
LibSafeMath32.div(uint32,uint32,string) (contracts/libraries/LibSafeMath32.sol#181-184) is never used and should be removed
LibSafeMath32.mod(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#143-146) is never used and should be removed
LibSafeMath32.mod(uint32,uint32,string) (contracts/libraries/LibSafeMath32.sol#201-204) is never used and should be removed
LibSafeMath32.mul(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#107-112) is never used and should be removed
LibSafeMath32.sub(uint32,uint32,string) (contracts/libraries/LibSafeMath32.sol#161-164) is never used and should be removed
LibSafeMath32.tryAdd(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#15-19) is never used and should be removed
LibSafeMath32.tryDiv(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#51-54) is never used and should be removed
LibSafeMath32.tryMod(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#61-64) is never used and should be removed
LibSafeMath32.tryMul(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#36-44) is never used and should be removed
LibSafeMath32.trySub(uint32,uint32) (contracts/libraries/LibSafeMath32.sol#26-29) is never used and should be removed
LibSafeMathSigned128.add(int128,int128) (contracts/libraries/LibSafeMathSigned128.sol#86-91) is never used and should be removed
LibSafeMathSigned128.div(int128,int128) (contracts/libraries/LibSafeMathSigned128.sol#50-57) is never used and should be removed
LibSafeMathSigned128.mul(int128,int128) (contracts/libraries/LibSafeMathSigned128.sol#22-36) is never used and should be removed
LibSafeMathSigned128.sub(int128,int128) (contracts/libraries/LibSafeMathSigned128.sol#69-74) is never used and should be removed
LibSafeMathSigned96.add(int96,int96) (contracts/libraries/LibSafeMathSigned96.sol#86-91) is never used and should be removed
LibStrings.toHexString(address) (contracts/libraries/LibStrings.sol#51-53) is never used and should be removed
LibTokenSilo.calculateStalkFromStemAndBdv(address,int96,uint256) (contracts/libraries/Silo/LibTokenSilo.sol#393-402) is never used and should be removed
LibTokenSilo.stalkEarnedPerSeason(address) (contracts/libraries/Silo/LibTokenSilo.sol#337-340) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version=0.7.6 (contracts/interfaces/ILegacySilo.sol#3) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Pragma version=0.7.6 (contracts/beanstalk/init/InitSiloToken.sol#5) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Pragma version=0.7.6 (contracts/mocks/MockContract.sol#5) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Pragma version=0.7.6 (contracts/mocks/MockUpgradeInitDiamond.sol#5) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Pragma version=0.7.6 (contracts/beanstalk/init/InitEmpty.sol#5) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Pragma version^0.7.6 (contracts/mocks/curve/Mock3Curve.sol#5) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Pragma version=0.7.6 (contracts/beanstalk/init/InitSiloEvents.sol#5) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Pragma version=0.7.6 (contracts/mocks/mockFacets/MockUpgradeFacet.sol#5) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/TickBitmap.sol#2) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable-8/token/ERC20/IERC20Upgradeable.sol#4) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3PoolDeployer.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#2) allows old versions
Pragma version>=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#2) allows old versions
Pragma version>=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/LiquidityMath.sol#2) allows old versions
Pragma version>=0.7.0 (node_modules/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol#2) allows old versions
Pragma version>=0.6.0 (node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/UnsafeMath.sol#2) allows old versions
Pragma version^0.8.17 (contracts/interfaces/IBeanstalk.sol#2) allows old versions
Pragma version^0.8.17 (contracts/interfaces/IDelegation.sol#2) allows old versions
Pragma version>=0.7.5 (contracts/interfaces/IQuoter.sol#2) allows old versions
Pragma version>=0.7.5 (contracts/interfaces/ISwapRouter.sol#2) allows old versions
solc-0.8.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol#3) is too complex
Pragma version>=0.4.24<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#4) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#3) is too complex
Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol#3) is too complex
Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol#3) is too complex
Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/MerkleProof.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/introspection/ERC165.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/introspection/IERC165.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/Math.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol#3) is too complex
Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol#3) is too complex
Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721Holder.sol#3) is too complex
Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#3) is too complex
Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol#3) is too complex
Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#3) is too complex
Pragma version>=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/EnumerableMap.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/SafeCast.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#3) is too complex
Pragma version>=0.4.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#2) is too complex
Pragma version>=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/Oracle.sol#2) is too complex
Pragma version>=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#2) is too complex
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#2) allows old versions
Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/SwapMath.sol#2) allows old versions
Pragma version>=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#2) is too complex
Pragma version>=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#2) is too complex
Pragma version>=0.5.0<0.8.0 (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#2) is too complex
Pragma version=0.7.6 (contracts/C.sol#3) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/AppStorage.sol#3) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/AppStorageOld.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/Diamond.sol#2) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/ReentrancyGuard.sol#4) allows old versions
Pragma version^0.7.6 (contracts/beanstalk/barn/FertilizerFacet.sol#5) allows old versions
Pragma version0.7.6 (contracts/beanstalk/barn/UnripeFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/diamond/DiamondCutFacet.sol#6) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#6) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/diamond/OwnershipFacet.sol#3) allows old versions
Pragma version^0.7.6 (contracts/beanstalk/diamond/PauseFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/farm/CurveFacet.sol#5) allows old versions
Pragma version^0.7.6 (contracts/beanstalk/farm/DepotFacet.sol#5) allows old versions
Pragma version^0.7.6 (contracts/beanstalk/farm/FarmFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/farm/TokenFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/farm/TokenSupportFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/field/FieldFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/field/FundraiserFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip0.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip1.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip11.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip12.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip13.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip14.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip16.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip2.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip22.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip23.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip24.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip5.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip7.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip8.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBip9.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBipNewSilo.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitBipSunriseImprovements.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitDiamond.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitEBip6.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitFundraiser.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitHotFix2.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitHotFix3.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitHotFix4.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitHotFix5.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitMint.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitOmnisciaAudit.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitReplant.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/init/InitWhitelist.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/market/MarketplaceFacet/MarketplaceFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/market/MarketplaceFacet/Order.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/market/MarketplaceFacet/PodTransfer.sol#5) allows old versions
Pragma version^0.7.6 (contracts/beanstalk/metadata/MetadataFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/silo/ApprovalFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/silo/BDVFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/silo/ConvertFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/silo/MigrationFacet.sol#5) allows old versions
Pragma version^0.7.6 (contracts/beanstalk/silo/SiloFacet/LegacyClaimWithdrawalFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/silo/SiloFacet/Silo.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/silo/SiloFacet/SiloExit.sol#6) allows old versions
Pragma version^0.7.6 (contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/silo/SiloFacet/TokenSilo.sol#5) allows old versions
Pragma version^0.7.6 (contracts/beanstalk/silo/WhitelistFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/sun/SeasonFacet/Oracle.sol#3) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/sun/SeasonFacet/SeasonFacet.sol#3) allows old versions
Pragma version^0.7.6 (contracts/beanstalk/sun/SeasonFacet/Sun.sol#3) allows old versions
Pragma version=0.7.6 (contracts/beanstalk/sun/SeasonFacet/Weather.sol#3) allows old versions
Pragma version^0.7.6 (contracts/depot/Depot.sol#3) allows old versions
Pragma version=0.7.6 (contracts/ecosystem/price/BeanstalkPrice.sol#2) allows old versions
Pragma version=0.7.6 (contracts/ecosystem/price/CurvePrice.sol#2) allows old versions
Pragma version=0.7.6 (contracts/ecosystem/price/P.sol#2) allows old versions
Pragma version=0.7.6 (contracts/interfaces/IBean.sol#3) allows old versions
Pragma version=0.7.6 (contracts/interfaces/IBeanstalkTransfer.sol#3) allows old versions
Pragma version=0.7.6 (contracts/interfaces/IBlockBasefee.sol#3) allows old versions
Pragma version=0.7.6 (contracts/interfaces/ICurve.sol#3) allows old versions
Pragma version=0.7.6 (contracts/interfaces/IDiamondCut.sol#3) allows old versions
Pragma version=0.7.6 (contracts/interfaces/IDiamondLoupe.sol#3) allows old versions
Pragma version>=0.6.0<0.8.0 (contracts/interfaces/IERC1155Receiver.sol#3) is too complex
Pragma version=0.7.6 (contracts/interfaces/IERC165.sol#3) allows old versions
Pragma version^0.7.6 (contracts/interfaces/IERC4494.sol#3) allows old versions
Pragma version=0.7.6 (contracts/interfaces/IFertilizer.sol#3) allows old versions
Pragma version=0.7.6 (contracts/interfaces/IPipeline.sol#2) allows old versions
Pragma version=0.7.6 (contracts/interfaces/IProxyAdmin.sol#3) allows old versions
Pragma version^0.7.6 (contracts/interfaces/IUSDC.sol#5) allows old versions
Pragma version^0.7.6 (contracts/interfaces/IWETH.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/Convert/LibConvert.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Convert/LibConvertData.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Convert/LibCurveConvert.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Convert/LibLambdaConvert.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Convert/LibMetaCurveConvert.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Convert/LibUnripeConvert.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Curve/LibBeanMetaCurve.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Curve/LibCurve.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Curve/LibMetaCurve.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Decimal.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/LibAppStorage.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/LibBytes.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/LibBytes64.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/LibDiamond.sol#6) allows old versions
Pragma version=0.7.6 (contracts/libraries/LibDibbler.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/LibFertilizer.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/LibFunction.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/LibIncentive.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/LibPRBMath.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/LibPolynomial.sol#5) allows old versions
Pragma version>=0.6.0<0.8.0 (contracts/libraries/LibSafeMath128.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (contracts/libraries/LibSafeMath32.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (contracts/libraries/LibSafeMathSigned128.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (contracts/libraries/LibSafeMathSigned96.sol#3) is too complex
Pragma version>=0.6.0<0.8.0 (contracts/libraries/LibStrings.sol#3) is too complex
Pragma version=0.7.6 (contracts/libraries/LibUnripe.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Oracle/LibCurveOracle.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Silo/LibLegacyTokenSilo.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/Silo/LibLegacyWhitelist.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/Silo/LibSilo.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/Silo/LibSiloPermit.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/Silo/LibTokenSilo.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/Silo/LibUnripeSilo.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Silo/LibWhitelist.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/Token/LibApprove.sol#6) allows old versions
Pragma version^0.7.6 (contracts/libraries/Token/LibBalance.sol#3) allows old versions
Pragma version^0.7.6 (contracts/libraries/Token/LibEth.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/Token/LibTokenApprove.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Token/LibTokenPermit.sol#5) allows old versions
Pragma version=0.7.6 (contracts/libraries/Token/LibTransfer.sol#3) allows old versions
Pragma version=0.7.6 (contracts/libraries/Token/LibWeth.sol#6) allows old versions
Pragma version=0.7.6 (contracts/mocks/MockBlockBasefee.sol#5) allows old versions
Pragma version=0.7.6 (contracts/mocks/MockDiamond.sol#2) allows old versions
Pragma version=0.7.6 (contracts/mocks/MockERC1155.sol#2) allows old versions
Pragma version=0.7.6 (contracts/mocks/MockERC721.sol#2) allows old versions
Pragma version=0.7.6 (contracts/mocks/MockFertilizer.sol#5) allows old versions
Pragma version=0.7.6 (contracts/mocks/MockInitDiamond.sol#5) allows old versions
Pragma version=0.7.6 (contracts/mocks/MockSiloToken.sol#5) allows old versions
Pragma version=0.7.6 (contracts/mocks/MockToken.sol#5) allows old versions
Pragma version=0.7.6 (contracts/mocks/MockWETH.sol#5) allows old versions
Pragma version^0.7.6 (contracts/mocks/curve/MockCurveFactory.sol#5) allows old versions
Pragma version^0.7.6 (contracts/mocks/curve/MockCurveZap.sol#9) allows old versions
Pragma version^0.7.6 (contracts/mocks/curve/MockMeta3Curve.sol#5) allows old versions
Pragma version^0.7.6 (contracts/mocks/curve/MockPlainCurve.sol#5) allows old versions
Pragma version=0.7.6 (contracts/mocks/mockFacets/MockAdminFacet.sol#4) allows old versions
Pragma version^0.7.6 (contracts/mocks/mockFacets/MockConvertFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/mocks/mockFacets/MockFertilizerFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/mocks/mockFacets/MockFieldFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/mocks/mockFacets/MockFundraiserFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/mocks/mockFacets/MockMarketplaceFacet.sol#5) allows old versions
Pragma version^0.7.6 (contracts/mocks/mockFacets/MockSeasonFacet.sol#4) allows old versions
Pragma version=0.7.6 (contracts/mocks/mockFacets/MockSiloFacet.sol#5) allows old versions
Pragma version^0.7.6 (contracts/mocks/mockFacets/MockUnripeFacet.sol#5) allows old versions
Pragma version=0.7.6 (contracts/mocks/uniswap/MockUniswapV3Deployer.sol#2) allows old versions
Pragma version=0.7.6 (contracts/mocks/uniswap/MockUniswapV3Factory.sol#2) allows old versions
Pragma version=0.7.6 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#2) allows old versions
Pragma version=0.7.6 (contracts/mocks/uniswap/NoDelegateCall.sol#2) allows old versions
Pragma version=0.7.6 (contracts/pipeline/Pipeline.sol#2) allows old versions
Pragma version=0.7.6 (contracts/tokens/Bean.sol#5) allows old versions
Pragma version0.7.6 (contracts/tokens/ERC20/BeanstalkERC20.sol#3) allows old versions
Pragma version^0.7.6 (contracts/tokens/ERC20/ERC20Permit.sol#4) allows old versions
Pragma version^0.7.6 (contracts/tokens/Fertilizer/Fertilizer.sol#3) allows old versions
Pragma version^0.7.6 (contracts/tokens/Fertilizer/Fertilizer1155.sol#5) allows old versions
Pragma version^0.7.6 (contracts/tokens/Fertilizer/FertilizerPreMint.sol#3) allows old versions
Pragma version^0.7.6 (contracts/tokens/Fertilizer/Internalizer.sol#3) allows old versions
Pragma version=0.7.6 (contracts/tokens/UnripeBean.sol#5) allows old versions
Pragma version=0.7.6 (contracts/tokens/UnripeBean3Crv.sol#5) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in TransferHelper.safeTransfer(address,address,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#14-22):
	- (success,data) = token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector,to,value)) (node_modules/@uniswap/v3-core/contracts/libraries/TransferHelper.sol#19-20)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Low level call in AddressUpgradeable.sendValue(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#53-59):
	- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#57)
Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#119)
Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#139-145):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#143)
Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#53-59):
	- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#57)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#143)
Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#167)
Low level call in DepotFacet.readPipe(PipeCall) (contracts/beanstalk/farm/DepotFacet.sol#84-93):
	- (success,result) = p.target.staticcall(p.data) (contracts/beanstalk/farm/DepotFacet.sol#91)
Low level call in FarmFacet._farm(bytes) (contracts/beanstalk/farm/FarmFacet.sol#81-87):
	- (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#85)
Low level call in FarmFacet._farmMem(bytes) (contracts/beanstalk/farm/FarmFacet.sol#90-96):
	- (success,result) = facet.delegatecall(data) (contracts/beanstalk/farm/FarmFacet.sol#94)
Low level call in Depot.farm(bytes[]) (contracts/depot/Depot.sol#43-54):
	- (success,result) = address(this).delegatecall(data[i]) (contracts/depot/Depot.sol#50)
Low level call in LibDiamond.initializeDiamondCut(address,bytes) (contracts/libraries/LibDiamond.sol#214-232):
	- (success,error) = _init.delegatecall(_calldata) (contracts/libraries/LibDiamond.sol#222)
Low level call in LibTokenSilo.beanDenominatedValue(address,uint256) (contracts/libraries/Silo/LibTokenSilo.sol#279-306):
	- (success,data) = address(this).staticcall(callData) (contracts/libraries/Silo/LibTokenSilo.sol#292-294)
Low level call in LibWhitelist.whitelistToken(address,bytes4,uint32,uint32) (contracts/libraries/Silo/LibWhitelist.sol#60-82):
	- (success) = address(this).staticcall(data) (contracts/libraries/Silo/LibWhitelist.sol#70)
Low level call in LibEth.refundEth() (contracts/libraries/Token/LibEth.sol#16-26):
	- (success) = msg.sender.call{value: address(this).balance}(new bytes(0)) (contracts/libraries/Token/LibEth.sol#21-23)
Low level call in LibWeth.unwrap(uint256,LibTransfer.From) (contracts/libraries/Token/LibWeth.sol#24-29):
	- (success) = msg.sender.call{value: amount}(new bytes(0)) (contracts/libraries/Token/LibWeth.sol#27)
Low level call in MockWETH.withdraw(uint256) (contracts/mocks/MockWETH.sol#27-33):
	- (success) = msg.sender.call{value: wad}() (contracts/mocks/MockWETH.sol#30)
Low level call in MockSiloFacet.beanDenominatedValueLegacy(address,uint256) (contracts/mocks/mockFacets/MockSiloFacet.sol#280-307):
	- (success,data) = address(this).staticcall(callData) (contracts/mocks/mockFacets/MockSiloFacet.sol#293-295)
Low level call in MockUniswapV3Pool.balance0() (contracts/mocks/uniswap/MockUniswapV3Pool.sol#148-153):
	- (success,data) = token0.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector,address(this))) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#149-150)
Low level call in MockUniswapV3Pool.balance1() (contracts/mocks/uniswap/MockUniswapV3Pool.sol#158-163):
	- (success,data) = token1.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector,address(this))) (contracts/mocks/uniswap/MockUniswapV3Pool.sol#159-160)
Low level call in Pipeline._pipe(address,bytes,uint256) (contracts/pipeline/Pipeline.sol#69-77):
	- (success,result) = target.call{value: value}(data) (contracts/pipeline/Pipeline.sol#75)
Low level call in Pipeline._pipeMem(address,bytes,uint256) (contracts/pipeline/Pipeline.sol#80-88):
	- (success,result) = target.call{value: value}(data) (contracts/pipeline/Pipeline.sol#86)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
BDVFacet (contracts/beanstalk/silo/BDVFacet.sol#17-49) should inherit from IBDV (contracts/ecosystem/price/CurvePrice.sol#13-15)
WhitelistFacet (contracts/beanstalk/silo/WhitelistFacet.sol#16-62) should inherit from IBS (contracts/beanstalk/init/InitBip12.sol#15-17)
MockSiloToken (contracts/mocks/MockSiloToken.sol#15-43) should inherit from IBean (contracts/interfaces/IBean.sol#13-17)
MockWETH (contracts/mocks/MockWETH.sol#13-35) should inherit from IWETH (contracts/interfaces/IWETH.sol#14-19)
MockCurveFactory (contracts/mocks/curve/MockCurveFactory.sol#21-44) should inherit from ICurveFactory (contracts/interfaces/ICurve.sol#55-58)
MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from IERC20Upgradeable (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#8-77)
MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from IERC20D (contracts/ecosystem/price/CurvePrice.sol#9-11)
MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from ICurvePool2R (contracts/interfaces/ICurve.sol#33-37)
MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from ICurvePoolNoReturn128 (contracts/interfaces/ICurve.sol#76-79)
MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from IMeta3Curve (contracts/libraries/Curve/LibMetaCurve.sol#13-17)
MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from IMeta3CurveOracle (contracts/libraries/Oracle/LibCurveOracle.sol#13-18)
MockMeta3Curve (contracts/mocks/curve/MockMeta3Curve.sol#41-710) should inherit from ResetPool (contracts/mocks/mockFacets/MockSeasonFacet.sol#20-22)
MockPlainCurve (contracts/mocks/curve/MockPlainCurve.sol#21-517) should inherit from IERC20Upgradeable (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#8-77)
MockPlainCurve (contracts/mocks/curve/MockPlainCurve.sol#21-517) should inherit from IERC20D (contracts/ecosystem/price/CurvePrice.sol#9-11)
MockPlainCurve (contracts/mocks/curve/MockPlainCurve.sol#21-517) should inherit from IMeta3Curve (contracts/libraries/Curve/LibMetaCurve.sol#13-17)
MockPlainCurve (contracts/mocks/curve/MockPlainCurve.sol#21-517) should inherit from IMeta3CurveOracle (contracts/libraries/Oracle/LibCurveOracle.sol#13-18)
MockPlainCurve (contracts/mocks/curve/MockPlainCurve.sol#21-517) should inherit from ResetPool (contracts/mocks/mockFacets/MockSeasonFacet.sol#20-22)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance
INFO:Detectors:
Parameter MockContract.setAccount(address)._account (contracts/mocks/MockContract.sol#16) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Function Mock3Curve.get_virtual_price() (contracts/mocks/curve/Mock3Curve.sol#12-14) is not in mixedCase
Function Mock3Curve.set_virtual_price(uint256) (contracts/mocks/curve/Mock3Curve.sol#16-18) is not in mixedCase
Parameter Mock3Curve.set_virtual_price(uint256)._virtual_price (contracts/mocks/curve/Mock3Curve.sol#16) is not in mixedCase
Variable Mock3Curve.virtual_price (contracts/mocks/curve/Mock3Curve.sol#10) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Function OwnableUpgradeable.__Ownable_init() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#27-30) is not in mixedCase
Function OwnableUpgradeable.__Ownable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#32-36) is not in mixedCase
Variable OwnableUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#74) is not in mixedCase
Function ERC165Upgradeable.__ERC165_init() (node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#25-27) is not in mixedCase
Function ERC165Upgradeable.__ERC165_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#29-33) is not in mixedCase
Variable ERC165Upgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol#59) is not in mixedCase
Function ERC1155Upgradeable.__ERC1155_init(string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#56-60) is not in mixedCase
Function ERC1155Upgradeable.__ERC1155_init_unchained(string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#62-70) is not in mixedCase
Variable ERC1155Upgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol#421) is not in mixedCase
Function ContextUpgradeable.__Context_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#17-19) is not in mixedCase
Function ContextUpgradeable.__Context_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#21-22) is not in mixedCase
Variable ContextUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#31) is not in mixedCase
Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#39-41) is not in mixedCase
Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#43-45) is not in mixedCase
Variable ReentrancyGuardUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol#67) is not in mixedCase
Variable EIP712._CACHED_DOMAIN_SEPARATOR (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#28) is not in mixedCase
Variable EIP712._CACHED_CHAIN_ID (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#29) is not in mixedCase
Variable EIP712._HASHED_NAME (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#31) is not in mixedCase
Variable EIP712._HASHED_VERSION (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#32) is not in mixedCase
Variable EIP712._TYPE_HASH (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#33) is not in mixedCase
Function IERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol#50) is not in mixedCase
Parameter ERC721.safeTransferFrom(address,address,uint256,bytes)._data (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#245) is not in mixedCase
Function C.UniV3EthUsdc() (contracts/C.sol#153-155) is not in mixedCase
Parameter FertilizerFacet.getHumidity(uint128)._s (contracts/beanstalk/barn/FertilizerFacet.sol#125) is not in mixedCase
Function UnripeFacet._getPenalizedUnderlying(address,uint256,uint256) (contracts/beanstalk/barn/UnripeFacet.sol#139-147) is not in mixedCase
Parameter DiamondCutFacet.diamondCut(IDiamondCut.FacetCut[],address,bytes)._diamondCut (contracts/beanstalk/diamond/DiamondCutFacet.sol#23) is not in mixedCase
Parameter DiamondCutFacet.diamondCut(IDiamondCut.FacetCut[],address,bytes)._init (contracts/beanstalk/diamond/DiamondCutFacet.sol#24) is not in mixedCase
Parameter DiamondCutFacet.diamondCut(IDiamondCut.FacetCut[],address,bytes)._calldata (contracts/beanstalk/diamond/DiamondCutFacet.sol#25) is not in mixedCase
Parameter DiamondLoupeFacet.facetFunctionSelectors(address)._facet (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#42) is not in mixedCase
Parameter DiamondLoupeFacet.facetAddress(bytes4)._functionSelector (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#63) is not in mixedCase
Parameter DiamondLoupeFacet.supportsInterface(bytes4)._interfaceId (contracts/beanstalk/diamond/DiamondLoupeFacet.sol#74) is not in mixedCase
Parameter OwnershipFacet.transferOwnership(address)._newOwner (contracts/beanstalk/diamond/OwnershipFacet.sol#15) is not in mixedCase
Constant InitBip1.developmentBudget (contracts/beanstalk/init/InitBip1.sol#19) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip1.marketingBudget (contracts/beanstalk/init/InitBip1.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip14.beanstalkFarms (contracts/beanstalk/init/InitBip14.sol#19) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip14.beanstalkFarmsBudget (contracts/beanstalk/init/InitBip14.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip22.beanstalkFarms (contracts/beanstalk/init/InitBip22.sol#16-17) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip22.beanstalkFarmsBudget (contracts/beanstalk/init/InitBip22.sol#18) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip23.beanSprout (contracts/beanstalk/init/InitBip23.sol#16-17) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip23.beanSproutBudget (contracts/beanstalk/init/InitBip23.sol#18) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip24.rootAddress (contracts/beanstalk/init/InitBip24.sol#15-16) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip24.payment (contracts/beanstalk/init/InitBip24.sol#17) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip5.payee (contracts/beanstalk/init/InitBip5.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip5.token (contracts/beanstalk/init/InitBip5.sol#21) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip5.bean (contracts/beanstalk/init/InitBip5.sol#22) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip7.publius (contracts/beanstalk/init/InitBip7.sol#16) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip7.bean (contracts/beanstalk/init/InitBip7.sol#17) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip7.payment (contracts/beanstalk/init/InitBip7.sol#18) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip8.beanSprout (contracts/beanstalk/init/InitBip8.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip8.beanstalkFarms (contracts/beanstalk/init/InitBip8.sol#21) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip8.beanSproutBudget (contracts/beanstalk/init/InitBip8.sol#23) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InitBip8.beanstalkFarmsBudget (contracts/beanstalk/init/InitBip8.sol#24) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter InitHotFix2.addBeanDeposit(address,uint32,uint256)._s (contracts/beanstalk/init/InitHotFix2.sol#60) is not in mixedCase
Function Listing.__fillListing(address,Listing.PodListing,uint256,uint256) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#180-203) is not in mixedCase
Function Listing.__fillListingV2(address,Listing.PodListing,bytes,uint256,uint256) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#205-230) is not in mixedCase
Parameter ApprovalFacet.isApprovedForAll(address,address)._owner (contracts/beanstalk/silo/ApprovalFacet.sol#196) is not in mixedCase
Parameter ApprovalFacet.isApprovedForAll(address,address)._operator (contracts/beanstalk/silo/ApprovalFacet.sol#197) is not in mixedCase
Parameter SiloFacet.deposit(address,uint256,LibTransfer.From)._amount (contracts/beanstalk/silo/SiloFacet/SiloFacet.sol#51) is not in mixedCase
Constant Depot.beanstalk (contracts/depot/Depot.sol#28-29) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter CurvePrice.getCurveDeltaB(uint256,uint256).D (contracts/ecosystem/price/CurvePrice.sol#54) is not in mixedCase
Constant CurvePrice.i (contracts/ecosystem/price/CurvePrice.sol#32) is not in UPPER_CASE_WITH_UNDERSCORES
Constant CurvePrice.j (contracts/ecosystem/price/CurvePrice.sol#33) is not in UPPER_CASE_WITH_UNDERSCORES
Function IBlockBasefee.block_basefee() (contracts/interfaces/IBlockBasefee.sol#7) is not in mixedCase
Function ICurvePool.A_precise() (contracts/interfaces/ICurve.sol#6) is not in mixedCase
Function ICurvePool.get_balances() (contracts/interfaces/ICurve.sol#7) is not in mixedCase
Function ICurvePool.add_liquidity(uint256[2],uint256) (contracts/interfaces/ICurve.sol#9) is not in mixedCase
Parameter ICurvePool.add_liquidity(uint256[2],uint256).min_mint_amount (contracts/interfaces/ICurve.sol#9) is not in mixedCase
Function ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/interfaces/ICurve.sol#10) is not in mixedCase
Parameter ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/interfaces/ICurve.sol#10) is not in mixedCase
Parameter ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/interfaces/ICurve.sol#10) is not in mixedCase
Function ICurvePool.get_virtual_price() (contracts/interfaces/ICurve.sol#14) is not in mixedCase
Function ICurvePool.calc_token_amount(uint256[2],bool) (contracts/interfaces/ICurve.sol#15) is not in mixedCase
Function ICurvePool.calc_withdraw_one_coin(uint256,int128) (contracts/interfaces/ICurve.sol#16) is not in mixedCase
Parameter ICurvePool.calc_withdraw_one_coin(uint256,int128)._token_amount (contracts/interfaces/ICurve.sol#16) is not in mixedCase
Parameter ICurvePool.exchange(int128,int128,uint256,uint256).min_dy (contracts/interfaces/ICurve.sol#17) is not in mixedCase
Function ICurvePool.exchange_underlying(int128,int128,uint256,uint256) (contracts/interfaces/ICurve.sol#18) is not in mixedCase
Parameter ICurvePool.exchange_underlying(int128,int128,uint256,uint256).min_dy (contracts/interfaces/ICurve.sol#18) is not in mixedCase
Function ICurveZap.add_liquidity(address,uint256[4],uint256) (contracts/interfaces/ICurve.sol#23) is not in mixedCase
Parameter ICurveZap.add_liquidity(address,uint256[4],uint256)._deposit_amounts (contracts/interfaces/ICurve.sol#23) is not in mixedCase
Parameter ICurveZap.add_liquidity(address,uint256[4],uint256)._min_mint_amount (contracts/interfaces/ICurve.sol#23) is not in mixedCase
Function ICurveZap.calc_token_amount(address,uint256[4],bool) (contracts/interfaces/ICurve.sol#24) is not in mixedCase
Parameter ICurveZap.calc_token_amount(address,uint256[4],bool)._is_deposit (contracts/interfaces/ICurve.sol#24) is not in mixedCase
Parameter ICurvePoolR.exchange(int128,int128,uint256,uint256,address).min_dy (contracts/interfaces/ICurve.sol#28) is not in mixedCase
Function ICurvePoolR.exchange_underlying(int128,int128,uint256,uint256,address) (contracts/interfaces/ICurve.sol#29) is not in mixedCase
Parameter ICurvePoolR.exchange_underlying(int128,int128,uint256,uint256,address).min_dy (contracts/interfaces/ICurve.sol#29) is not in mixedCase
Function ICurvePoolR.remove_liquidity_one_coin(uint256,int128,uint256,address) (contracts/interfaces/ICurve.sol#30) is not in mixedCase
Parameter ICurvePoolR.remove_liquidity_one_coin(uint256,int128,uint256,address)._token_amount (contracts/interfaces/ICurve.sol#30) is not in mixedCase
Parameter ICurvePoolR.remove_liquidity_one_coin(uint256,int128,uint256,address).min_amount (contracts/interfaces/ICurve.sol#30) is not in mixedCase
Function ICurvePool2R.add_liquidity(uint256[2],uint256,address) (contracts/interfaces/ICurve.sol#34) is not in mixedCase
Parameter ICurvePool2R.add_liquidity(uint256[2],uint256,address).min_mint_amount (contracts/interfaces/ICurve.sol#34) is not in mixedCase
Function ICurvePool2R.remove_liquidity(uint256,uint256[2],address) (contracts/interfaces/ICurve.sol#35) is not in mixedCase
Parameter ICurvePool2R.remove_liquidity(uint256,uint256[2],address)._burn_amount (contracts/interfaces/ICurve.sol#35) is not in mixedCase
Parameter ICurvePool2R.remove_liquidity(uint256,uint256[2],address)._min_amounts (contracts/interfaces/ICurve.sol#35) is not in mixedCase
Function ICurvePool2R.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/interfaces/ICurve.sol#36) is not in mixedCase
Parameter ICurvePool2R.remove_liquidity_imbalance(uint256[2],uint256,address)._max_burn_amount (contracts/interfaces/ICurve.sol#36) is not in mixedCase
Function ICurvePool3R.add_liquidity(uint256[3],uint256,address) (contracts/interfaces/ICurve.sol#40) is not in mixedCase
Parameter ICurvePool3R.add_liquidity(uint256[3],uint256,address).min_mint_amount (contracts/interfaces/ICurve.sol#40) is not in mixedCase
Function ICurvePool3R.remove_liquidity(uint256,uint256[3],address) (contracts/interfaces/ICurve.sol#41) is not in mixedCase
Parameter ICurvePool3R.remove_liquidity(uint256,uint256[3],address)._burn_amount (contracts/interfaces/ICurve.sol#41) is not in mixedCase
Parameter ICurvePool3R.remove_liquidity(uint256,uint256[3],address)._min_amounts (contracts/interfaces/ICurve.sol#41) is not in mixedCase
Function ICurvePool3R.remove_liquidity_imbalance(uint256[3],uint256,address) (contracts/interfaces/ICurve.sol#42) is not in mixedCase
Parameter ICurvePool3R.remove_liquidity_imbalance(uint256[3],uint256,address)._max_burn_amount (contracts/interfaces/ICurve.sol#42) is not in mixedCase
Function ICurvePool4R.add_liquidity(uint256[4],uint256,address) (contracts/interfaces/ICurve.sol#46) is not in mixedCase
Parameter ICurvePool4R.add_liquidity(uint256[4],uint256,address).min_mint_amount (contracts/interfaces/ICurve.sol#46) is not in mixedCase
Function ICurvePool4R.remove_liquidity(uint256,uint256[4],address) (contracts/interfaces/ICurve.sol#47) is not in mixedCase
Parameter ICurvePool4R.remove_liquidity(uint256,uint256[4],address)._burn_amount (contracts/interfaces/ICurve.sol#47) is not in mixedCase
Parameter ICurvePool4R.remove_liquidity(uint256,uint256[4],address)._min_amounts (contracts/interfaces/ICurve.sol#47) is not in mixedCase
Function ICurvePool4R.remove_liquidity_imbalance(uint256[4],uint256,address) (contracts/interfaces/ICurve.sol#48) is not in mixedCase
Parameter ICurvePool4R.remove_liquidity_imbalance(uint256[4],uint256,address)._max_burn_amount (contracts/interfaces/ICurve.sol#48) is not in mixedCase
Function I3Curve.get_virtual_price() (contracts/interfaces/ICurve.sol#52) is not in mixedCase
Function ICurveFactory.get_coins(address) (contracts/interfaces/ICurve.sol#56) is not in mixedCase
Function ICurveFactory.get_underlying_coins(address) (contracts/interfaces/ICurve.sol#57) is not in mixedCase
Function ICurveCryptoFactory.get_coins(address) (contracts/interfaces/ICurve.sol#61) is not in mixedCase
Parameter ICurvePoolC.exchange(uint256,uint256,uint256,uint256).min_dy (contracts/interfaces/ICurve.sol#65) is not in mixedCase
Parameter ICurvePoolNoReturn.exchange(uint256,uint256,uint256,uint256).min_dy (contracts/interfaces/ICurve.sol#69) is not in mixedCase
Function ICurvePoolNoReturn.add_liquidity(uint256[3],uint256) (contracts/interfaces/ICurve.sol#70) is not in mixedCase
Parameter ICurvePoolNoReturn.add_liquidity(uint256[3],uint256).min_mint_amount (contracts/interfaces/ICurve.sol#70) is not in mixedCase
Function ICurvePoolNoReturn.remove_liquidity(uint256,uint256[3]) (contracts/interfaces/ICurve.sol#71) is not in mixedCase
Parameter ICurvePoolNoReturn.remove_liquidity(uint256,uint256[3])._burn_amount (contracts/interfaces/ICurve.sol#71) is not in mixedCase
Parameter ICurvePoolNoReturn.remove_liquidity(uint256,uint256[3])._min_amounts (contracts/interfaces/ICurve.sol#71) is not in mixedCase
Function ICurvePoolNoReturn.remove_liquidity_imbalance(uint256[3],uint256) (contracts/interfaces/ICurve.sol#72) is not in mixedCase
Parameter ICurvePoolNoReturn.remove_liquidity_imbalance(uint256[3],uint256)._max_burn_amount (contracts/interfaces/ICurve.sol#72) is not in mixedCase
Function ICurvePoolNoReturn.remove_liquidity_one_coin(uint256,uint256,uint256) (contracts/interfaces/ICurve.sol#73) is not in mixedCase
Parameter ICurvePoolNoReturn.remove_liquidity_one_coin(uint256,uint256,uint256)._token_amount (contracts/interfaces/ICurve.sol#73) is not in mixedCase
Parameter ICurvePoolNoReturn.remove_liquidity_one_coin(uint256,uint256,uint256).min_amount (contracts/interfaces/ICurve.sol#73) is not in mixedCase
Parameter ICurvePoolNoReturn128.exchange(int128,int128,uint256,uint256).min_dy (contracts/interfaces/ICurve.sol#77) is not in mixedCase
Function ICurvePoolNoReturn128.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/interfaces/ICurve.sol#78) is not in mixedCase
Parameter ICurvePoolNoReturn128.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/interfaces/ICurve.sol#78) is not in mixedCase
Parameter ICurvePoolNoReturn128.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/interfaces/ICurve.sol#78) is not in mixedCase
Function IERC4494.DOMAIN_SEPARATOR() (contracts/interfaces/IERC4494.sol#28) is not in mixedCase
Parameter LibBeanMetaCurve.getDeltaBWithD(uint256,uint256).D (contracts/libraries/Curve/LibBeanMetaCurve.sol#53) is not in mixedCase
Constant LibBeanMetaCurve.i (contracts/libraries/Curve/LibBeanMetaCurve.sol#21) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LibBeanMetaCurve.j (contracts/libraries/Curve/LibBeanMetaCurve.sol#22) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter LibCurve.getPrice(uint256[2],uint256,uint256,uint256).D (contracts/libraries/Curve/LibCurve.sol#28) is not in mixedCase
Parameter LibCurve.getPrice(uint256[2],uint256[2],uint256,uint256).D (contracts/libraries/Curve/LibCurve.sol#41) is not in mixedCase
Parameter LibCurve.getY(uint256,uint256[2],uint256,uint256).D (contracts/libraries/Curve/LibCurve.sol#53) is not in mixedCase
Parameter LibCurve.getYD(uint256,uint256,uint256[2],uint256).D (contracts/libraries/Curve/LibCurve.sol#118) is not in mixedCase
Constant LibCurve.i (contracts/libraries/Curve/LibCurve.sol#19) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LibCurve.j (contracts/libraries/Curve/LibCurve.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES
Function IMeta3Curve.A_precise() (contracts/libraries/Curve/LibMetaCurve.sol#14) is not in mixedCase
Function IMeta3Curve.get_previous_balances() (contracts/libraries/Curve/LibMetaCurve.sol#15) is not in mixedCase
Function IMeta3Curve.get_virtual_price() (contracts/libraries/Curve/LibMetaCurve.sol#16) is not in mixedCase
Parameter LibBytes.toUint8(bytes,uint256)._bytes (contracts/libraries/LibBytes.sol#18) is not in mixedCase
Parameter LibBytes.toUint8(bytes,uint256)._start (contracts/libraries/LibBytes.sol#18) is not in mixedCase
Parameter LibBytes.toUint32(bytes,uint256)._bytes (contracts/libraries/LibBytes.sol#34) is not in mixedCase
Parameter LibBytes.toUint32(bytes,uint256)._start (contracts/libraries/LibBytes.sol#34) is not in mixedCase
Parameter LibBytes.toUint256(bytes,uint256)._bytes (contracts/libraries/LibBytes.sol#50) is not in mixedCase
Parameter LibBytes.toUint256(bytes,uint256)._start (contracts/libraries/LibBytes.sol#50) is not in mixedCase
Parameter LibBytes.packAddressAndStem(address,int96)._address (contracts/libraries/LibBytes.sol#76) is not in mixedCase
Parameter LibDiamond.setContractOwner(address)._newOwner (contracts/libraries/LibDiamond.sol#53) is not in mixedCase
Parameter LibDiamond.addDiamondFunctions(address,address)._diamondCutFacet (contracts/libraries/LibDiamond.sol#77) is not in mixedCase
Parameter LibDiamond.addDiamondFunctions(address,address)._diamondLoupeFacet (contracts/libraries/LibDiamond.sol#78) is not in mixedCase
Parameter LibDiamond.diamondCut(IDiamondCut.FacetCut[],address,bytes)._diamondCut (contracts/libraries/LibDiamond.sol#100) is not in mixedCase
Parameter LibDiamond.diamondCut(IDiamondCut.FacetCut[],address,bytes)._init (contracts/libraries/LibDiamond.sol#101) is not in mixedCase
Parameter LibDiamond.diamondCut(IDiamondCut.FacetCut[],address,bytes)._calldata (contracts/libraries/LibDiamond.sol#102) is not in mixedCase
Parameter LibDiamond.addFunctions(address,bytes4[])._facetAddress (contracts/libraries/LibDiamond.sol#120) is not in mixedCase
Parameter LibDiamond.addFunctions(address,bytes4[])._functionSelectors (contracts/libraries/LibDiamond.sol#120) is not in mixedCase
Parameter LibDiamond.replaceFunctions(address,bytes4[])._facetAddress (contracts/libraries/LibDiamond.sol#138) is not in mixedCase
Parameter LibDiamond.replaceFunctions(address,bytes4[])._functionSelectors (contracts/libraries/LibDiamond.sol#138) is not in mixedCase
Parameter LibDiamond.removeFunctions(address,bytes4[])._facetAddress (contracts/libraries/LibDiamond.sol#157) is not in mixedCase
Parameter LibDiamond.removeFunctions(address,bytes4[])._functionSelectors (contracts/libraries/LibDiamond.sol#157) is not in mixedCase
Parameter LibDiamond.addFacet(LibDiamond.DiamondStorage,address)._facetAddress (contracts/libraries/LibDiamond.sol#169) is not in mixedCase
Parameter LibDiamond.addFunction(LibDiamond.DiamondStorage,bytes4,uint96,address)._selector (contracts/libraries/LibDiamond.sol#176) is not in mixedCase
Parameter LibDiamond.addFunction(LibDiamond.DiamondStorage,bytes4,uint96,address)._selectorPosition (contracts/libraries/LibDiamond.sol#176) is not in mixedCase
Parameter LibDiamond.addFunction(LibDiamond.DiamondStorage,bytes4,uint96,address)._facetAddress (contracts/libraries/LibDiamond.sol#176) is not in mixedCase
Parameter LibDiamond.removeFunction(LibDiamond.DiamondStorage,address,bytes4)._facetAddress (contracts/libraries/LibDiamond.sol#182) is not in mixedCase
Parameter LibDiamond.removeFunction(LibDiamond.DiamondStorage,address,bytes4)._selector (contracts/libraries/LibDiamond.sol#182) is not in mixedCase
Parameter LibDiamond.initializeDiamondCut(address,bytes)._init (contracts/libraries/LibDiamond.sol#214) is not in mixedCase
Parameter LibDiamond.initializeDiamondCut(address,bytes)._calldata (contracts/libraries/LibDiamond.sol#214) is not in mixedCase
Parameter LibDiamond.enforceHasContractCode(address,string)._contract (contracts/libraries/LibDiamond.sol#234) is not in mixedCase
Parameter LibDiamond.enforceHasContractCode(address,string)._errorMessage (contracts/libraries/LibDiamond.sol#234) is not in mixedCase
Parameter LibDibbler.sow(uint256,uint256,address,bool)._morningTemperature (contracts/libraries/LibDibbler.sol#68) is not in mixedCase
Parameter LibDibbler.beansToPods(uint256,uint256)._morningTemperature (contracts/libraries/LibDibbler.sol#315) is not in mixedCase
Parameter LibDibbler.scaleSoilUp(uint256,uint256,uint256)._morningTemperature (contracts/libraries/LibDibbler.sol#333) is not in mixedCase
Parameter LibDibbler.scaleSoilDown(uint256,uint256,uint256)._morningTemperature (contracts/libraries/LibDibbler.sol#359) is not in mixedCase
Function IMeta3CurveOracle.block_timestamp_last() (contracts/libraries/Oracle/LibCurveOracle.sol#14) is not in mixedCase
Function IMeta3CurveOracle.get_price_cumulative_last() (contracts/libraries/Oracle/LibCurveOracle.sol#15) is not in mixedCase
Function IMeta3CurveOracle.get_balances() (contracts/libraries/Oracle/LibCurveOracle.sol#16) is not in mixedCase
Function IMeta3CurveOracle.get_previous_balances() (contracts/libraries/Oracle/LibCurveOracle.sol#17) is not in mixedCase
Function LibSilo.__mow(address,address) (contracts/libraries/Silo/LibSilo.sol#352-382) is not in mixedCase
Function MockBlockBasefee.block_basefee() (contracts/mocks/MockBlockBasefee.sol#18-20) is not in mixedCase
Parameter MockDiamond.mockInit(address)._contractOwner (contracts/mocks/MockDiamond.sol#24) is not in mixedCase
Function MockCurveFactory.set_coins(address,address[4]) (contracts/mocks/curve/MockCurveFactory.sol#27-30) is not in mixedCase
Parameter MockCurveFactory.set_coins(address,address[4])._pool (contracts/mocks/curve/MockCurveFactory.sol#27) is not in mixedCase
Parameter MockCurveFactory.set_coins(address,address[4])._coins (contracts/mocks/curve/MockCurveFactory.sol#27) is not in mixedCase
Function MockCurveFactory.set_underlying_coins(address,address[8]) (contracts/mocks/curve/MockCurveFactory.sol#32-34) is not in mixedCase
Parameter MockCurveFactory.set_underlying_coins(address,address[8])._pool (contracts/mocks/curve/MockCurveFactory.sol#32) is not in mixedCase
Parameter MockCurveFactory.set_underlying_coins(address,address[8])._underlying_coins (contracts/mocks/curve/MockCurveFactory.sol#32) is not in mixedCase
Function MockCurveFactory.get_coins(address) (contracts/mocks/curve/MockCurveFactory.sol#36-39) is not in mixedCase
Parameter MockCurveFactory.get_coins(address)._pool (contracts/mocks/curve/MockCurveFactory.sol#36) is not in mixedCase
Function MockCurveFactory.get_underlying_coins(address) (contracts/mocks/curve/MockCurveFactory.sol#40-42) is not in mixedCase
Parameter MockCurveFactory.get_underlying_coins(address)._pool (contracts/mocks/curve/MockCurveFactory.sol#40) is not in mixedCase
Variable MockCurveFactory.underlying_coins (contracts/mocks/curve/MockCurveFactory.sol#25) is not in mixedCase
Function MockCurveZap.add_liquidity(address,uint256[4],uint256) (contracts/mocks/curve/MockCurveZap.sol#26-32) is not in mixedCase
Function IMockCurvePool.A_precise() (contracts/mocks/curve/MockMeta3Curve.sol#20) is not in mixedCase
Function IMockCurvePool.get_balances() (contracts/mocks/curve/MockMeta3Curve.sol#21) is not in mixedCase
Function IMockCurvePool.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#23) is not in mixedCase
Parameter IMockCurvePool.add_liquidity(uint256[2],uint256).min_mint_amount (contracts/mocks/curve/MockMeta3Curve.sol#23) is not in mixedCase
Function IMockCurvePool.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/mocks/curve/MockMeta3Curve.sol#24) is not in mixedCase
Parameter IMockCurvePool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/mocks/curve/MockMeta3Curve.sol#24) is not in mixedCase
Parameter IMockCurvePool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/mocks/curve/MockMeta3Curve.sol#24) is not in mixedCase
Function IMockCurvePool.get_virtual_price() (contracts/mocks/curve/MockMeta3Curve.sol#28) is not in mixedCase
Function IMockCurvePool.calc_token_amount(uint256[2],bool) (contracts/mocks/curve/MockMeta3Curve.sol#29) is not in mixedCase
Function IMockCurvePool.calc_withdraw_one_coin(uint256,int128) (contracts/mocks/curve/MockMeta3Curve.sol#30) is not in mixedCase
Parameter IMockCurvePool.calc_withdraw_one_coin(uint256,int128)._token_amount (contracts/mocks/curve/MockMeta3Curve.sol#30) is not in mixedCase
Parameter IMockCurvePool.exchange(int128,int128,uint256,uint256).min_dy (contracts/mocks/curve/MockMeta3Curve.sol#31) is not in mixedCase
Function IMockCurvePool.exchange_underlying(int128,int128,uint256,uint256) (contracts/mocks/curve/MockMeta3Curve.sol#32) is not in mixedCase
Parameter IMockCurvePool.exchange_underlying(int128,int128,uint256,uint256).min_dy (contracts/mocks/curve/MockMeta3Curve.sol#32) is not in mixedCase
Function IMockCurvePool.set_virtual_price(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#34) is not in mixedCase
Parameter IMockCurvePool.set_virtual_price(uint256)._virtual_price (contracts/mocks/curve/MockMeta3Curve.sol#34) is not in mixedCase
Function IMockCurvePool.set_A_precise(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#35) is not in mixedCase
Function IMockCurvePool.set_supply(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#37) is not in mixedCase
Function IMockCurvePool.set_balances(uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#38) is not in mixedCase
Parameter MockMeta3Curve.init(address,address,address)._token (contracts/mocks/curve/MockMeta3Curve.sol#71) is not in mixedCase
Parameter MockMeta3Curve.init(address,address,address)._token2 (contracts/mocks/curve/MockMeta3Curve.sol#71) is not in mixedCase
Parameter MockMeta3Curve.init(address,address,address).base_pool (contracts/mocks/curve/MockMeta3Curve.sol#71) is not in mixedCase
Function MockMeta3Curve.A_precise() (contracts/mocks/curve/MockMeta3Curve.sol#78-80) is not in mixedCase
Function MockMeta3Curve.get_balances() (contracts/mocks/curve/MockMeta3Curve.sol#82-84) is not in mixedCase
Function MockMeta3Curve.get_previous_balances() (contracts/mocks/curve/MockMeta3Curve.sol#86-88) is not in mixedCase
Function MockMeta3Curve.get_virtual_price() (contracts/mocks/curve/MockMeta3Curve.sol#90-92) is not in mixedCase
Function MockMeta3Curve.set_A_precise(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#97-99) is not in mixedCase
Parameter MockMeta3Curve.set_A_precise(uint256)._a (contracts/mocks/curve/MockMeta3Curve.sol#97) is not in mixedCase
Function MockMeta3Curve.set_balances(uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#101-104) is not in mixedCase
Parameter MockMeta3Curve.set_balances(uint256[2])._balances (contracts/mocks/curve/MockMeta3Curve.sol#101) is not in mixedCase
Function MockMeta3Curve.set_supply(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#106-108) is not in mixedCase
Parameter MockMeta3Curve.set_supply(uint256)._supply (contracts/mocks/curve/MockMeta3Curve.sol#106) is not in mixedCase
Function MockMeta3Curve.set_virtual_price(uint256) (contracts/mocks/curve/MockMeta3Curve.sol#110-112) is not in mixedCase
Parameter MockMeta3Curve.set_virtual_price(uint256)._virtual_price (contracts/mocks/curve/MockMeta3Curve.sol#110) is not in mixedCase
Parameter MockMeta3Curve.update(uint256[2]).new_balances (contracts/mocks/curve/MockMeta3Curve.sol#116) is not in mixedCase
Function MockMeta3Curve.reset_cumulative() (contracts/mocks/curve/MockMeta3Curve.sol#127-130) is not in mixedCase
Function MockMeta3Curve.get_price_cumulative_last() (contracts/mocks/curve/MockMeta3Curve.sol#132-134) is not in mixedCase
Function MockMeta3Curve.block_timestamp_last() (contracts/mocks/curve/MockMeta3Curve.sol#136-138) is not in mixedCase
Function MockMeta3Curve.get_bean_price() (contracts/mocks/curve/MockMeta3Curve.sol#140-146) is not in mixedCase
Function MockMeta3Curve.get_rates() (contracts/mocks/curve/MockMeta3Curve.sol#148-152) is not in mixedCase
Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256)._i_ (contracts/mocks/curve/MockMeta3Curve.sol#163) is not in mixedCase
Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256)._j_ (contracts/mocks/curve/MockMeta3Curve.sol#164) is not in mixedCase
Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256).min_dy (contracts/mocks/curve/MockMeta3Curve.sol#166) is not in mixedCase
Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)._i_ (contracts/mocks/curve/MockMeta3Curve.sol#172) is not in mixedCase
Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)._j_ (contracts/mocks/curve/MockMeta3Curve.sol#173) is not in mixedCase
Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256,address).min_dy (contracts/mocks/curve/MockMeta3Curve.sol#175) is not in mixedCase
Parameter MockMeta3Curve.exchange(int128,int128,uint256,uint256,address)._receiver (contracts/mocks/curve/MockMeta3Curve.sol#176) is not in mixedCase
Function MockMeta3Curve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#205-207) is not in mixedCase
Parameter MockMeta3Curve.add_liquidity(uint256[2],uint256)._amounts (contracts/mocks/curve/MockMeta3Curve.sol#205) is not in mixedCase
Parameter MockMeta3Curve.add_liquidity(uint256[2],uint256)._min_mint_amount (contracts/mocks/curve/MockMeta3Curve.sol#205) is not in mixedCase
Function MockMeta3Curve.add_liquidity(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#209-264) is not in mixedCase
Parameter MockMeta3Curve.add_liquidity(uint256[2],uint256,address)._amounts (contracts/mocks/curve/MockMeta3Curve.sol#209) is not in mixedCase
Parameter MockMeta3Curve.add_liquidity(uint256[2],uint256,address)._min_mint_amount (contracts/mocks/curve/MockMeta3Curve.sol#209) is not in mixedCase
Parameter MockMeta3Curve.add_liquidity(uint256[2],uint256,address)._receiver (contracts/mocks/curve/MockMeta3Curve.sol#209) is not in mixedCase
Function MockMeta3Curve.remove_liquidity(uint256,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#266-271) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity(uint256,uint256[2])._burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#267) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity(uint256,uint256[2])._min_amounts (contracts/mocks/curve/MockMeta3Curve.sol#268) is not in mixedCase
Function MockMeta3Curve.remove_liquidity(uint256,uint256[2],address) (contracts/mocks/curve/MockMeta3Curve.sol#273-293) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)._burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#274) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)._min_amounts (contracts/mocks/curve/MockMeta3Curve.sol#275) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity(uint256,uint256[2],address)._receiver (contracts/mocks/curve/MockMeta3Curve.sol#276) is not in mixedCase
Function MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#295-300) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256)._amounts (contracts/mocks/curve/MockMeta3Curve.sol#296) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256)._max_burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#297) is not in mixedCase
Function MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#302-351) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)._amounts (contracts/mocks/curve/MockMeta3Curve.sol#303) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)._max_burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#304) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity_imbalance(uint256[2],uint256,address)._receiver (contracts/mocks/curve/MockMeta3Curve.sol#305) is not in mixedCase
Function MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/mocks/curve/MockMeta3Curve.sol#353-359) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256)._burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#354) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256)._i_ (contracts/mocks/curve/MockMeta3Curve.sol#355) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256)._min_received (contracts/mocks/curve/MockMeta3Curve.sol#356) is not in mixedCase
Function MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address) (contracts/mocks/curve/MockMeta3Curve.sol#367-384) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)._burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#368) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)._i_ (contracts/mocks/curve/MockMeta3Curve.sol#369) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)._min_received (contracts/mocks/curve/MockMeta3Curve.sol#370) is not in mixedCase
Parameter MockMeta3Curve.remove_liquidity_one_coin(uint256,int128,uint256,address)._receiver (contracts/mocks/curve/MockMeta3Curve.sol#371) is not in mixedCase
Function MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#386-416) is not in mixedCase
Parameter MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])._burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#386) is not in mixedCase
Parameter MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])._i_ (contracts/mocks/curve/MockMeta3Curve.sol#386) is not in mixedCase
Parameter MockMeta3Curve._calc_withdraw_one_coin(uint256,int128,uint256[2])._balances (contracts/mocks/curve/MockMeta3Curve.sol#386) is not in mixedCase
Function MockMeta3Curve.calc_withdraw_one_coin(uint256,int128) (contracts/mocks/curve/MockMeta3Curve.sol#418-420) is not in mixedCase
Parameter MockMeta3Curve.calc_withdraw_one_coin(uint256,int128)._burn_amount (contracts/mocks/curve/MockMeta3Curve.sol#418) is not in mixedCase
Function MockMeta3Curve._xp_mem(uint256[2],uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#422-426) is not in mixedCase
Parameter MockMeta3Curve._xp_mem(uint256[2],uint256[2])._rates (contracts/mocks/curve/MockMeta3Curve.sol#422) is not in mixedCase
Parameter MockMeta3Curve._xp_mem(uint256[2],uint256[2])._balances (contracts/mocks/curve/MockMeta3Curve.sol#422) is not in mixedCase
Function MockMeta3Curve.get_D(uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#428-451) is not in mixedCase
Parameter MockMeta3Curve.get_D(uint256[2],uint256)._a (contracts/mocks/curve/MockMeta3Curve.sol#428) is not in mixedCase
Function MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#453-495) is not in mixedCase
Parameter MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256).A (contracts/mocks/curve/MockMeta3Curve.sol#453) is not in mixedCase
Parameter MockMeta3Curve.get_y_D(uint256,uint256,uint256[2],uint256).D (contracts/mocks/curve/MockMeta3Curve.sol#453) is not in mixedCase
Function MockMeta3Curve.get_y(uint256,uint256,uint256,uint256[2]) (contracts/mocks/curve/MockMeta3Curve.sol#497-533) is not in mixedCase
Function MockMeta3Curve.calc_token_amount(uint256[2],bool) (contracts/mocks/curve/MockMeta3Curve.sol#534-547) is not in mixedCase
Parameter MockMeta3Curve.calc_token_amount(uint256[2],bool)._amounts (contracts/mocks/curve/MockMeta3Curve.sol#534) is not in mixedCase
Parameter MockMeta3Curve.calc_token_amount(uint256[2],bool)._is_deposit (contracts/mocks/curve/MockMeta3Curve.sol#534) is not in mixedCase
Function MockMeta3Curve.get_D_mem(uint256[2],uint256[2],uint256) (contracts/mocks/curve/MockMeta3Curve.sol#549-552) is not in mixedCase
Parameter MockMeta3Curve.get_D_mem(uint256[2],uint256[2],uint256)._rates (contracts/mocks/curve/MockMeta3Curve.sol#549) is not in mixedCase
Parameter MockMeta3Curve.get_D_mem(uint256[2],uint256[2],uint256)._balances (contracts/mocks/curve/MockMeta3Curve.sol#549) is not in mixedCase
Parameter MockMeta3Curve.get_D_mem(uint256[2],uint256[2],uint256)._amp (contracts/mocks/curve/MockMeta3Curve.sol#549) is not in mixedCase
Variable MockMeta3Curve.price_cumulative_last (contracts/mocks/curve/MockMeta3Curve.sol#58) is not in mixedCase
Variable MockMeta3Curve.timestamp_last (contracts/mocks/curve/MockMeta3Curve.sol#59) is not in mixedCase
Variable MockMeta3Curve.BASE_POOL (contracts/mocks/curve/MockMeta3Curve.sol#60) is not in mixedCase
Variable MockMeta3Curve.virtual_price (contracts/mocks/curve/MockMeta3Curve.sol#62) is not in mixedCase
Variable MockMeta3Curve.rate_multiplier (contracts/mocks/curve/MockMeta3Curve.sol#63) is not in mixedCase
Parameter MockPlainCurve.init(address,address)._token (contracts/mocks/curve/MockPlainCurve.sol#54) is not in mixedCase
Parameter MockPlainCurve.init(address,address)._token2 (contracts/mocks/curve/MockPlainCurve.sol#54) is not in mixedCase
Function MockPlainCurve.A_precise() (contracts/mocks/curve/MockPlainCurve.sol#64-66) is not in mixedCase
Function MockPlainCurve.get_balances() (contracts/mocks/curve/MockPlainCurve.sol#68-70) is not in mixedCase
Function MockPlainCurve.get_previous_balances() (contracts/mocks/curve/MockPlainCurve.sol#72-74) is not in mixedCase
Function MockPlainCurve.get_virtual_price() (contracts/mocks/curve/MockPlainCurve.sol#76-78) is not in mixedCase
Function MockPlainCurve.set_A_precise(uint256) (contracts/mocks/curve/MockPlainCurve.sol#83-85) is not in mixedCase
Parameter MockPlainCurve.set_A_precise(uint256)._a (contracts/mocks/curve/MockPlainCurve.sol#83) is not in mixedCase
Function MockPlainCurve.set_balances(uint256[2]) (contracts/mocks/curve/MockPlainCurve.sol#87-90) is not in mixedCase
Parameter MockPlainCurve.set_balances(uint256[2])._balances (contracts/mocks/curve/MockPlainCurve.sol#87) is not in mixedCase
Function MockPlainCurve.set_supply(uint256) (contracts/mocks/curve/MockPlainCurve.sol#92-94) is not in mixedCase
Parameter MockPlainCurve.set_supply(uint256)._supply (contracts/mocks/curve/MockPlainCurve.sol#92) is not in mixedCase
Function MockPlainCurve.set_virtual_price(uint256) (contracts/mocks/curve/MockPlainCurve.sol#96-98) is not in mixedCase
Parameter MockPlainCurve.set_virtual_price(uint256)._virtual_price (contracts/mocks/curve/MockPlainCurve.sol#96) is not in mixedCase
Parameter MockPlainCurve.update(uint256[2]).new_balances (contracts/mocks/curve/MockPlainCurve.sol#102) is not in mixedCase
Function MockPlainCurve.reset_cumulative() (contracts/mocks/curve/MockPlainCurve.sol#113-116) is not in mixedCase
Function MockPlainCurve.get_price_cumulative_last() (contracts/mocks/curve/MockPlainCurve.sol#118-120) is not in mixedCase
Function MockPlainCurve.block_timestamp_last() (contracts/mocks/curve/MockPlainCurve.sol#122-124) is not in mixedCase
Function MockPlainCurve.add_liquidity(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#137-193) is not in mixedCase
Parameter MockPlainCurve.add_liquidity(uint256[2],uint256)._amounts (contracts/mocks/curve/MockPlainCurve.sol#137) is not in mixedCase
Parameter MockPlainCurve.add_liquidity(uint256[2],uint256)._min_mint_amount (contracts/mocks/curve/MockPlainCurve.sol#137) is not in mixedCase
Function MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/mocks/curve/MockPlainCurve.sol#201-217) is not in mixedCase
Parameter MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256)._burn_amount (contracts/mocks/curve/MockPlainCurve.sol#202) is not in mixedCase
Parameter MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256)._i_ (contracts/mocks/curve/MockPlainCurve.sol#203) is not in mixedCase
Parameter MockPlainCurve.remove_liquidity_one_coin(uint256,int128,uint256)._min_received (contracts/mocks/curve/MockPlainCurve.sol#204) is not in mixedCase
Function MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2]) (contracts/mocks/curve/MockPlainCurve.sol#219-249) is not in mixedCase
Parameter MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2])._burn_amount (contracts/mocks/curve/MockPlainCurve.sol#219) is not in mixedCase
Parameter MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2])._i_ (contracts/mocks/curve/MockPlainCurve.sol#219) is not in mixedCase
Parameter MockPlainCurve._calc_withdraw_one_coin(uint256,int128,uint256[2])._balances (contracts/mocks/curve/MockPlainCurve.sol#219) is not in mixedCase
Function MockPlainCurve._xp_mem(uint256[2],uint256[2]) (contracts/mocks/curve/MockPlainCurve.sol#266-270) is not in mixedCase
Parameter MockPlainCurve._xp_mem(uint256[2],uint256[2])._rates (contracts/mocks/curve/MockPlainCurve.sol#266) is not in mixedCase
Parameter MockPlainCurve._xp_mem(uint256[2],uint256[2])._balances (contracts/mocks/curve/MockPlainCurve.sol#266) is not in mixedCase
Function MockPlainCurve.get_D(uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#272-295) is not in mixedCase
Parameter MockPlainCurve.get_D(uint256[2],uint256)._a (contracts/mocks/curve/MockPlainCurve.sol#272) is not in mixedCase
Function MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#297-339) is not in mixedCase
Parameter MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256).A (contracts/mocks/curve/MockPlainCurve.sol#297) is not in mixedCase
Parameter MockPlainCurve.get_y_D(uint256,uint256,uint256[2],uint256).D (contracts/mocks/curve/MockPlainCurve.sol#297) is not in mixedCase
Function MockPlainCurve.calc_token_amount(uint256[2],bool) (contracts/mocks/curve/MockPlainCurve.sol#341-354) is not in mixedCase
Parameter MockPlainCurve.calc_token_amount(uint256[2],bool)._amounts (contracts/mocks/curve/MockPlainCurve.sol#341) is not in mixedCase
Parameter MockPlainCurve.calc_token_amount(uint256[2],bool)._is_deposit (contracts/mocks/curve/MockPlainCurve.sol#341) is not in mixedCase
Function MockPlainCurve.get_D_mem(uint256[2],uint256[2],uint256) (contracts/mocks/curve/MockPlainCurve.sol#356-359) is not in mixedCase
Parameter MockPlainCurve.get_D_mem(uint256[2],uint256[2],uint256)._rates (contracts/mocks/curve/MockPlainCurve.sol#356) is not in mixedCase
Parameter MockPlainCurve.get_D_mem(uint256[2],uint256[2],uint256)._balances (contracts/mocks/curve/MockPlainCurve.sol#356) is not in mixedCase
Parameter MockPlainCurve.get_D_mem(uint256[2],uint256[2],uint256)._amp (contracts/mocks/curve/MockPlainCurve.sol#356) is not in mixedCase
Variable MockPlainCurve.price_cumulative_last (contracts/mocks/curve/MockPlainCurve.sol#39) is not in mixedCase
Variable MockPlainCurve.timestamp_last (contracts/mocks/curve/MockPlainCurve.sol#40) is not in mixedCase
Variable MockPlainCurve.virtual_price (contracts/mocks/curve/MockPlainCurve.sol#42) is not in mixedCase
Variable MockPlainCurve.rate_multipliers (contracts/mocks/curve/MockPlainCurve.sol#43) is not in mixedCase
Function ResetPool.reset_cumulative() (contracts/mocks/mockFacets/MockSeasonFacet.sol#21) is not in mixedCase
Parameter MockSeasonFacet.fastForward(uint32)._s (contracts/mocks/mockFacets/MockSeasonFacet.sol#113) is not in mixedCase
Parameter MockSeasonFacet.teleportSunrise(uint32)._s (contracts/mocks/mockFacets/MockSeasonFacet.sol#118) is not in mixedCase
Parameter MockSeasonFacet.stepWeatherWithParams(uint256,uint256,uint128,uint128,int256,bool,bool)._lastDSoil (contracts/mocks/mockFacets/MockSeasonFacet.sol#204) is not in mixedCase
Parameter MockSeasonFacet.setSunriseBlock(uint256)._block (contracts/mocks/mockFacets/MockSeasonFacet.sol#256) is not in mixedCase
Parameter MockSiloFacet.mockUnripeLPDeposit(uint256,uint32,uint256,uint256)._s (contracts/mocks/mockFacets/MockSiloFacet.sol#40) is not in mixedCase
Parameter MockSiloFacet.mockUnripeBeanDeposit(uint32,uint256)._s (contracts/mocks/mockFacets/MockSiloFacet.sol#58) is not in mixedCase
Function MockSiloFacet.__mowLegacy(address) (contracts/mocks/mockFacets/MockSiloFacet.sol#113-117) is not in mixedCase
Parameter MockSiloFacet.handleRainAndSopsLegacy(address,uint32)._lastUpdate (contracts/mocks/mockFacets/MockSiloFacet.sol#119) is not in mixedCase
Parameter MockUniswapV3Factory.setOwner(address)._owner (contracts/mocks/uniswap/MockUniswapV3Factory.sol#54) is not in mixedCase
Variable MockUniswapV3Pool.manual_ticks (contracts/mocks/uniswap/MockUniswapV3Pool.sol#107) is not in mixedCase
Variable MockUniswapV3Pool.manual_sqrtPriceX96 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#108) is not in mixedCase
Function ERC20Permit.DOMAIN_SEPARATOR() (contracts/tokens/ERC20/ERC20Permit.sol#76-78) is not in mixedCase
Variable ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT (contracts/tokens/ERC20/ERC20Permit.sol#32) is not in mixedCase
Function Fertilizer.__update(address,uint256[],uint256) (contracts/tokens/Fertilizer/Fertilizer.sol#73-87) is not in mixedCase
Function Fertilizer1155.__doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes) (contracts/tokens/Fertilizer/Fertilizer1155.sol#100-119) is not in mixedCase
Function Fertilizer1155.__doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes) (contracts/tokens/Fertilizer/Fertilizer1155.sol#121-142) is not in mixedCase
Function Fertilizer1155.__asSingletonArray(uint256) (contracts/tokens/Fertilizer/Fertilizer1155.sol#144-149) is not in mixedCase
Parameter FertilizerPreMint.initialize(string)._uri (contracts/tokens/Fertilizer/FertilizerPreMint.sol#37) is not in mixedCase
Function FertilizerPreMint.__mint(uint256) (contracts/tokens/Fertilizer/FertilizerPreMint.sol#57-65) is not in mixedCase
Function Internalizer.__Internallize_init(string) (contracts/tokens/Fertilizer/Internalizer.sol#31-35) is not in mixedCase
Parameter Internalizer.uri(uint256)._id (contracts/tokens/Fertilizer/Internalizer.sol#41) is not in mixedCase
Variable Internalizer._balances (contracts/tokens/Fertilizer/Internalizer.sol#37) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "this (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#28)" inContextUpgradeable (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#16-32)
Redundant expression "this (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#102)" inEIP712 (node_modules/@openzeppelin/contracts/drafts/EIP712.sol#24-108)
Redundant expression "this (node_modules/@openzeppelin/contracts/utils/Context.sol#21)" inContext (node_modules/@openzeppelin/contracts/utils/Context.sol#15-24)
Redundant expression "i (contracts/beanstalk/silo/ConvertFacet.sol#313)" inConvertFacet (contracts/beanstalk/silo/ConvertFacet.sol#24-393)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
Variable IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#47) is too similar to IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#48)
Variable IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#20) is too similar to IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#21)
Variable IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#47) is too similar to IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#21)
Variable IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#20) is too similar to IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#48)
Variable IUniswapV3PoolState.positions(bytes32).feeGrowthInside0LastX128 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#93) is too similar to IUniswapV3PoolState.positions(bytes32).feeGrowthInside1LastX128 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#94)
Variable IUniswapV3PoolState.ticks(int24).feeGrowthOutside0X128 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#70) is too similar to IUniswapV3PoolState.ticks(int24).feeGrowthOutside1X128 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#71)
Variable IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#10) is too similar to IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol1 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#10)
Variable IUniswapV3PoolState.positions(bytes32).tokensOwed0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#95) is too similar to IUniswapV3PoolState.positions(bytes32).tokensOwed1 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#96)
Variable IUniswapV3MintCallback.uniswapV3MintCallback(uint256,uint256,bytes).amount0Owed (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#14) is too similar to IUniswapV3MintCallback.uniswapV3MintCallback(uint256,uint256,bytes).amount1Owed (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol#15)
Variable IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount0Delta (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#17) is too similar to IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount1Delta (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#18)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
Variable Position.update(Position.Info,int128,uint256,uint256).feeGrowthInside0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#47) is too similar to Position.update(Position.Info,int128,uint256,uint256).feeGrowthInside1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#48)
Variable Position.update(Position.Info,int128,uint256,uint256).tokensOwed0 (node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#61-68) is too similar to Position.update(Position.Info,int128,uint256,uint256).tokensOwed1 (node_modules/@uniswap/v3-core/contracts/libraries/Position.sol#69-76)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#218) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#219)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#183) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#219)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#202) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#203)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#154) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#203)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#218) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#203)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#183) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#203)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#183) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#184)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#154) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#155)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#218) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#155)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#183) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#155)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#202) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#155)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#202) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#219)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#202) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#184)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#154) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#219)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#154) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#184)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#218) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (node_modules/@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol#184)
Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthAbove0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#83) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthAbove1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#84)
Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthBelow0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#72) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthBelow1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#73)
Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#65) is too similar to Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#116)
Variable Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#115) is too similar to Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#172)
Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#65) is too similar to Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#172)
Variable Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#115) is too similar to Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#116)
Variable Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#115) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#66)
Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#65) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#66)
Variable Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#171) is too similar to Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#116)
Variable Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#171) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#66)
Variable Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#171) is too similar to Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256,uint160,int56,uint32).feeGrowthGlobal1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#172)
Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthInside0X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#67) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthInside1X128 (node_modules/@uniswap/v3-core/contracts/libraries/Tick.sol#67)
Variable CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).amountsOut_scope_2 (contracts/beanstalk/farm/CurveFacet.sol#204-208) is too similar to CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).amountsOut_scope_4 (contracts/beanstalk/farm/CurveFacet.sol#211-220)
Variable CurveFacet.removeLiquidityImbalance(address,address,uint256[],uint256,LibTransfer.From,LibTransfer.To).coins_scope_0 (contracts/beanstalk/farm/CurveFacet.sol#294) is too similar to CurveFacet.removeLiquidity(address,address,uint256,uint256[],LibTransfer.From,LibTransfer.To).coins_scope_6 (contracts/beanstalk/farm/CurveFacet.sol#224)
Variable MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24)._feeGrowthGlobal0X128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#397) is too similar to MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24)._feeGrowthGlobal1X128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#398)
Variable MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#503) is too similar to MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#504)
Variable MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#503) is too similar to IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#21)
Variable IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#20) is too similar to MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#504)
Variable MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#859) is too similar to MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#504)
Variable MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#859) is too similar to IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#21)
Variable MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#859) is too similar to MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#860)
Variable IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#47) is too similar to MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#504)
Variable IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#47) is too similar to MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#860)
Variable MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#859) is too similar to IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#48)
Variable MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#503) is too similar to MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#860)
Variable IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#20) is too similar to MockUniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#860)
Variable MockUniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested (contracts/mocks/uniswap/MockUniswapV3Pool.sol#503) is too similar to IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#48)
Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance0After (contracts/mocks/uniswap/MockUniswapV3Pool.sol#819) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance1After (contracts/mocks/uniswap/MockUniswapV3Pool.sol#820)
Variable MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#784) is too similar to MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#790)
Variable MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#487) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#812)
Variable MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#487) is too similar to MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#790)
Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#811) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#812)
Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#811) is too similar to MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#790)
Variable MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#487) is too similar to MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#488)
Variable MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#784) is too similar to MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#488)
Variable MockUniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#784) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#812)
Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).balance0Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#811) is too similar to MockUniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before (contracts/mocks/uniswap/MockUniswapV3Pool.sol#488)
Variable MockUniswapV3Pool.feeGrowthGlobal0X128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#83) is too similar to MockUniswapV3Pool.feeGrowthGlobal1X128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#85)
Variable MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24).feeGrowthInside0X128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#448) is too similar to MockUniswapV3Pool._updatePosition(address,int24,int24,int128,int24).feeGrowthInside1X128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#448)
Variable MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846) is too similar to IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol1 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#10)
Variable MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846) is too similar to MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846)
Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#830) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#836)
Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#830) is too similar to MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846)
Variable IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#10) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#836)
Variable MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846) is too similar to MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#836)
Variable IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#10) is too similar to MockUniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol1 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#846)
Variable MockUniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol0 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#830) is too similar to IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol1 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#10)
Variable MockUniswapV3Pool.snapshotCumulativesInside(int24,int24).secondsPerLiquidityOutsideLowerX128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#181) is too similar to MockUniswapV3Pool.snapshotCumulativesInside(int24,int24).secondsPerLiquidityOutsideUpperX128 (contracts/mocks/uniswap/MockUniswapV3Pool.sol#182)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Detectors:
BitMath.mostSignificantBit(uint256) (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#13-45) uses literals with too many digits:
	- x >= 0x100000000000000000000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#16)
BitMath.mostSignificantBit(uint256) (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#13-45) uses literals with too many digits:
	- x >= 0x10000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#20)
BitMath.mostSignificantBit(uint256) (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#13-45) uses literals with too many digits:
	- x >= 0x100000000 (node_modules/@uniswap/v3-core/contracts/libraries/BitMath.sol#24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
FixedPoint128.slitherConstructorConstantVariables() (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#6-8) uses literals with too many digits:
	- Q128 = 0x100000000000000000000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint128.sol#7)
FixedPoint96.slitherConstructorConstantVariables() (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#7-10) uses literals with too many digits:
	- Q96 = 0x1000000000000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#9)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) uses literals with too many digits:
	- ratio = 0x100000000000000000000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#27)
InitBip11.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip11.sol#16-33) uses literals with too many digits:
	- PAYMENT = 4000000000 (contracts/beanstalk/init/InitBip11.sol#23)
InitBip11.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip11.sol#16-33) uses literals with too many digits:
	- DUMPLING_PAYMENT = 1000000000 (contracts/beanstalk/init/InitBip11.sol#26)
InitBip12.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip12.sol#19-34) uses literals with too many digits:
	- PAYMENT = 5000000000 (contracts/beanstalk/init/InitBip12.sol#22)
InitBip16.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip16.sol#20-34) uses literals with too many digits:
	- PAYMENT = 5000000000 (contracts/beanstalk/init/InitBip16.sol#23)
InitBip8.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip8.sol#15-33) uses literals with too many digits:
	- beanSproutBudget = 800000 * 1e6 (contracts/beanstalk/init/InitBip8.sol#23)
InitBip8.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip8.sol#15-33) uses literals with too many digits:
	- beanstalkFarmsBudget = 1200000 * 1e6 (contracts/beanstalk/init/InitBip8.sol#24)
InitBip9.slitherConstructorConstantVariables() (contracts/beanstalk/init/InitBip9.sol#16-33) uses literals with too many digits:
	- PAYMENT = 6000000000 (contracts/beanstalk/init/InitBip9.sol#22)
LibMetaCurveConvert.slitherConstructorConstantVariables() (contracts/libraries/Convert/LibMetaCurveConvert.sol#17-89) uses literals with too many digits:
	- FEED2 = 2000000 (contracts/libraries/Convert/LibMetaCurveConvert.sol#22)
MockMeta3Curve.slitherConstructorVariables() (contracts/mocks/curve/MockMeta3Curve.sol#41-710) uses literals with too many digits:
	- fee = 4000000 (contracts/mocks/curve/MockMeta3Curve.sol#61)
MockMeta3Curve.slitherConstructorConstantVariables() (contracts/mocks/curve/MockMeta3Curve.sol#41-710) uses literals with too many digits:
	- ADMIN_FEE = 5000000000 (contracts/mocks/curve/MockMeta3Curve.sol#48)
MockPlainCurve.slitherConstructorVariables() (contracts/mocks/curve/MockPlainCurve.sol#21-517) uses literals with too many digits:
	- fee = 4000000 (contracts/mocks/curve/MockPlainCurve.sol#41)
MockPlainCurve.slitherConstructorConstantVariables() (contracts/mocks/curve/MockPlainCurve.sol#21-517) uses literals with too many digits:
	- ADMIN_FEE = 5000000000 (contracts/mocks/curve/MockPlainCurve.sol#28)
Order._fillPodOrder(Order.PodOrder,uint256,uint256,uint256,LibTransfer.To) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#92-117) uses literals with too many digits:
	- costInBeans = amount.mul(o.pricePerPod).div(1000000) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#105)
Order.getAmountBeansToFillOrderV2(uint256,uint256,bytes) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#191-198) uses literals with too many digits:
	- beanAmount = beanAmount.div(1000000) (contracts/beanstalk/market/MarketplaceFacet/Order.sol#197)
Listing.getAmountPodsFromFillListing(uint24,uint256,uint256) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#251-256) uses literals with too many digits:
	- amount = (fillBeanAmount * 1000000) / pricePerPod (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#252)
Listing.getAmountPodsFromFillListing(uint24,uint256,uint256) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#251-256) uses literals with too many digits:
	- remainingAmount <= (1000000 / pricePerPod) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#255)
Listing.getAmountPodsFromFillListingV2(uint256,uint256,uint256,bytes) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#258-269) uses literals with too many digits:
	- amount = (fillBeanAmount.mul(1000000)) / pricePerPod (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#265)
Listing.getAmountPodsFromFillListingV2(uint256,uint256,uint256,bytes) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#258-269) uses literals with too many digits:
	- remainingAmount <= (1000000 / pricePerPod) (contracts/beanstalk/market/MarketplaceFacet/Listing.sol#268)
MockUniswapV3Factory.enableFeeAmount(uint24,int24) (contracts/mocks/uniswap/MockUniswapV3Factory.sol#61-72) uses literals with too many digits:
	- require(bool)(fee < 1000000) (contracts/mocks/uniswap/MockUniswapV3Factory.sol#63)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
C.SOP_PRECISION (contracts/C.sol#33) is never used in C (contracts/C.sol#17-198)
C.WETH (contracts/C.sol#69) is never used in C (contracts/C.sol#17-198)
C.BASE_FEE_CONTRACT (contracts/C.sol#73) is never used in C (contracts/C.sol#17-198)
Diamond.s (contracts/beanstalk/Diamond.sol#21) is never used in Diamond (contracts/beanstalk/Diamond.sol#20-56)
InitBip0.s (contracts/beanstalk/init/InitBip0.sol#21) is never used in InitBip0 (contracts/beanstalk/init/InitBip0.sol#17-78)
InitBip11.s (contracts/beanstalk/init/InitBip11.sol#18) is never used in InitBip11 (contracts/beanstalk/init/InitBip11.sol#16-33)
InitDiamond.PEG_PAIR (contracts/beanstalk/init/InitDiamond.sol#29) is never used in InitDiamond (contracts/beanstalk/init/InitDiamond.sol#23-71)
InitHotFix4.s (contracts/beanstalk/init/InitHotFix4.sol#16) is never used in InitHotFix4 (contracts/beanstalk/init/InitHotFix4.sol#15-32)
InitOmnisciaAudit.s (contracts/beanstalk/init/InitOmnisciaAudit.sol#15) is never used in InitOmnisciaAudit (contracts/beanstalk/init/InitOmnisciaAudit.sol#13-23)
MetadataFacet.s (contracts/beanstalk/metadata/MetadataFacet.sol#31) is never used in MetadataFacet (contracts/beanstalk/metadata/MetadataFacet.sol#28-85)
DecimalExtended.PERCENT_BASE (contracts/beanstalk/sun/SeasonFacet/Weather.sol#11) is never used in DecimalExtended (contracts/beanstalk/sun/SeasonFacet/Weather.sol#10-16)
LibBeanMetaCurve.i (contracts/libraries/Curve/LibBeanMetaCurve.sol#21) is never used in LibBeanMetaCurve (contracts/libraries/Curve/LibBeanMetaCurve.sol#16-116)
LibBeanMetaCurve.j (contracts/libraries/Curve/LibBeanMetaCurve.sol#22) is never used in LibBeanMetaCurve (contracts/libraries/Curve/LibBeanMetaCurve.sol#16-116)
MockDiamond.s (contracts/mocks/MockDiamond.sol#20) is never used in MockDiamond (contracts/mocks/MockDiamond.sol#19-55)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable
INFO:Detectors:
MockMeta3Curve.fee (contracts/mocks/curve/MockMeta3Curve.sol#61) should be constant 
MockPlainCurve.fee (contracts/mocks/curve/MockPlainCurve.sol#41) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Slither:. analyzed (308 contracts with 85 detectors), 1270 result(s) found
