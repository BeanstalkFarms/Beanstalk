{"version":3,"file":"Address.cjs.js","sources":["../../src/constants/chains.ts","../../src/lib/Address.ts"],"sourcesContent":["/**\n * List of supported chains\n */\nexport enum ChainId {\n  MAINNET = 1,\n  LOCALHOST = 1337\n}\n\n/**\n * These chains are forks of mainnet,\n * therefore they use the same token addresses as mainnet.\n */\nexport const TESTNET_CHAINS = new Set([ChainId.LOCALHOST]);\n","import { ChainId, TESTNET_CHAINS } from \"src/constants/chains\";\n\nexport type AddressDefinition = {\n  [id: number]: string;\n};\n\nexport class Address {\n  private addresses: AddressDefinition;\n  public MAINNET: string;\n  public LOCALHOST: string;\n\n  static make<T extends string | AddressDefinition>(input: T): Address {\n    const addresses: AddressDefinition = {};\n    if (typeof input == \"string\") {\n      addresses[ChainId.MAINNET] = input;\n    } else {\n      Object.assign(addresses, input);\n    }\n\n    // Make address values lowercase\n    const lowerCaseAddresses: AddressDefinition = {};\n    for (const key in addresses) {\n      lowerCaseAddresses[key] = addresses[key].toLowerCase();\n    }\n\n    return new Address(lowerCaseAddresses);\n  }\n\n  constructor(addresses: AddressDefinition) {\n    this.addresses = addresses;\n    this.MAINNET = this.addresses[ChainId.MAINNET];\n    this.LOCALHOST = this.addresses[ChainId.LOCALHOST];\n  }\n\n  get(chainId?: number) {\n    // Default to MAINNET if no chain is specified\n    if (!chainId) {\n      return this.addresses[ChainId.MAINNET];\n    }\n\n    // Throw if user wants a specific chain which we don't support\n    if (!ChainId[chainId]) {\n      throw new Error(`Chain ID ${chainId} is not supported`);\n    }\n\n    // If user wants an address on a TESTNET chain\n    // return mainnet one if it's not found\n    if (TESTNET_CHAINS.has(chainId)) {\n      return this.addresses[chainId] || this.addresses[ChainId.MAINNET];\n    }\n\n    return this.addresses[chainId];\n  }\n\n  set<T extends string | AddressDefinition>(input: T) {\n    const newAddress = Address.make(input);\n    Object.assign(this, newAddress);\n  }\n}\n"],"names":[],"mappings":";;AAAA;;AAEG;AACH,IAAY,OAGX,CAAA;AAHD,CAAA,UAAY,OAAO,EAAA;AACjB,IAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAW,CAAA;AACX,IAAA,OAAA,CAAA,OAAA,CAAA,WAAA,CAAA,GAAA,IAAA,CAAA,GAAA,WAAgB,CAAA;AAClB,CAAC,EAHW,OAAO,KAAP,OAAO,GAGlB,EAAA,CAAA,CAAA,CAAA;AAED;;;AAGG;AACI,MAAM,cAAc,GAAG,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;;MCN7C,OAAO,CAAA;AAsBlB,IAAA,WAAA,CAAY,SAA4B,EAAA;AACtC,QAAA,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KACpD;IArBD,OAAO,IAAI,CAAuC,KAAQ,EAAA;QACxD,MAAM,SAAS,GAAsB,EAAE,CAAC;AACxC,QAAA,IAAI,OAAO,KAAK,IAAI,QAAQ,EAAE;AAC5B,YAAA,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;AACpC,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;AACjC,SAAA;;QAGD,MAAM,kBAAkB,GAAsB,EAAE,CAAC;AACjD,QAAA,KAAK,MAAM,GAAG,IAAI,SAAS,EAAE;YAC3B,kBAAkB,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;AACxD,SAAA;AAED,QAAA,OAAO,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAAC;KACxC;AAQD,IAAA,GAAG,CAAC,OAAgB,EAAA;;QAElB,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACxC,SAAA;;AAGD,QAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;AACrB,YAAA,MAAM,IAAI,KAAK,CAAC,YAAY,OAAO,CAAA,iBAAA,CAAmB,CAAC,CAAC;AACzD,SAAA;;;AAID,QAAA,IAAI,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;AAC/B,YAAA,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACnE,SAAA;AAED,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;KAChC;AAED,IAAA,GAAG,CAAuC,KAAQ,EAAA;QAChD,MAAM,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACvC,QAAA,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;KACjC;AACF;;;;"}